/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mmec.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-03-24")
public class CssRMIServices {

  public interface Iface {

    public ResultVerify verify(String zipPath, String filePath) throws org.apache.thrift.TException;

    public ResultData signService(String datasource) throws org.apache.thrift.TException;

    public ResultData getTimestampService(String contSerialNum, String certFingerprint) throws org.apache.thrift.TException;

    public ResultData verifySignature(String cert, String originalSignature, String signature, String timeStamp, String contractSerialNum) throws org.apache.thrift.TException;

    public ResultData verifyPDF(String pdfPath) throws org.apache.thrift.TException;

    public ResultData verifySignatureNoTimestamp(Map<String,String> datamap) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void verify(String zipPath, String filePath, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void signService(String datasource, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTimestampService(String contSerialNum, String certFingerprint, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void verifySignature(String cert, String originalSignature, String signature, String timeStamp, String contractSerialNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void verifyPDF(String pdfPath, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void verifySignatureNoTimestamp(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ResultVerify verify(String zipPath, String filePath) throws org.apache.thrift.TException
    {
      send_verify(zipPath, filePath);
      return recv_verify();
    }

    public void send_verify(String zipPath, String filePath) throws org.apache.thrift.TException
    {
      verify_args args = new verify_args();
      args.setZipPath(zipPath);
      args.setFilePath(filePath);
      sendBase("verify", args);
    }

    public ResultVerify recv_verify() throws org.apache.thrift.TException
    {
      verify_result result = new verify_result();
      receiveBase(result, "verify");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "verify failed: unknown result");
    }

    public ResultData signService(String datasource) throws org.apache.thrift.TException
    {
      send_signService(datasource);
      return recv_signService();
    }

    public void send_signService(String datasource) throws org.apache.thrift.TException
    {
      signService_args args = new signService_args();
      args.setDatasource(datasource);
      sendBase("signService", args);
    }

    public ResultData recv_signService() throws org.apache.thrift.TException
    {
      signService_result result = new signService_result();
      receiveBase(result, "signService");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "signService failed: unknown result");
    }

    public ResultData getTimestampService(String contSerialNum, String certFingerprint) throws org.apache.thrift.TException
    {
      send_getTimestampService(contSerialNum, certFingerprint);
      return recv_getTimestampService();
    }

    public void send_getTimestampService(String contSerialNum, String certFingerprint) throws org.apache.thrift.TException
    {
      getTimestampService_args args = new getTimestampService_args();
      args.setContSerialNum(contSerialNum);
      args.setCertFingerprint(certFingerprint);
      sendBase("getTimestampService", args);
    }

    public ResultData recv_getTimestampService() throws org.apache.thrift.TException
    {
      getTimestampService_result result = new getTimestampService_result();
      receiveBase(result, "getTimestampService");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTimestampService failed: unknown result");
    }

    public ResultData verifySignature(String cert, String originalSignature, String signature, String timeStamp, String contractSerialNum) throws org.apache.thrift.TException
    {
      send_verifySignature(cert, originalSignature, signature, timeStamp, contractSerialNum);
      return recv_verifySignature();
    }

    public void send_verifySignature(String cert, String originalSignature, String signature, String timeStamp, String contractSerialNum) throws org.apache.thrift.TException
    {
      verifySignature_args args = new verifySignature_args();
      args.setCert(cert);
      args.setOriginalSignature(originalSignature);
      args.setSignature(signature);
      args.setTimeStamp(timeStamp);
      args.setContractSerialNum(contractSerialNum);
      sendBase("verifySignature", args);
    }

    public ResultData recv_verifySignature() throws org.apache.thrift.TException
    {
      verifySignature_result result = new verifySignature_result();
      receiveBase(result, "verifySignature");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "verifySignature failed: unknown result");
    }

    public ResultData verifyPDF(String pdfPath) throws org.apache.thrift.TException
    {
      send_verifyPDF(pdfPath);
      return recv_verifyPDF();
    }

    public void send_verifyPDF(String pdfPath) throws org.apache.thrift.TException
    {
      verifyPDF_args args = new verifyPDF_args();
      args.setPdfPath(pdfPath);
      sendBase("verifyPDF", args);
    }

    public ResultData recv_verifyPDF() throws org.apache.thrift.TException
    {
      verifyPDF_result result = new verifyPDF_result();
      receiveBase(result, "verifyPDF");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "verifyPDF failed: unknown result");
    }

    public ResultData verifySignatureNoTimestamp(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_verifySignatureNoTimestamp(datamap);
      return recv_verifySignatureNoTimestamp();
    }

    public void send_verifySignatureNoTimestamp(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      verifySignatureNoTimestamp_args args = new verifySignatureNoTimestamp_args();
      args.setDatamap(datamap);
      sendBase("verifySignatureNoTimestamp", args);
    }

    public ResultData recv_verifySignatureNoTimestamp() throws org.apache.thrift.TException
    {
      verifySignatureNoTimestamp_result result = new verifySignatureNoTimestamp_result();
      receiveBase(result, "verifySignatureNoTimestamp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "verifySignatureNoTimestamp failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void verify(String zipPath, String filePath, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      verify_call method_call = new verify_call(zipPath, filePath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class verify_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String zipPath;
      private String filePath;
      public verify_call(String zipPath, String filePath, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.zipPath = zipPath;
        this.filePath = filePath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("verify", org.apache.thrift.protocol.TMessageType.CALL, 0));
        verify_args args = new verify_args();
        args.setZipPath(zipPath);
        args.setFilePath(filePath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultVerify getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_verify();
      }
    }

    public void signService(String datasource, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      signService_call method_call = new signService_call(datasource, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class signService_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String datasource;
      public signService_call(String datasource, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datasource = datasource;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("signService", org.apache.thrift.protocol.TMessageType.CALL, 0));
        signService_args args = new signService_args();
        args.setDatasource(datasource);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_signService();
      }
    }

    public void getTimestampService(String contSerialNum, String certFingerprint, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTimestampService_call method_call = new getTimestampService_call(contSerialNum, certFingerprint, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTimestampService_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String contSerialNum;
      private String certFingerprint;
      public getTimestampService_call(String contSerialNum, String certFingerprint, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.contSerialNum = contSerialNum;
        this.certFingerprint = certFingerprint;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTimestampService", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTimestampService_args args = new getTimestampService_args();
        args.setContSerialNum(contSerialNum);
        args.setCertFingerprint(certFingerprint);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTimestampService();
      }
    }

    public void verifySignature(String cert, String originalSignature, String signature, String timeStamp, String contractSerialNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      verifySignature_call method_call = new verifySignature_call(cert, originalSignature, signature, timeStamp, contractSerialNum, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class verifySignature_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cert;
      private String originalSignature;
      private String signature;
      private String timeStamp;
      private String contractSerialNum;
      public verifySignature_call(String cert, String originalSignature, String signature, String timeStamp, String contractSerialNum, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cert = cert;
        this.originalSignature = originalSignature;
        this.signature = signature;
        this.timeStamp = timeStamp;
        this.contractSerialNum = contractSerialNum;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("verifySignature", org.apache.thrift.protocol.TMessageType.CALL, 0));
        verifySignature_args args = new verifySignature_args();
        args.setCert(cert);
        args.setOriginalSignature(originalSignature);
        args.setSignature(signature);
        args.setTimeStamp(timeStamp);
        args.setContractSerialNum(contractSerialNum);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_verifySignature();
      }
    }

    public void verifyPDF(String pdfPath, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      verifyPDF_call method_call = new verifyPDF_call(pdfPath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class verifyPDF_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String pdfPath;
      public verifyPDF_call(String pdfPath, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pdfPath = pdfPath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("verifyPDF", org.apache.thrift.protocol.TMessageType.CALL, 0));
        verifyPDF_args args = new verifyPDF_args();
        args.setPdfPath(pdfPath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_verifyPDF();
      }
    }

    public void verifySignatureNoTimestamp(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      verifySignatureNoTimestamp_call method_call = new verifySignatureNoTimestamp_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class verifySignatureNoTimestamp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public verifySignatureNoTimestamp_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("verifySignatureNoTimestamp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        verifySignatureNoTimestamp_args args = new verifySignatureNoTimestamp_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_verifySignatureNoTimestamp();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("verify", new verify());
      processMap.put("signService", new signService());
      processMap.put("getTimestampService", new getTimestampService());
      processMap.put("verifySignature", new verifySignature());
      processMap.put("verifyPDF", new verifyPDF());
      processMap.put("verifySignatureNoTimestamp", new verifySignatureNoTimestamp());
      return processMap;
    }

    public static class verify<I extends Iface> extends org.apache.thrift.ProcessFunction<I, verify_args> {
      public verify() {
        super("verify");
      }

      public verify_args getEmptyArgsInstance() {
        return new verify_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public verify_result getResult(I iface, verify_args args) throws org.apache.thrift.TException {
        verify_result result = new verify_result();
        result.success = iface.verify(args.zipPath, args.filePath);
        return result;
      }
    }

    public static class signService<I extends Iface> extends org.apache.thrift.ProcessFunction<I, signService_args> {
      public signService() {
        super("signService");
      }

      public signService_args getEmptyArgsInstance() {
        return new signService_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public signService_result getResult(I iface, signService_args args) throws org.apache.thrift.TException {
        signService_result result = new signService_result();
        result.success = iface.signService(args.datasource);
        return result;
      }
    }

    public static class getTimestampService<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTimestampService_args> {
      public getTimestampService() {
        super("getTimestampService");
      }

      public getTimestampService_args getEmptyArgsInstance() {
        return new getTimestampService_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTimestampService_result getResult(I iface, getTimestampService_args args) throws org.apache.thrift.TException {
        getTimestampService_result result = new getTimestampService_result();
        result.success = iface.getTimestampService(args.contSerialNum, args.certFingerprint);
        return result;
      }
    }

    public static class verifySignature<I extends Iface> extends org.apache.thrift.ProcessFunction<I, verifySignature_args> {
      public verifySignature() {
        super("verifySignature");
      }

      public verifySignature_args getEmptyArgsInstance() {
        return new verifySignature_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public verifySignature_result getResult(I iface, verifySignature_args args) throws org.apache.thrift.TException {
        verifySignature_result result = new verifySignature_result();
        result.success = iface.verifySignature(args.cert, args.originalSignature, args.signature, args.timeStamp, args.contractSerialNum);
        return result;
      }
    }

    public static class verifyPDF<I extends Iface> extends org.apache.thrift.ProcessFunction<I, verifyPDF_args> {
      public verifyPDF() {
        super("verifyPDF");
      }

      public verifyPDF_args getEmptyArgsInstance() {
        return new verifyPDF_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public verifyPDF_result getResult(I iface, verifyPDF_args args) throws org.apache.thrift.TException {
        verifyPDF_result result = new verifyPDF_result();
        result.success = iface.verifyPDF(args.pdfPath);
        return result;
      }
    }

    public static class verifySignatureNoTimestamp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, verifySignatureNoTimestamp_args> {
      public verifySignatureNoTimestamp() {
        super("verifySignatureNoTimestamp");
      }

      public verifySignatureNoTimestamp_args getEmptyArgsInstance() {
        return new verifySignatureNoTimestamp_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public verifySignatureNoTimestamp_result getResult(I iface, verifySignatureNoTimestamp_args args) throws org.apache.thrift.TException {
        verifySignatureNoTimestamp_result result = new verifySignatureNoTimestamp_result();
        result.success = iface.verifySignatureNoTimestamp(args.datamap);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("verify", new verify());
      processMap.put("signService", new signService());
      processMap.put("getTimestampService", new getTimestampService());
      processMap.put("verifySignature", new verifySignature());
      processMap.put("verifyPDF", new verifyPDF());
      processMap.put("verifySignatureNoTimestamp", new verifySignatureNoTimestamp());
      return processMap;
    }

    public static class verify<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, verify_args, ResultVerify> {
      public verify() {
        super("verify");
      }

      public verify_args getEmptyArgsInstance() {
        return new verify_args();
      }

      public AsyncMethodCallback<ResultVerify> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultVerify>() { 
          public void onComplete(ResultVerify o) {
            verify_result result = new verify_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            verify_result result = new verify_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, verify_args args, org.apache.thrift.async.AsyncMethodCallback<ResultVerify> resultHandler) throws TException {
        iface.verify(args.zipPath, args.filePath,resultHandler);
      }
    }

    public static class signService<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, signService_args, ResultData> {
      public signService() {
        super("signService");
      }

      public signService_args getEmptyArgsInstance() {
        return new signService_args();
      }

      public AsyncMethodCallback<ResultData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultData>() { 
          public void onComplete(ResultData o) {
            signService_result result = new signService_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            signService_result result = new signService_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, signService_args args, org.apache.thrift.async.AsyncMethodCallback<ResultData> resultHandler) throws TException {
        iface.signService(args.datasource,resultHandler);
      }
    }

    public static class getTimestampService<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTimestampService_args, ResultData> {
      public getTimestampService() {
        super("getTimestampService");
      }

      public getTimestampService_args getEmptyArgsInstance() {
        return new getTimestampService_args();
      }

      public AsyncMethodCallback<ResultData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultData>() { 
          public void onComplete(ResultData o) {
            getTimestampService_result result = new getTimestampService_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTimestampService_result result = new getTimestampService_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTimestampService_args args, org.apache.thrift.async.AsyncMethodCallback<ResultData> resultHandler) throws TException {
        iface.getTimestampService(args.contSerialNum, args.certFingerprint,resultHandler);
      }
    }

    public static class verifySignature<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, verifySignature_args, ResultData> {
      public verifySignature() {
        super("verifySignature");
      }

      public verifySignature_args getEmptyArgsInstance() {
        return new verifySignature_args();
      }

      public AsyncMethodCallback<ResultData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultData>() { 
          public void onComplete(ResultData o) {
            verifySignature_result result = new verifySignature_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            verifySignature_result result = new verifySignature_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, verifySignature_args args, org.apache.thrift.async.AsyncMethodCallback<ResultData> resultHandler) throws TException {
        iface.verifySignature(args.cert, args.originalSignature, args.signature, args.timeStamp, args.contractSerialNum,resultHandler);
      }
    }

    public static class verifyPDF<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, verifyPDF_args, ResultData> {
      public verifyPDF() {
        super("verifyPDF");
      }

      public verifyPDF_args getEmptyArgsInstance() {
        return new verifyPDF_args();
      }

      public AsyncMethodCallback<ResultData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultData>() { 
          public void onComplete(ResultData o) {
            verifyPDF_result result = new verifyPDF_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            verifyPDF_result result = new verifyPDF_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, verifyPDF_args args, org.apache.thrift.async.AsyncMethodCallback<ResultData> resultHandler) throws TException {
        iface.verifyPDF(args.pdfPath,resultHandler);
      }
    }

    public static class verifySignatureNoTimestamp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, verifySignatureNoTimestamp_args, ResultData> {
      public verifySignatureNoTimestamp() {
        super("verifySignatureNoTimestamp");
      }

      public verifySignatureNoTimestamp_args getEmptyArgsInstance() {
        return new verifySignatureNoTimestamp_args();
      }

      public AsyncMethodCallback<ResultData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultData>() { 
          public void onComplete(ResultData o) {
            verifySignatureNoTimestamp_result result = new verifySignatureNoTimestamp_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            verifySignatureNoTimestamp_result result = new verifySignatureNoTimestamp_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, verifySignatureNoTimestamp_args args, org.apache.thrift.async.AsyncMethodCallback<ResultData> resultHandler) throws TException {
        iface.verifySignatureNoTimestamp(args.datamap,resultHandler);
      }
    }

  }

  public static class verify_args implements org.apache.thrift.TBase<verify_args, verify_args._Fields>, java.io.Serializable, Cloneable, Comparable<verify_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verify_args");

    private static final org.apache.thrift.protocol.TField ZIP_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("zipPath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("filePath", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verify_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verify_argsTupleSchemeFactory());
    }

    public String zipPath; // required
    public String filePath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ZIP_PATH((short)1, "zipPath"),
      FILE_PATH((short)2, "filePath");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ZIP_PATH
            return ZIP_PATH;
          case 2: // FILE_PATH
            return FILE_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ZIP_PATH, new org.apache.thrift.meta_data.FieldMetaData("zipPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("filePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verify_args.class, metaDataMap);
    }

    public verify_args() {
    }

    public verify_args(
      String zipPath,
      String filePath)
    {
      this();
      this.zipPath = zipPath;
      this.filePath = filePath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verify_args(verify_args other) {
      if (other.isSetZipPath()) {
        this.zipPath = other.zipPath;
      }
      if (other.isSetFilePath()) {
        this.filePath = other.filePath;
      }
    }

    public verify_args deepCopy() {
      return new verify_args(this);
    }

    @Override
    public void clear() {
      this.zipPath = null;
      this.filePath = null;
    }

    public String getZipPath() {
      return this.zipPath;
    }

    public verify_args setZipPath(String zipPath) {
      this.zipPath = zipPath;
      return this;
    }

    public void unsetZipPath() {
      this.zipPath = null;
    }

    /** Returns true if field zipPath is set (has been assigned a value) and false otherwise */
    public boolean isSetZipPath() {
      return this.zipPath != null;
    }

    public void setZipPathIsSet(boolean value) {
      if (!value) {
        this.zipPath = null;
      }
    }

    public String getFilePath() {
      return this.filePath;
    }

    public verify_args setFilePath(String filePath) {
      this.filePath = filePath;
      return this;
    }

    public void unsetFilePath() {
      this.filePath = null;
    }

    /** Returns true if field filePath is set (has been assigned a value) and false otherwise */
    public boolean isSetFilePath() {
      return this.filePath != null;
    }

    public void setFilePathIsSet(boolean value) {
      if (!value) {
        this.filePath = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ZIP_PATH:
        if (value == null) {
          unsetZipPath();
        } else {
          setZipPath((String)value);
        }
        break;

      case FILE_PATH:
        if (value == null) {
          unsetFilePath();
        } else {
          setFilePath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ZIP_PATH:
        return getZipPath();

      case FILE_PATH:
        return getFilePath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ZIP_PATH:
        return isSetZipPath();
      case FILE_PATH:
        return isSetFilePath();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verify_args)
        return this.equals((verify_args)that);
      return false;
    }

    public boolean equals(verify_args that) {
      if (that == null)
        return false;

      boolean this_present_zipPath = true && this.isSetZipPath();
      boolean that_present_zipPath = true && that.isSetZipPath();
      if (this_present_zipPath || that_present_zipPath) {
        if (!(this_present_zipPath && that_present_zipPath))
          return false;
        if (!this.zipPath.equals(that.zipPath))
          return false;
      }

      boolean this_present_filePath = true && this.isSetFilePath();
      boolean that_present_filePath = true && that.isSetFilePath();
      if (this_present_filePath || that_present_filePath) {
        if (!(this_present_filePath && that_present_filePath))
          return false;
        if (!this.filePath.equals(that.filePath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_zipPath = true && (isSetZipPath());
      list.add(present_zipPath);
      if (present_zipPath)
        list.add(zipPath);

      boolean present_filePath = true && (isSetFilePath());
      list.add(present_filePath);
      if (present_filePath)
        list.add(filePath);

      return list.hashCode();
    }

    @Override
    public int compareTo(verify_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetZipPath()).compareTo(other.isSetZipPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetZipPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zipPath, other.zipPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilePath()).compareTo(other.isSetFilePath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilePath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filePath, other.filePath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verify_args(");
      boolean first = true;

      sb.append("zipPath:");
      if (this.zipPath == null) {
        sb.append("null");
      } else {
        sb.append(this.zipPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filePath:");
      if (this.filePath == null) {
        sb.append("null");
      } else {
        sb.append(this.filePath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verify_argsStandardSchemeFactory implements SchemeFactory {
      public verify_argsStandardScheme getScheme() {
        return new verify_argsStandardScheme();
      }
    }

    private static class verify_argsStandardScheme extends StandardScheme<verify_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verify_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ZIP_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.zipPath = iprot.readString();
                struct.setZipPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filePath = iprot.readString();
                struct.setFilePathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verify_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.zipPath != null) {
          oprot.writeFieldBegin(ZIP_PATH_FIELD_DESC);
          oprot.writeString(struct.zipPath);
          oprot.writeFieldEnd();
        }
        if (struct.filePath != null) {
          oprot.writeFieldBegin(FILE_PATH_FIELD_DESC);
          oprot.writeString(struct.filePath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verify_argsTupleSchemeFactory implements SchemeFactory {
      public verify_argsTupleScheme getScheme() {
        return new verify_argsTupleScheme();
      }
    }

    private static class verify_argsTupleScheme extends TupleScheme<verify_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verify_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetZipPath()) {
          optionals.set(0);
        }
        if (struct.isSetFilePath()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetZipPath()) {
          oprot.writeString(struct.zipPath);
        }
        if (struct.isSetFilePath()) {
          oprot.writeString(struct.filePath);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verify_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.zipPath = iprot.readString();
          struct.setZipPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.filePath = iprot.readString();
          struct.setFilePathIsSet(true);
        }
      }
    }

  }

  public static class verify_result implements org.apache.thrift.TBase<verify_result, verify_result._Fields>, java.io.Serializable, Cloneable, Comparable<verify_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verify_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verify_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verify_resultTupleSchemeFactory());
    }

    public ResultVerify success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultVerify.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verify_result.class, metaDataMap);
    }

    public verify_result() {
    }

    public verify_result(
      ResultVerify success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verify_result(verify_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultVerify(other.success);
      }
    }

    public verify_result deepCopy() {
      return new verify_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultVerify getSuccess() {
      return this.success;
    }

    public verify_result setSuccess(ResultVerify success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultVerify)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verify_result)
        return this.equals((verify_result)that);
      return false;
    }

    public boolean equals(verify_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(verify_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verify_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verify_resultStandardSchemeFactory implements SchemeFactory {
      public verify_resultStandardScheme getScheme() {
        return new verify_resultStandardScheme();
      }
    }

    private static class verify_resultStandardScheme extends StandardScheme<verify_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verify_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultVerify();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verify_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verify_resultTupleSchemeFactory implements SchemeFactory {
      public verify_resultTupleScheme getScheme() {
        return new verify_resultTupleScheme();
      }
    }

    private static class verify_resultTupleScheme extends TupleScheme<verify_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verify_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verify_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultVerify();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class signService_args implements org.apache.thrift.TBase<signService_args, signService_args._Fields>, java.io.Serializable, Cloneable, Comparable<signService_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("signService_args");

    private static final org.apache.thrift.protocol.TField DATASOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("datasource", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new signService_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new signService_argsTupleSchemeFactory());
    }

    public String datasource; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATASOURCE((short)1, "datasource");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATASOURCE
            return DATASOURCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATASOURCE, new org.apache.thrift.meta_data.FieldMetaData("datasource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(signService_args.class, metaDataMap);
    }

    public signService_args() {
    }

    public signService_args(
      String datasource)
    {
      this();
      this.datasource = datasource;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public signService_args(signService_args other) {
      if (other.isSetDatasource()) {
        this.datasource = other.datasource;
      }
    }

    public signService_args deepCopy() {
      return new signService_args(this);
    }

    @Override
    public void clear() {
      this.datasource = null;
    }

    public String getDatasource() {
      return this.datasource;
    }

    public signService_args setDatasource(String datasource) {
      this.datasource = datasource;
      return this;
    }

    public void unsetDatasource() {
      this.datasource = null;
    }

    /** Returns true if field datasource is set (has been assigned a value) and false otherwise */
    public boolean isSetDatasource() {
      return this.datasource != null;
    }

    public void setDatasourceIsSet(boolean value) {
      if (!value) {
        this.datasource = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATASOURCE:
        if (value == null) {
          unsetDatasource();
        } else {
          setDatasource((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATASOURCE:
        return getDatasource();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATASOURCE:
        return isSetDatasource();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof signService_args)
        return this.equals((signService_args)that);
      return false;
    }

    public boolean equals(signService_args that) {
      if (that == null)
        return false;

      boolean this_present_datasource = true && this.isSetDatasource();
      boolean that_present_datasource = true && that.isSetDatasource();
      if (this_present_datasource || that_present_datasource) {
        if (!(this_present_datasource && that_present_datasource))
          return false;
        if (!this.datasource.equals(that.datasource))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datasource = true && (isSetDatasource());
      list.add(present_datasource);
      if (present_datasource)
        list.add(datasource);

      return list.hashCode();
    }

    @Override
    public int compareTo(signService_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatasource()).compareTo(other.isSetDatasource());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatasource()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasource, other.datasource);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("signService_args(");
      boolean first = true;

      sb.append("datasource:");
      if (this.datasource == null) {
        sb.append("null");
      } else {
        sb.append(this.datasource);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class signService_argsStandardSchemeFactory implements SchemeFactory {
      public signService_argsStandardScheme getScheme() {
        return new signService_argsStandardScheme();
      }
    }

    private static class signService_argsStandardScheme extends StandardScheme<signService_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, signService_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATASOURCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.datasource = iprot.readString();
                struct.setDatasourceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, signService_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datasource != null) {
          oprot.writeFieldBegin(DATASOURCE_FIELD_DESC);
          oprot.writeString(struct.datasource);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class signService_argsTupleSchemeFactory implements SchemeFactory {
      public signService_argsTupleScheme getScheme() {
        return new signService_argsTupleScheme();
      }
    }

    private static class signService_argsTupleScheme extends TupleScheme<signService_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, signService_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatasource()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatasource()) {
          oprot.writeString(struct.datasource);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, signService_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.datasource = iprot.readString();
          struct.setDatasourceIsSet(true);
        }
      }
    }

  }

  public static class signService_result implements org.apache.thrift.TBase<signService_result, signService_result._Fields>, java.io.Serializable, Cloneable, Comparable<signService_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("signService_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new signService_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new signService_resultTupleSchemeFactory());
    }

    public ResultData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(signService_result.class, metaDataMap);
    }

    public signService_result() {
    }

    public signService_result(
      ResultData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public signService_result(signService_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultData(other.success);
      }
    }

    public signService_result deepCopy() {
      return new signService_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultData getSuccess() {
      return this.success;
    }

    public signService_result setSuccess(ResultData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof signService_result)
        return this.equals((signService_result)that);
      return false;
    }

    public boolean equals(signService_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(signService_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("signService_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class signService_resultStandardSchemeFactory implements SchemeFactory {
      public signService_resultStandardScheme getScheme() {
        return new signService_resultStandardScheme();
      }
    }

    private static class signService_resultStandardScheme extends StandardScheme<signService_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, signService_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, signService_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class signService_resultTupleSchemeFactory implements SchemeFactory {
      public signService_resultTupleScheme getScheme() {
        return new signService_resultTupleScheme();
      }
    }

    private static class signService_resultTupleScheme extends TupleScheme<signService_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, signService_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, signService_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTimestampService_args implements org.apache.thrift.TBase<getTimestampService_args, getTimestampService_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTimestampService_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTimestampService_args");

    private static final org.apache.thrift.protocol.TField CONT_SERIAL_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("contSerialNum", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CERT_FINGERPRINT_FIELD_DESC = new org.apache.thrift.protocol.TField("certFingerprint", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTimestampService_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTimestampService_argsTupleSchemeFactory());
    }

    public String contSerialNum; // required
    public String certFingerprint; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONT_SERIAL_NUM((short)1, "contSerialNum"),
      CERT_FINGERPRINT((short)2, "certFingerprint");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONT_SERIAL_NUM
            return CONT_SERIAL_NUM;
          case 2: // CERT_FINGERPRINT
            return CERT_FINGERPRINT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONT_SERIAL_NUM, new org.apache.thrift.meta_data.FieldMetaData("contSerialNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CERT_FINGERPRINT, new org.apache.thrift.meta_data.FieldMetaData("certFingerprint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTimestampService_args.class, metaDataMap);
    }

    public getTimestampService_args() {
    }

    public getTimestampService_args(
      String contSerialNum,
      String certFingerprint)
    {
      this();
      this.contSerialNum = contSerialNum;
      this.certFingerprint = certFingerprint;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTimestampService_args(getTimestampService_args other) {
      if (other.isSetContSerialNum()) {
        this.contSerialNum = other.contSerialNum;
      }
      if (other.isSetCertFingerprint()) {
        this.certFingerprint = other.certFingerprint;
      }
    }

    public getTimestampService_args deepCopy() {
      return new getTimestampService_args(this);
    }

    @Override
    public void clear() {
      this.contSerialNum = null;
      this.certFingerprint = null;
    }

    public String getContSerialNum() {
      return this.contSerialNum;
    }

    public getTimestampService_args setContSerialNum(String contSerialNum) {
      this.contSerialNum = contSerialNum;
      return this;
    }

    public void unsetContSerialNum() {
      this.contSerialNum = null;
    }

    /** Returns true if field contSerialNum is set (has been assigned a value) and false otherwise */
    public boolean isSetContSerialNum() {
      return this.contSerialNum != null;
    }

    public void setContSerialNumIsSet(boolean value) {
      if (!value) {
        this.contSerialNum = null;
      }
    }

    public String getCertFingerprint() {
      return this.certFingerprint;
    }

    public getTimestampService_args setCertFingerprint(String certFingerprint) {
      this.certFingerprint = certFingerprint;
      return this;
    }

    public void unsetCertFingerprint() {
      this.certFingerprint = null;
    }

    /** Returns true if field certFingerprint is set (has been assigned a value) and false otherwise */
    public boolean isSetCertFingerprint() {
      return this.certFingerprint != null;
    }

    public void setCertFingerprintIsSet(boolean value) {
      if (!value) {
        this.certFingerprint = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONT_SERIAL_NUM:
        if (value == null) {
          unsetContSerialNum();
        } else {
          setContSerialNum((String)value);
        }
        break;

      case CERT_FINGERPRINT:
        if (value == null) {
          unsetCertFingerprint();
        } else {
          setCertFingerprint((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONT_SERIAL_NUM:
        return getContSerialNum();

      case CERT_FINGERPRINT:
        return getCertFingerprint();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONT_SERIAL_NUM:
        return isSetContSerialNum();
      case CERT_FINGERPRINT:
        return isSetCertFingerprint();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTimestampService_args)
        return this.equals((getTimestampService_args)that);
      return false;
    }

    public boolean equals(getTimestampService_args that) {
      if (that == null)
        return false;

      boolean this_present_contSerialNum = true && this.isSetContSerialNum();
      boolean that_present_contSerialNum = true && that.isSetContSerialNum();
      if (this_present_contSerialNum || that_present_contSerialNum) {
        if (!(this_present_contSerialNum && that_present_contSerialNum))
          return false;
        if (!this.contSerialNum.equals(that.contSerialNum))
          return false;
      }

      boolean this_present_certFingerprint = true && this.isSetCertFingerprint();
      boolean that_present_certFingerprint = true && that.isSetCertFingerprint();
      if (this_present_certFingerprint || that_present_certFingerprint) {
        if (!(this_present_certFingerprint && that_present_certFingerprint))
          return false;
        if (!this.certFingerprint.equals(that.certFingerprint))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_contSerialNum = true && (isSetContSerialNum());
      list.add(present_contSerialNum);
      if (present_contSerialNum)
        list.add(contSerialNum);

      boolean present_certFingerprint = true && (isSetCertFingerprint());
      list.add(present_certFingerprint);
      if (present_certFingerprint)
        list.add(certFingerprint);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTimestampService_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetContSerialNum()).compareTo(other.isSetContSerialNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContSerialNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contSerialNum, other.contSerialNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCertFingerprint()).compareTo(other.isSetCertFingerprint());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCertFingerprint()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certFingerprint, other.certFingerprint);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTimestampService_args(");
      boolean first = true;

      sb.append("contSerialNum:");
      if (this.contSerialNum == null) {
        sb.append("null");
      } else {
        sb.append(this.contSerialNum);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("certFingerprint:");
      if (this.certFingerprint == null) {
        sb.append("null");
      } else {
        sb.append(this.certFingerprint);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTimestampService_argsStandardSchemeFactory implements SchemeFactory {
      public getTimestampService_argsStandardScheme getScheme() {
        return new getTimestampService_argsStandardScheme();
      }
    }

    private static class getTimestampService_argsStandardScheme extends StandardScheme<getTimestampService_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTimestampService_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONT_SERIAL_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.contSerialNum = iprot.readString();
                struct.setContSerialNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CERT_FINGERPRINT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.certFingerprint = iprot.readString();
                struct.setCertFingerprintIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTimestampService_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.contSerialNum != null) {
          oprot.writeFieldBegin(CONT_SERIAL_NUM_FIELD_DESC);
          oprot.writeString(struct.contSerialNum);
          oprot.writeFieldEnd();
        }
        if (struct.certFingerprint != null) {
          oprot.writeFieldBegin(CERT_FINGERPRINT_FIELD_DESC);
          oprot.writeString(struct.certFingerprint);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTimestampService_argsTupleSchemeFactory implements SchemeFactory {
      public getTimestampService_argsTupleScheme getScheme() {
        return new getTimestampService_argsTupleScheme();
      }
    }

    private static class getTimestampService_argsTupleScheme extends TupleScheme<getTimestampService_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTimestampService_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetContSerialNum()) {
          optionals.set(0);
        }
        if (struct.isSetCertFingerprint()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetContSerialNum()) {
          oprot.writeString(struct.contSerialNum);
        }
        if (struct.isSetCertFingerprint()) {
          oprot.writeString(struct.certFingerprint);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTimestampService_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.contSerialNum = iprot.readString();
          struct.setContSerialNumIsSet(true);
        }
        if (incoming.get(1)) {
          struct.certFingerprint = iprot.readString();
          struct.setCertFingerprintIsSet(true);
        }
      }
    }

  }

  public static class getTimestampService_result implements org.apache.thrift.TBase<getTimestampService_result, getTimestampService_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTimestampService_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTimestampService_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTimestampService_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTimestampService_resultTupleSchemeFactory());
    }

    public ResultData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTimestampService_result.class, metaDataMap);
    }

    public getTimestampService_result() {
    }

    public getTimestampService_result(
      ResultData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTimestampService_result(getTimestampService_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultData(other.success);
      }
    }

    public getTimestampService_result deepCopy() {
      return new getTimestampService_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultData getSuccess() {
      return this.success;
    }

    public getTimestampService_result setSuccess(ResultData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTimestampService_result)
        return this.equals((getTimestampService_result)that);
      return false;
    }

    public boolean equals(getTimestampService_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTimestampService_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTimestampService_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTimestampService_resultStandardSchemeFactory implements SchemeFactory {
      public getTimestampService_resultStandardScheme getScheme() {
        return new getTimestampService_resultStandardScheme();
      }
    }

    private static class getTimestampService_resultStandardScheme extends StandardScheme<getTimestampService_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTimestampService_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTimestampService_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTimestampService_resultTupleSchemeFactory implements SchemeFactory {
      public getTimestampService_resultTupleScheme getScheme() {
        return new getTimestampService_resultTupleScheme();
      }
    }

    private static class getTimestampService_resultTupleScheme extends TupleScheme<getTimestampService_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTimestampService_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTimestampService_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class verifySignature_args implements org.apache.thrift.TBase<verifySignature_args, verifySignature_args._Fields>, java.io.Serializable, Cloneable, Comparable<verifySignature_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifySignature_args");

    private static final org.apache.thrift.protocol.TField CERT_FIELD_DESC = new org.apache.thrift.protocol.TField("cert", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ORIGINAL_SIGNATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("originalSignature", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SIGNATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("signature", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TIME_STAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timeStamp", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField CONTRACT_SERIAL_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("contractSerialNum", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifySignature_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifySignature_argsTupleSchemeFactory());
    }

    public String cert; // required
    public String originalSignature; // required
    public String signature; // required
    public String timeStamp; // required
    public String contractSerialNum; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CERT((short)1, "cert"),
      ORIGINAL_SIGNATURE((short)2, "originalSignature"),
      SIGNATURE((short)3, "signature"),
      TIME_STAMP((short)4, "timeStamp"),
      CONTRACT_SERIAL_NUM((short)5, "contractSerialNum");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CERT
            return CERT;
          case 2: // ORIGINAL_SIGNATURE
            return ORIGINAL_SIGNATURE;
          case 3: // SIGNATURE
            return SIGNATURE;
          case 4: // TIME_STAMP
            return TIME_STAMP;
          case 5: // CONTRACT_SERIAL_NUM
            return CONTRACT_SERIAL_NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CERT, new org.apache.thrift.meta_data.FieldMetaData("cert", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORIGINAL_SIGNATURE, new org.apache.thrift.meta_data.FieldMetaData("originalSignature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SIGNATURE, new org.apache.thrift.meta_data.FieldMetaData("signature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME_STAMP, new org.apache.thrift.meta_data.FieldMetaData("timeStamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTRACT_SERIAL_NUM, new org.apache.thrift.meta_data.FieldMetaData("contractSerialNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifySignature_args.class, metaDataMap);
    }

    public verifySignature_args() {
    }

    public verifySignature_args(
      String cert,
      String originalSignature,
      String signature,
      String timeStamp,
      String contractSerialNum)
    {
      this();
      this.cert = cert;
      this.originalSignature = originalSignature;
      this.signature = signature;
      this.timeStamp = timeStamp;
      this.contractSerialNum = contractSerialNum;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifySignature_args(verifySignature_args other) {
      if (other.isSetCert()) {
        this.cert = other.cert;
      }
      if (other.isSetOriginalSignature()) {
        this.originalSignature = other.originalSignature;
      }
      if (other.isSetSignature()) {
        this.signature = other.signature;
      }
      if (other.isSetTimeStamp()) {
        this.timeStamp = other.timeStamp;
      }
      if (other.isSetContractSerialNum()) {
        this.contractSerialNum = other.contractSerialNum;
      }
    }

    public verifySignature_args deepCopy() {
      return new verifySignature_args(this);
    }

    @Override
    public void clear() {
      this.cert = null;
      this.originalSignature = null;
      this.signature = null;
      this.timeStamp = null;
      this.contractSerialNum = null;
    }

    public String getCert() {
      return this.cert;
    }

    public verifySignature_args setCert(String cert) {
      this.cert = cert;
      return this;
    }

    public void unsetCert() {
      this.cert = null;
    }

    /** Returns true if field cert is set (has been assigned a value) and false otherwise */
    public boolean isSetCert() {
      return this.cert != null;
    }

    public void setCertIsSet(boolean value) {
      if (!value) {
        this.cert = null;
      }
    }

    public String getOriginalSignature() {
      return this.originalSignature;
    }

    public verifySignature_args setOriginalSignature(String originalSignature) {
      this.originalSignature = originalSignature;
      return this;
    }

    public void unsetOriginalSignature() {
      this.originalSignature = null;
    }

    /** Returns true if field originalSignature is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginalSignature() {
      return this.originalSignature != null;
    }

    public void setOriginalSignatureIsSet(boolean value) {
      if (!value) {
        this.originalSignature = null;
      }
    }

    public String getSignature() {
      return this.signature;
    }

    public verifySignature_args setSignature(String signature) {
      this.signature = signature;
      return this;
    }

    public void unsetSignature() {
      this.signature = null;
    }

    /** Returns true if field signature is set (has been assigned a value) and false otherwise */
    public boolean isSetSignature() {
      return this.signature != null;
    }

    public void setSignatureIsSet(boolean value) {
      if (!value) {
        this.signature = null;
      }
    }

    public String getTimeStamp() {
      return this.timeStamp;
    }

    public verifySignature_args setTimeStamp(String timeStamp) {
      this.timeStamp = timeStamp;
      return this;
    }

    public void unsetTimeStamp() {
      this.timeStamp = null;
    }

    /** Returns true if field timeStamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeStamp() {
      return this.timeStamp != null;
    }

    public void setTimeStampIsSet(boolean value) {
      if (!value) {
        this.timeStamp = null;
      }
    }

    public String getContractSerialNum() {
      return this.contractSerialNum;
    }

    public verifySignature_args setContractSerialNum(String contractSerialNum) {
      this.contractSerialNum = contractSerialNum;
      return this;
    }

    public void unsetContractSerialNum() {
      this.contractSerialNum = null;
    }

    /** Returns true if field contractSerialNum is set (has been assigned a value) and false otherwise */
    public boolean isSetContractSerialNum() {
      return this.contractSerialNum != null;
    }

    public void setContractSerialNumIsSet(boolean value) {
      if (!value) {
        this.contractSerialNum = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CERT:
        if (value == null) {
          unsetCert();
        } else {
          setCert((String)value);
        }
        break;

      case ORIGINAL_SIGNATURE:
        if (value == null) {
          unsetOriginalSignature();
        } else {
          setOriginalSignature((String)value);
        }
        break;

      case SIGNATURE:
        if (value == null) {
          unsetSignature();
        } else {
          setSignature((String)value);
        }
        break;

      case TIME_STAMP:
        if (value == null) {
          unsetTimeStamp();
        } else {
          setTimeStamp((String)value);
        }
        break;

      case CONTRACT_SERIAL_NUM:
        if (value == null) {
          unsetContractSerialNum();
        } else {
          setContractSerialNum((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CERT:
        return getCert();

      case ORIGINAL_SIGNATURE:
        return getOriginalSignature();

      case SIGNATURE:
        return getSignature();

      case TIME_STAMP:
        return getTimeStamp();

      case CONTRACT_SERIAL_NUM:
        return getContractSerialNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CERT:
        return isSetCert();
      case ORIGINAL_SIGNATURE:
        return isSetOriginalSignature();
      case SIGNATURE:
        return isSetSignature();
      case TIME_STAMP:
        return isSetTimeStamp();
      case CONTRACT_SERIAL_NUM:
        return isSetContractSerialNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifySignature_args)
        return this.equals((verifySignature_args)that);
      return false;
    }

    public boolean equals(verifySignature_args that) {
      if (that == null)
        return false;

      boolean this_present_cert = true && this.isSetCert();
      boolean that_present_cert = true && that.isSetCert();
      if (this_present_cert || that_present_cert) {
        if (!(this_present_cert && that_present_cert))
          return false;
        if (!this.cert.equals(that.cert))
          return false;
      }

      boolean this_present_originalSignature = true && this.isSetOriginalSignature();
      boolean that_present_originalSignature = true && that.isSetOriginalSignature();
      if (this_present_originalSignature || that_present_originalSignature) {
        if (!(this_present_originalSignature && that_present_originalSignature))
          return false;
        if (!this.originalSignature.equals(that.originalSignature))
          return false;
      }

      boolean this_present_signature = true && this.isSetSignature();
      boolean that_present_signature = true && that.isSetSignature();
      if (this_present_signature || that_present_signature) {
        if (!(this_present_signature && that_present_signature))
          return false;
        if (!this.signature.equals(that.signature))
          return false;
      }

      boolean this_present_timeStamp = true && this.isSetTimeStamp();
      boolean that_present_timeStamp = true && that.isSetTimeStamp();
      if (this_present_timeStamp || that_present_timeStamp) {
        if (!(this_present_timeStamp && that_present_timeStamp))
          return false;
        if (!this.timeStamp.equals(that.timeStamp))
          return false;
      }

      boolean this_present_contractSerialNum = true && this.isSetContractSerialNum();
      boolean that_present_contractSerialNum = true && that.isSetContractSerialNum();
      if (this_present_contractSerialNum || that_present_contractSerialNum) {
        if (!(this_present_contractSerialNum && that_present_contractSerialNum))
          return false;
        if (!this.contractSerialNum.equals(that.contractSerialNum))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cert = true && (isSetCert());
      list.add(present_cert);
      if (present_cert)
        list.add(cert);

      boolean present_originalSignature = true && (isSetOriginalSignature());
      list.add(present_originalSignature);
      if (present_originalSignature)
        list.add(originalSignature);

      boolean present_signature = true && (isSetSignature());
      list.add(present_signature);
      if (present_signature)
        list.add(signature);

      boolean present_timeStamp = true && (isSetTimeStamp());
      list.add(present_timeStamp);
      if (present_timeStamp)
        list.add(timeStamp);

      boolean present_contractSerialNum = true && (isSetContractSerialNum());
      list.add(present_contractSerialNum);
      if (present_contractSerialNum)
        list.add(contractSerialNum);

      return list.hashCode();
    }

    @Override
    public int compareTo(verifySignature_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCert()).compareTo(other.isSetCert());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCert()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cert, other.cert);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOriginalSignature()).compareTo(other.isSetOriginalSignature());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginalSignature()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originalSignature, other.originalSignature);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSignature()).compareTo(other.isSetSignature());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSignature()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signature, other.signature);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeStamp()).compareTo(other.isSetTimeStamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeStamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeStamp, other.timeStamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContractSerialNum()).compareTo(other.isSetContractSerialNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContractSerialNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractSerialNum, other.contractSerialNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifySignature_args(");
      boolean first = true;

      sb.append("cert:");
      if (this.cert == null) {
        sb.append("null");
      } else {
        sb.append(this.cert);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("originalSignature:");
      if (this.originalSignature == null) {
        sb.append("null");
      } else {
        sb.append(this.originalSignature);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("signature:");
      if (this.signature == null) {
        sb.append("null");
      } else {
        sb.append(this.signature);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeStamp:");
      if (this.timeStamp == null) {
        sb.append("null");
      } else {
        sb.append(this.timeStamp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contractSerialNum:");
      if (this.contractSerialNum == null) {
        sb.append("null");
      } else {
        sb.append(this.contractSerialNum);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifySignature_argsStandardSchemeFactory implements SchemeFactory {
      public verifySignature_argsStandardScheme getScheme() {
        return new verifySignature_argsStandardScheme();
      }
    }

    private static class verifySignature_argsStandardScheme extends StandardScheme<verifySignature_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifySignature_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CERT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cert = iprot.readString();
                struct.setCertIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORIGINAL_SIGNATURE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.originalSignature = iprot.readString();
                struct.setOriginalSignatureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SIGNATURE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.signature = iprot.readString();
                struct.setSignatureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TIME_STAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.timeStamp = iprot.readString();
                struct.setTimeStampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CONTRACT_SERIAL_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.contractSerialNum = iprot.readString();
                struct.setContractSerialNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifySignature_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cert != null) {
          oprot.writeFieldBegin(CERT_FIELD_DESC);
          oprot.writeString(struct.cert);
          oprot.writeFieldEnd();
        }
        if (struct.originalSignature != null) {
          oprot.writeFieldBegin(ORIGINAL_SIGNATURE_FIELD_DESC);
          oprot.writeString(struct.originalSignature);
          oprot.writeFieldEnd();
        }
        if (struct.signature != null) {
          oprot.writeFieldBegin(SIGNATURE_FIELD_DESC);
          oprot.writeString(struct.signature);
          oprot.writeFieldEnd();
        }
        if (struct.timeStamp != null) {
          oprot.writeFieldBegin(TIME_STAMP_FIELD_DESC);
          oprot.writeString(struct.timeStamp);
          oprot.writeFieldEnd();
        }
        if (struct.contractSerialNum != null) {
          oprot.writeFieldBegin(CONTRACT_SERIAL_NUM_FIELD_DESC);
          oprot.writeString(struct.contractSerialNum);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifySignature_argsTupleSchemeFactory implements SchemeFactory {
      public verifySignature_argsTupleScheme getScheme() {
        return new verifySignature_argsTupleScheme();
      }
    }

    private static class verifySignature_argsTupleScheme extends TupleScheme<verifySignature_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifySignature_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCert()) {
          optionals.set(0);
        }
        if (struct.isSetOriginalSignature()) {
          optionals.set(1);
        }
        if (struct.isSetSignature()) {
          optionals.set(2);
        }
        if (struct.isSetTimeStamp()) {
          optionals.set(3);
        }
        if (struct.isSetContractSerialNum()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetCert()) {
          oprot.writeString(struct.cert);
        }
        if (struct.isSetOriginalSignature()) {
          oprot.writeString(struct.originalSignature);
        }
        if (struct.isSetSignature()) {
          oprot.writeString(struct.signature);
        }
        if (struct.isSetTimeStamp()) {
          oprot.writeString(struct.timeStamp);
        }
        if (struct.isSetContractSerialNum()) {
          oprot.writeString(struct.contractSerialNum);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifySignature_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.cert = iprot.readString();
          struct.setCertIsSet(true);
        }
        if (incoming.get(1)) {
          struct.originalSignature = iprot.readString();
          struct.setOriginalSignatureIsSet(true);
        }
        if (incoming.get(2)) {
          struct.signature = iprot.readString();
          struct.setSignatureIsSet(true);
        }
        if (incoming.get(3)) {
          struct.timeStamp = iprot.readString();
          struct.setTimeStampIsSet(true);
        }
        if (incoming.get(4)) {
          struct.contractSerialNum = iprot.readString();
          struct.setContractSerialNumIsSet(true);
        }
      }
    }

  }

  public static class verifySignature_result implements org.apache.thrift.TBase<verifySignature_result, verifySignature_result._Fields>, java.io.Serializable, Cloneable, Comparable<verifySignature_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifySignature_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifySignature_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifySignature_resultTupleSchemeFactory());
    }

    public ResultData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifySignature_result.class, metaDataMap);
    }

    public verifySignature_result() {
    }

    public verifySignature_result(
      ResultData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifySignature_result(verifySignature_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultData(other.success);
      }
    }

    public verifySignature_result deepCopy() {
      return new verifySignature_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultData getSuccess() {
      return this.success;
    }

    public verifySignature_result setSuccess(ResultData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifySignature_result)
        return this.equals((verifySignature_result)that);
      return false;
    }

    public boolean equals(verifySignature_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(verifySignature_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifySignature_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifySignature_resultStandardSchemeFactory implements SchemeFactory {
      public verifySignature_resultStandardScheme getScheme() {
        return new verifySignature_resultStandardScheme();
      }
    }

    private static class verifySignature_resultStandardScheme extends StandardScheme<verifySignature_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifySignature_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifySignature_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifySignature_resultTupleSchemeFactory implements SchemeFactory {
      public verifySignature_resultTupleScheme getScheme() {
        return new verifySignature_resultTupleScheme();
      }
    }

    private static class verifySignature_resultTupleScheme extends TupleScheme<verifySignature_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifySignature_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifySignature_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class verifyPDF_args implements org.apache.thrift.TBase<verifyPDF_args, verifyPDF_args._Fields>, java.io.Serializable, Cloneable, Comparable<verifyPDF_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyPDF_args");

    private static final org.apache.thrift.protocol.TField PDF_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("pdfPath", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyPDF_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyPDF_argsTupleSchemeFactory());
    }

    public String pdfPath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PDF_PATH((short)1, "pdfPath");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PDF_PATH
            return PDF_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PDF_PATH, new org.apache.thrift.meta_data.FieldMetaData("pdfPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyPDF_args.class, metaDataMap);
    }

    public verifyPDF_args() {
    }

    public verifyPDF_args(
      String pdfPath)
    {
      this();
      this.pdfPath = pdfPath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyPDF_args(verifyPDF_args other) {
      if (other.isSetPdfPath()) {
        this.pdfPath = other.pdfPath;
      }
    }

    public verifyPDF_args deepCopy() {
      return new verifyPDF_args(this);
    }

    @Override
    public void clear() {
      this.pdfPath = null;
    }

    public String getPdfPath() {
      return this.pdfPath;
    }

    public verifyPDF_args setPdfPath(String pdfPath) {
      this.pdfPath = pdfPath;
      return this;
    }

    public void unsetPdfPath() {
      this.pdfPath = null;
    }

    /** Returns true if field pdfPath is set (has been assigned a value) and false otherwise */
    public boolean isSetPdfPath() {
      return this.pdfPath != null;
    }

    public void setPdfPathIsSet(boolean value) {
      if (!value) {
        this.pdfPath = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PDF_PATH:
        if (value == null) {
          unsetPdfPath();
        } else {
          setPdfPath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PDF_PATH:
        return getPdfPath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PDF_PATH:
        return isSetPdfPath();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyPDF_args)
        return this.equals((verifyPDF_args)that);
      return false;
    }

    public boolean equals(verifyPDF_args that) {
      if (that == null)
        return false;

      boolean this_present_pdfPath = true && this.isSetPdfPath();
      boolean that_present_pdfPath = true && that.isSetPdfPath();
      if (this_present_pdfPath || that_present_pdfPath) {
        if (!(this_present_pdfPath && that_present_pdfPath))
          return false;
        if (!this.pdfPath.equals(that.pdfPath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pdfPath = true && (isSetPdfPath());
      list.add(present_pdfPath);
      if (present_pdfPath)
        list.add(pdfPath);

      return list.hashCode();
    }

    @Override
    public int compareTo(verifyPDF_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPdfPath()).compareTo(other.isSetPdfPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPdfPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pdfPath, other.pdfPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyPDF_args(");
      boolean first = true;

      sb.append("pdfPath:");
      if (this.pdfPath == null) {
        sb.append("null");
      } else {
        sb.append(this.pdfPath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyPDF_argsStandardSchemeFactory implements SchemeFactory {
      public verifyPDF_argsStandardScheme getScheme() {
        return new verifyPDF_argsStandardScheme();
      }
    }

    private static class verifyPDF_argsStandardScheme extends StandardScheme<verifyPDF_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyPDF_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PDF_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pdfPath = iprot.readString();
                struct.setPdfPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyPDF_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pdfPath != null) {
          oprot.writeFieldBegin(PDF_PATH_FIELD_DESC);
          oprot.writeString(struct.pdfPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyPDF_argsTupleSchemeFactory implements SchemeFactory {
      public verifyPDF_argsTupleScheme getScheme() {
        return new verifyPDF_argsTupleScheme();
      }
    }

    private static class verifyPDF_argsTupleScheme extends TupleScheme<verifyPDF_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyPDF_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPdfPath()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPdfPath()) {
          oprot.writeString(struct.pdfPath);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyPDF_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pdfPath = iprot.readString();
          struct.setPdfPathIsSet(true);
        }
      }
    }

  }

  public static class verifyPDF_result implements org.apache.thrift.TBase<verifyPDF_result, verifyPDF_result._Fields>, java.io.Serializable, Cloneable, Comparable<verifyPDF_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyPDF_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyPDF_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyPDF_resultTupleSchemeFactory());
    }

    public ResultData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyPDF_result.class, metaDataMap);
    }

    public verifyPDF_result() {
    }

    public verifyPDF_result(
      ResultData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyPDF_result(verifyPDF_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultData(other.success);
      }
    }

    public verifyPDF_result deepCopy() {
      return new verifyPDF_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultData getSuccess() {
      return this.success;
    }

    public verifyPDF_result setSuccess(ResultData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyPDF_result)
        return this.equals((verifyPDF_result)that);
      return false;
    }

    public boolean equals(verifyPDF_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(verifyPDF_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyPDF_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyPDF_resultStandardSchemeFactory implements SchemeFactory {
      public verifyPDF_resultStandardScheme getScheme() {
        return new verifyPDF_resultStandardScheme();
      }
    }

    private static class verifyPDF_resultStandardScheme extends StandardScheme<verifyPDF_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyPDF_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyPDF_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyPDF_resultTupleSchemeFactory implements SchemeFactory {
      public verifyPDF_resultTupleScheme getScheme() {
        return new verifyPDF_resultTupleScheme();
      }
    }

    private static class verifyPDF_resultTupleScheme extends TupleScheme<verifyPDF_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyPDF_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyPDF_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class verifySignatureNoTimestamp_args implements org.apache.thrift.TBase<verifySignatureNoTimestamp_args, verifySignatureNoTimestamp_args._Fields>, java.io.Serializable, Cloneable, Comparable<verifySignatureNoTimestamp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifySignatureNoTimestamp_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifySignatureNoTimestamp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifySignatureNoTimestamp_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifySignatureNoTimestamp_args.class, metaDataMap);
    }

    public verifySignatureNoTimestamp_args() {
    }

    public verifySignatureNoTimestamp_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifySignatureNoTimestamp_args(verifySignatureNoTimestamp_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public verifySignatureNoTimestamp_args deepCopy() {
      return new verifySignatureNoTimestamp_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public verifySignatureNoTimestamp_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifySignatureNoTimestamp_args)
        return this.equals((verifySignatureNoTimestamp_args)that);
      return false;
    }

    public boolean equals(verifySignatureNoTimestamp_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(verifySignatureNoTimestamp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifySignatureNoTimestamp_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifySignatureNoTimestamp_argsStandardSchemeFactory implements SchemeFactory {
      public verifySignatureNoTimestamp_argsStandardScheme getScheme() {
        return new verifySignatureNoTimestamp_argsStandardScheme();
      }
    }

    private static class verifySignatureNoTimestamp_argsStandardScheme extends StandardScheme<verifySignatureNoTimestamp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifySignatureNoTimestamp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map18 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map18.size);
                  String _key19;
                  String _val20;
                  for (int _i21 = 0; _i21 < _map18.size; ++_i21)
                  {
                    _key19 = iprot.readString();
                    _val20 = iprot.readString();
                    struct.datamap.put(_key19, _val20);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifySignatureNoTimestamp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter22 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter22.getKey());
              oprot.writeString(_iter22.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifySignatureNoTimestamp_argsTupleSchemeFactory implements SchemeFactory {
      public verifySignatureNoTimestamp_argsTupleScheme getScheme() {
        return new verifySignatureNoTimestamp_argsTupleScheme();
      }
    }

    private static class verifySignatureNoTimestamp_argsTupleScheme extends TupleScheme<verifySignatureNoTimestamp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifySignatureNoTimestamp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter23 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter23.getKey());
              oprot.writeString(_iter23.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifySignatureNoTimestamp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map24 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map24.size);
            String _key25;
            String _val26;
            for (int _i27 = 0; _i27 < _map24.size; ++_i27)
            {
              _key25 = iprot.readString();
              _val26 = iprot.readString();
              struct.datamap.put(_key25, _val26);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class verifySignatureNoTimestamp_result implements org.apache.thrift.TBase<verifySignatureNoTimestamp_result, verifySignatureNoTimestamp_result._Fields>, java.io.Serializable, Cloneable, Comparable<verifySignatureNoTimestamp_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifySignatureNoTimestamp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifySignatureNoTimestamp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifySignatureNoTimestamp_resultTupleSchemeFactory());
    }

    public ResultData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifySignatureNoTimestamp_result.class, metaDataMap);
    }

    public verifySignatureNoTimestamp_result() {
    }

    public verifySignatureNoTimestamp_result(
      ResultData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifySignatureNoTimestamp_result(verifySignatureNoTimestamp_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultData(other.success);
      }
    }

    public verifySignatureNoTimestamp_result deepCopy() {
      return new verifySignatureNoTimestamp_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultData getSuccess() {
      return this.success;
    }

    public verifySignatureNoTimestamp_result setSuccess(ResultData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifySignatureNoTimestamp_result)
        return this.equals((verifySignatureNoTimestamp_result)that);
      return false;
    }

    public boolean equals(verifySignatureNoTimestamp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(verifySignatureNoTimestamp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifySignatureNoTimestamp_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifySignatureNoTimestamp_resultStandardSchemeFactory implements SchemeFactory {
      public verifySignatureNoTimestamp_resultStandardScheme getScheme() {
        return new verifySignatureNoTimestamp_resultStandardScheme();
      }
    }

    private static class verifySignatureNoTimestamp_resultStandardScheme extends StandardScheme<verifySignatureNoTimestamp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifySignatureNoTimestamp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifySignatureNoTimestamp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifySignatureNoTimestamp_resultTupleSchemeFactory implements SchemeFactory {
      public verifySignatureNoTimestamp_resultTupleScheme getScheme() {
        return new verifySignatureNoTimestamp_resultTupleScheme();
      }
    }

    private static class verifySignatureNoTimestamp_resultTupleScheme extends TupleScheme<verifySignatureNoTimestamp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifySignatureNoTimestamp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifySignatureNoTimestamp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
