/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mmec.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-22")
public class FeeRMIServices {

  public interface Iface {

    public ReturnData queryUserAccountDetail(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData queryUserAccount(int userid) throws org.apache.thrift.TException;

    public ReturnData addMoney(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData reduceMoney(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData queryUserServe(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData addServeTimes(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData reduceServeTimes(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData queryPayServe(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData addPayServe(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData updatePayServe(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData saveOrder(Map<String,String> datamap, Map<String,String> mmap) throws org.apache.thrift.TException;

    public ReturnData queryPayRecord(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData updateOrderStatus(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData queryOrder(Map<String,String> datamap) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void queryUserAccountDetail(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryUserAccount(int userid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addMoney(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reduceMoney(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryUserServe(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addServeTimes(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reduceServeTimes(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryPayServe(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addPayServe(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updatePayServe(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveOrder(Map<String,String> datamap, Map<String,String> mmap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryPayRecord(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateOrderStatus(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryOrder(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ReturnData queryUserAccountDetail(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_queryUserAccountDetail(datamap);
      return recv_queryUserAccountDetail();
    }

    public void send_queryUserAccountDetail(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      queryUserAccountDetail_args args = new queryUserAccountDetail_args();
      args.setDatamap(datamap);
      sendBase("queryUserAccountDetail", args);
    }

    public ReturnData recv_queryUserAccountDetail() throws org.apache.thrift.TException
    {
      queryUserAccountDetail_result result = new queryUserAccountDetail_result();
      receiveBase(result, "queryUserAccountDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryUserAccountDetail failed: unknown result");
    }

    public ReturnData queryUserAccount(int userid) throws org.apache.thrift.TException
    {
      send_queryUserAccount(userid);
      return recv_queryUserAccount();
    }

    public void send_queryUserAccount(int userid) throws org.apache.thrift.TException
    {
      queryUserAccount_args args = new queryUserAccount_args();
      args.setUserid(userid);
      sendBase("queryUserAccount", args);
    }

    public ReturnData recv_queryUserAccount() throws org.apache.thrift.TException
    {
      queryUserAccount_result result = new queryUserAccount_result();
      receiveBase(result, "queryUserAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryUserAccount failed: unknown result");
    }

    public ReturnData addMoney(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_addMoney(datamap);
      return recv_addMoney();
    }

    public void send_addMoney(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      addMoney_args args = new addMoney_args();
      args.setDatamap(datamap);
      sendBase("addMoney", args);
    }

    public ReturnData recv_addMoney() throws org.apache.thrift.TException
    {
      addMoney_result result = new addMoney_result();
      receiveBase(result, "addMoney");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addMoney failed: unknown result");
    }

    public ReturnData reduceMoney(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_reduceMoney(datamap);
      return recv_reduceMoney();
    }

    public void send_reduceMoney(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      reduceMoney_args args = new reduceMoney_args();
      args.setDatamap(datamap);
      sendBase("reduceMoney", args);
    }

    public ReturnData recv_reduceMoney() throws org.apache.thrift.TException
    {
      reduceMoney_result result = new reduceMoney_result();
      receiveBase(result, "reduceMoney");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reduceMoney failed: unknown result");
    }

    public ReturnData queryUserServe(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_queryUserServe(datamap);
      return recv_queryUserServe();
    }

    public void send_queryUserServe(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      queryUserServe_args args = new queryUserServe_args();
      args.setDatamap(datamap);
      sendBase("queryUserServe", args);
    }

    public ReturnData recv_queryUserServe() throws org.apache.thrift.TException
    {
      queryUserServe_result result = new queryUserServe_result();
      receiveBase(result, "queryUserServe");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryUserServe failed: unknown result");
    }

    public ReturnData addServeTimes(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_addServeTimes(datamap);
      return recv_addServeTimes();
    }

    public void send_addServeTimes(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      addServeTimes_args args = new addServeTimes_args();
      args.setDatamap(datamap);
      sendBase("addServeTimes", args);
    }

    public ReturnData recv_addServeTimes() throws org.apache.thrift.TException
    {
      addServeTimes_result result = new addServeTimes_result();
      receiveBase(result, "addServeTimes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addServeTimes failed: unknown result");
    }

    public ReturnData reduceServeTimes(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_reduceServeTimes(datamap);
      return recv_reduceServeTimes();
    }

    public void send_reduceServeTimes(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      reduceServeTimes_args args = new reduceServeTimes_args();
      args.setDatamap(datamap);
      sendBase("reduceServeTimes", args);
    }

    public ReturnData recv_reduceServeTimes() throws org.apache.thrift.TException
    {
      reduceServeTimes_result result = new reduceServeTimes_result();
      receiveBase(result, "reduceServeTimes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reduceServeTimes failed: unknown result");
    }

    public ReturnData queryPayServe(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_queryPayServe(datamap);
      return recv_queryPayServe();
    }

    public void send_queryPayServe(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      queryPayServe_args args = new queryPayServe_args();
      args.setDatamap(datamap);
      sendBase("queryPayServe", args);
    }

    public ReturnData recv_queryPayServe() throws org.apache.thrift.TException
    {
      queryPayServe_result result = new queryPayServe_result();
      receiveBase(result, "queryPayServe");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryPayServe failed: unknown result");
    }

    public ReturnData addPayServe(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_addPayServe(datamap);
      return recv_addPayServe();
    }

    public void send_addPayServe(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      addPayServe_args args = new addPayServe_args();
      args.setDatamap(datamap);
      sendBase("addPayServe", args);
    }

    public ReturnData recv_addPayServe() throws org.apache.thrift.TException
    {
      addPayServe_result result = new addPayServe_result();
      receiveBase(result, "addPayServe");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addPayServe failed: unknown result");
    }

    public ReturnData updatePayServe(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_updatePayServe(datamap);
      return recv_updatePayServe();
    }

    public void send_updatePayServe(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      updatePayServe_args args = new updatePayServe_args();
      args.setDatamap(datamap);
      sendBase("updatePayServe", args);
    }

    public ReturnData recv_updatePayServe() throws org.apache.thrift.TException
    {
      updatePayServe_result result = new updatePayServe_result();
      receiveBase(result, "updatePayServe");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updatePayServe failed: unknown result");
    }

    public ReturnData saveOrder(Map<String,String> datamap, Map<String,String> mmap) throws org.apache.thrift.TException
    {
      send_saveOrder(datamap, mmap);
      return recv_saveOrder();
    }

    public void send_saveOrder(Map<String,String> datamap, Map<String,String> mmap) throws org.apache.thrift.TException
    {
      saveOrder_args args = new saveOrder_args();
      args.setDatamap(datamap);
      args.setMmap(mmap);
      sendBase("saveOrder", args);
    }

    public ReturnData recv_saveOrder() throws org.apache.thrift.TException
    {
      saveOrder_result result = new saveOrder_result();
      receiveBase(result, "saveOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveOrder failed: unknown result");
    }

    public ReturnData queryPayRecord(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_queryPayRecord(datamap);
      return recv_queryPayRecord();
    }

    public void send_queryPayRecord(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      queryPayRecord_args args = new queryPayRecord_args();
      args.setDatamap(datamap);
      sendBase("queryPayRecord", args);
    }

    public ReturnData recv_queryPayRecord() throws org.apache.thrift.TException
    {
      queryPayRecord_result result = new queryPayRecord_result();
      receiveBase(result, "queryPayRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryPayRecord failed: unknown result");
    }

    public ReturnData updateOrderStatus(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_updateOrderStatus(datamap);
      return recv_updateOrderStatus();
    }

    public void send_updateOrderStatus(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      updateOrderStatus_args args = new updateOrderStatus_args();
      args.setDatamap(datamap);
      sendBase("updateOrderStatus", args);
    }

    public ReturnData recv_updateOrderStatus() throws org.apache.thrift.TException
    {
      updateOrderStatus_result result = new updateOrderStatus_result();
      receiveBase(result, "updateOrderStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateOrderStatus failed: unknown result");
    }

    public ReturnData queryOrder(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_queryOrder(datamap);
      return recv_queryOrder();
    }

    public void send_queryOrder(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      queryOrder_args args = new queryOrder_args();
      args.setDatamap(datamap);
      sendBase("queryOrder", args);
    }

    public ReturnData recv_queryOrder() throws org.apache.thrift.TException
    {
      queryOrder_result result = new queryOrder_result();
      receiveBase(result, "queryOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryOrder failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void queryUserAccountDetail(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryUserAccountDetail_call method_call = new queryUserAccountDetail_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryUserAccountDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public queryUserAccountDetail_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryUserAccountDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryUserAccountDetail_args args = new queryUserAccountDetail_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryUserAccountDetail();
      }
    }

    public void queryUserAccount(int userid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryUserAccount_call method_call = new queryUserAccount_call(userid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryUserAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userid;
      public queryUserAccount_call(int userid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userid = userid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryUserAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryUserAccount_args args = new queryUserAccount_args();
        args.setUserid(userid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryUserAccount();
      }
    }

    public void addMoney(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addMoney_call method_call = new addMoney_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addMoney_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public addMoney_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addMoney", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addMoney_args args = new addMoney_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addMoney();
      }
    }

    public void reduceMoney(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reduceMoney_call method_call = new reduceMoney_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reduceMoney_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public reduceMoney_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reduceMoney", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reduceMoney_args args = new reduceMoney_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reduceMoney();
      }
    }

    public void queryUserServe(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryUserServe_call method_call = new queryUserServe_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryUserServe_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public queryUserServe_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryUserServe", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryUserServe_args args = new queryUserServe_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryUserServe();
      }
    }

    public void addServeTimes(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addServeTimes_call method_call = new addServeTimes_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addServeTimes_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public addServeTimes_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addServeTimes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addServeTimes_args args = new addServeTimes_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addServeTimes();
      }
    }

    public void reduceServeTimes(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reduceServeTimes_call method_call = new reduceServeTimes_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reduceServeTimes_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public reduceServeTimes_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reduceServeTimes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reduceServeTimes_args args = new reduceServeTimes_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reduceServeTimes();
      }
    }

    public void queryPayServe(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryPayServe_call method_call = new queryPayServe_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryPayServe_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public queryPayServe_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryPayServe", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryPayServe_args args = new queryPayServe_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryPayServe();
      }
    }

    public void addPayServe(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addPayServe_call method_call = new addPayServe_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addPayServe_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public addPayServe_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addPayServe", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addPayServe_args args = new addPayServe_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addPayServe();
      }
    }

    public void updatePayServe(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updatePayServe_call method_call = new updatePayServe_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updatePayServe_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public updatePayServe_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updatePayServe", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updatePayServe_args args = new updatePayServe_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updatePayServe();
      }
    }

    public void saveOrder(Map<String,String> datamap, Map<String,String> mmap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveOrder_call method_call = new saveOrder_call(datamap, mmap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      private Map<String,String> mmap;
      public saveOrder_call(Map<String,String> datamap, Map<String,String> mmap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
        this.mmap = mmap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveOrder_args args = new saveOrder_args();
        args.setDatamap(datamap);
        args.setMmap(mmap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveOrder();
      }
    }

    public void queryPayRecord(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryPayRecord_call method_call = new queryPayRecord_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryPayRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public queryPayRecord_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryPayRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryPayRecord_args args = new queryPayRecord_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryPayRecord();
      }
    }

    public void updateOrderStatus(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateOrderStatus_call method_call = new updateOrderStatus_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateOrderStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public updateOrderStatus_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateOrderStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateOrderStatus_args args = new updateOrderStatus_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateOrderStatus();
      }
    }

    public void queryOrder(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryOrder_call method_call = new queryOrder_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public queryOrder_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryOrder_args args = new queryOrder_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryOrder();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("queryUserAccountDetail", new queryUserAccountDetail());
      processMap.put("queryUserAccount", new queryUserAccount());
      processMap.put("addMoney", new addMoney());
      processMap.put("reduceMoney", new reduceMoney());
      processMap.put("queryUserServe", new queryUserServe());
      processMap.put("addServeTimes", new addServeTimes());
      processMap.put("reduceServeTimes", new reduceServeTimes());
      processMap.put("queryPayServe", new queryPayServe());
      processMap.put("addPayServe", new addPayServe());
      processMap.put("updatePayServe", new updatePayServe());
      processMap.put("saveOrder", new saveOrder());
      processMap.put("queryPayRecord", new queryPayRecord());
      processMap.put("updateOrderStatus", new updateOrderStatus());
      processMap.put("queryOrder", new queryOrder());
      return processMap;
    }

    public static class queryUserAccountDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryUserAccountDetail_args> {
      public queryUserAccountDetail() {
        super("queryUserAccountDetail");
      }

      public queryUserAccountDetail_args getEmptyArgsInstance() {
        return new queryUserAccountDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryUserAccountDetail_result getResult(I iface, queryUserAccountDetail_args args) throws org.apache.thrift.TException {
        queryUserAccountDetail_result result = new queryUserAccountDetail_result();
        result.success = iface.queryUserAccountDetail(args.datamap);
        return result;
      }
    }

    public static class queryUserAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryUserAccount_args> {
      public queryUserAccount() {
        super("queryUserAccount");
      }

      public queryUserAccount_args getEmptyArgsInstance() {
        return new queryUserAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryUserAccount_result getResult(I iface, queryUserAccount_args args) throws org.apache.thrift.TException {
        queryUserAccount_result result = new queryUserAccount_result();
        result.success = iface.queryUserAccount(args.userid);
        return result;
      }
    }

    public static class addMoney<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addMoney_args> {
      public addMoney() {
        super("addMoney");
      }

      public addMoney_args getEmptyArgsInstance() {
        return new addMoney_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addMoney_result getResult(I iface, addMoney_args args) throws org.apache.thrift.TException {
        addMoney_result result = new addMoney_result();
        result.success = iface.addMoney(args.datamap);
        return result;
      }
    }

    public static class reduceMoney<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reduceMoney_args> {
      public reduceMoney() {
        super("reduceMoney");
      }

      public reduceMoney_args getEmptyArgsInstance() {
        return new reduceMoney_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reduceMoney_result getResult(I iface, reduceMoney_args args) throws org.apache.thrift.TException {
        reduceMoney_result result = new reduceMoney_result();
        result.success = iface.reduceMoney(args.datamap);
        return result;
      }
    }

    public static class queryUserServe<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryUserServe_args> {
      public queryUserServe() {
        super("queryUserServe");
      }

      public queryUserServe_args getEmptyArgsInstance() {
        return new queryUserServe_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryUserServe_result getResult(I iface, queryUserServe_args args) throws org.apache.thrift.TException {
        queryUserServe_result result = new queryUserServe_result();
        result.success = iface.queryUserServe(args.datamap);
        return result;
      }
    }

    public static class addServeTimes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addServeTimes_args> {
      public addServeTimes() {
        super("addServeTimes");
      }

      public addServeTimes_args getEmptyArgsInstance() {
        return new addServeTimes_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addServeTimes_result getResult(I iface, addServeTimes_args args) throws org.apache.thrift.TException {
        addServeTimes_result result = new addServeTimes_result();
        result.success = iface.addServeTimes(args.datamap);
        return result;
      }
    }

    public static class reduceServeTimes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reduceServeTimes_args> {
      public reduceServeTimes() {
        super("reduceServeTimes");
      }

      public reduceServeTimes_args getEmptyArgsInstance() {
        return new reduceServeTimes_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reduceServeTimes_result getResult(I iface, reduceServeTimes_args args) throws org.apache.thrift.TException {
        reduceServeTimes_result result = new reduceServeTimes_result();
        result.success = iface.reduceServeTimes(args.datamap);
        return result;
      }
    }

    public static class queryPayServe<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryPayServe_args> {
      public queryPayServe() {
        super("queryPayServe");
      }

      public queryPayServe_args getEmptyArgsInstance() {
        return new queryPayServe_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryPayServe_result getResult(I iface, queryPayServe_args args) throws org.apache.thrift.TException {
        queryPayServe_result result = new queryPayServe_result();
        result.success = iface.queryPayServe(args.datamap);
        return result;
      }
    }

    public static class addPayServe<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addPayServe_args> {
      public addPayServe() {
        super("addPayServe");
      }

      public addPayServe_args getEmptyArgsInstance() {
        return new addPayServe_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addPayServe_result getResult(I iface, addPayServe_args args) throws org.apache.thrift.TException {
        addPayServe_result result = new addPayServe_result();
        result.success = iface.addPayServe(args.datamap);
        return result;
      }
    }

    public static class updatePayServe<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updatePayServe_args> {
      public updatePayServe() {
        super("updatePayServe");
      }

      public updatePayServe_args getEmptyArgsInstance() {
        return new updatePayServe_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updatePayServe_result getResult(I iface, updatePayServe_args args) throws org.apache.thrift.TException {
        updatePayServe_result result = new updatePayServe_result();
        result.success = iface.updatePayServe(args.datamap);
        return result;
      }
    }

    public static class saveOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveOrder_args> {
      public saveOrder() {
        super("saveOrder");
      }

      public saveOrder_args getEmptyArgsInstance() {
        return new saveOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveOrder_result getResult(I iface, saveOrder_args args) throws org.apache.thrift.TException {
        saveOrder_result result = new saveOrder_result();
        result.success = iface.saveOrder(args.datamap, args.mmap);
        return result;
      }
    }

    public static class queryPayRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryPayRecord_args> {
      public queryPayRecord() {
        super("queryPayRecord");
      }

      public queryPayRecord_args getEmptyArgsInstance() {
        return new queryPayRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryPayRecord_result getResult(I iface, queryPayRecord_args args) throws org.apache.thrift.TException {
        queryPayRecord_result result = new queryPayRecord_result();
        result.success = iface.queryPayRecord(args.datamap);
        return result;
      }
    }

    public static class updateOrderStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateOrderStatus_args> {
      public updateOrderStatus() {
        super("updateOrderStatus");
      }

      public updateOrderStatus_args getEmptyArgsInstance() {
        return new updateOrderStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateOrderStatus_result getResult(I iface, updateOrderStatus_args args) throws org.apache.thrift.TException {
        updateOrderStatus_result result = new updateOrderStatus_result();
        result.success = iface.updateOrderStatus(args.datamap);
        return result;
      }
    }

    public static class queryOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryOrder_args> {
      public queryOrder() {
        super("queryOrder");
      }

      public queryOrder_args getEmptyArgsInstance() {
        return new queryOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryOrder_result getResult(I iface, queryOrder_args args) throws org.apache.thrift.TException {
        queryOrder_result result = new queryOrder_result();
        result.success = iface.queryOrder(args.datamap);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("queryUserAccountDetail", new queryUserAccountDetail());
      processMap.put("queryUserAccount", new queryUserAccount());
      processMap.put("addMoney", new addMoney());
      processMap.put("reduceMoney", new reduceMoney());
      processMap.put("queryUserServe", new queryUserServe());
      processMap.put("addServeTimes", new addServeTimes());
      processMap.put("reduceServeTimes", new reduceServeTimes());
      processMap.put("queryPayServe", new queryPayServe());
      processMap.put("addPayServe", new addPayServe());
      processMap.put("updatePayServe", new updatePayServe());
      processMap.put("saveOrder", new saveOrder());
      processMap.put("queryPayRecord", new queryPayRecord());
      processMap.put("updateOrderStatus", new updateOrderStatus());
      processMap.put("queryOrder", new queryOrder());
      return processMap;
    }

    public static class queryUserAccountDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryUserAccountDetail_args, ReturnData> {
      public queryUserAccountDetail() {
        super("queryUserAccountDetail");
      }

      public queryUserAccountDetail_args getEmptyArgsInstance() {
        return new queryUserAccountDetail_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            queryUserAccountDetail_result result = new queryUserAccountDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryUserAccountDetail_result result = new queryUserAccountDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryUserAccountDetail_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.queryUserAccountDetail(args.datamap,resultHandler);
      }
    }

    public static class queryUserAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryUserAccount_args, ReturnData> {
      public queryUserAccount() {
        super("queryUserAccount");
      }

      public queryUserAccount_args getEmptyArgsInstance() {
        return new queryUserAccount_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            queryUserAccount_result result = new queryUserAccount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryUserAccount_result result = new queryUserAccount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryUserAccount_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.queryUserAccount(args.userid,resultHandler);
      }
    }

    public static class addMoney<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addMoney_args, ReturnData> {
      public addMoney() {
        super("addMoney");
      }

      public addMoney_args getEmptyArgsInstance() {
        return new addMoney_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            addMoney_result result = new addMoney_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addMoney_result result = new addMoney_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addMoney_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.addMoney(args.datamap,resultHandler);
      }
    }

    public static class reduceMoney<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reduceMoney_args, ReturnData> {
      public reduceMoney() {
        super("reduceMoney");
      }

      public reduceMoney_args getEmptyArgsInstance() {
        return new reduceMoney_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            reduceMoney_result result = new reduceMoney_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reduceMoney_result result = new reduceMoney_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reduceMoney_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.reduceMoney(args.datamap,resultHandler);
      }
    }

    public static class queryUserServe<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryUserServe_args, ReturnData> {
      public queryUserServe() {
        super("queryUserServe");
      }

      public queryUserServe_args getEmptyArgsInstance() {
        return new queryUserServe_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            queryUserServe_result result = new queryUserServe_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryUserServe_result result = new queryUserServe_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryUserServe_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.queryUserServe(args.datamap,resultHandler);
      }
    }

    public static class addServeTimes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addServeTimes_args, ReturnData> {
      public addServeTimes() {
        super("addServeTimes");
      }

      public addServeTimes_args getEmptyArgsInstance() {
        return new addServeTimes_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            addServeTimes_result result = new addServeTimes_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addServeTimes_result result = new addServeTimes_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addServeTimes_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.addServeTimes(args.datamap,resultHandler);
      }
    }

    public static class reduceServeTimes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reduceServeTimes_args, ReturnData> {
      public reduceServeTimes() {
        super("reduceServeTimes");
      }

      public reduceServeTimes_args getEmptyArgsInstance() {
        return new reduceServeTimes_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            reduceServeTimes_result result = new reduceServeTimes_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reduceServeTimes_result result = new reduceServeTimes_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reduceServeTimes_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.reduceServeTimes(args.datamap,resultHandler);
      }
    }

    public static class queryPayServe<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryPayServe_args, ReturnData> {
      public queryPayServe() {
        super("queryPayServe");
      }

      public queryPayServe_args getEmptyArgsInstance() {
        return new queryPayServe_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            queryPayServe_result result = new queryPayServe_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryPayServe_result result = new queryPayServe_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryPayServe_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.queryPayServe(args.datamap,resultHandler);
      }
    }

    public static class addPayServe<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addPayServe_args, ReturnData> {
      public addPayServe() {
        super("addPayServe");
      }

      public addPayServe_args getEmptyArgsInstance() {
        return new addPayServe_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            addPayServe_result result = new addPayServe_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addPayServe_result result = new addPayServe_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addPayServe_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.addPayServe(args.datamap,resultHandler);
      }
    }

    public static class updatePayServe<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updatePayServe_args, ReturnData> {
      public updatePayServe() {
        super("updatePayServe");
      }

      public updatePayServe_args getEmptyArgsInstance() {
        return new updatePayServe_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            updatePayServe_result result = new updatePayServe_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updatePayServe_result result = new updatePayServe_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updatePayServe_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.updatePayServe(args.datamap,resultHandler);
      }
    }

    public static class saveOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveOrder_args, ReturnData> {
      public saveOrder() {
        super("saveOrder");
      }

      public saveOrder_args getEmptyArgsInstance() {
        return new saveOrder_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            saveOrder_result result = new saveOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveOrder_result result = new saveOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveOrder_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.saveOrder(args.datamap, args.mmap,resultHandler);
      }
    }

    public static class queryPayRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryPayRecord_args, ReturnData> {
      public queryPayRecord() {
        super("queryPayRecord");
      }

      public queryPayRecord_args getEmptyArgsInstance() {
        return new queryPayRecord_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            queryPayRecord_result result = new queryPayRecord_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryPayRecord_result result = new queryPayRecord_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryPayRecord_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.queryPayRecord(args.datamap,resultHandler);
      }
    }

    public static class updateOrderStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateOrderStatus_args, ReturnData> {
      public updateOrderStatus() {
        super("updateOrderStatus");
      }

      public updateOrderStatus_args getEmptyArgsInstance() {
        return new updateOrderStatus_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            updateOrderStatus_result result = new updateOrderStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateOrderStatus_result result = new updateOrderStatus_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateOrderStatus_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.updateOrderStatus(args.datamap,resultHandler);
      }
    }

    public static class queryOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryOrder_args, ReturnData> {
      public queryOrder() {
        super("queryOrder");
      }

      public queryOrder_args getEmptyArgsInstance() {
        return new queryOrder_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            queryOrder_result result = new queryOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryOrder_result result = new queryOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryOrder_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.queryOrder(args.datamap,resultHandler);
      }
    }

  }

  public static class queryUserAccountDetail_args implements org.apache.thrift.TBase<queryUserAccountDetail_args, queryUserAccountDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryUserAccountDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryUserAccountDetail_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryUserAccountDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryUserAccountDetail_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryUserAccountDetail_args.class, metaDataMap);
    }

    public queryUserAccountDetail_args() {
    }

    public queryUserAccountDetail_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryUserAccountDetail_args(queryUserAccountDetail_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public queryUserAccountDetail_args deepCopy() {
      return new queryUserAccountDetail_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public queryUserAccountDetail_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryUserAccountDetail_args)
        return this.equals((queryUserAccountDetail_args)that);
      return false;
    }

    public boolean equals(queryUserAccountDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryUserAccountDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryUserAccountDetail_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryUserAccountDetail_argsStandardSchemeFactory implements SchemeFactory {
      public queryUserAccountDetail_argsStandardScheme getScheme() {
        return new queryUserAccountDetail_argsStandardScheme();
      }
    }

    private static class queryUserAccountDetail_argsStandardScheme extends StandardScheme<queryUserAccountDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryUserAccountDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map158 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map158.size);
                  String _key159;
                  String _val160;
                  for (int _i161 = 0; _i161 < _map158.size; ++_i161)
                  {
                    _key159 = iprot.readString();
                    _val160 = iprot.readString();
                    struct.datamap.put(_key159, _val160);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryUserAccountDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter162 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter162.getKey());
              oprot.writeString(_iter162.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryUserAccountDetail_argsTupleSchemeFactory implements SchemeFactory {
      public queryUserAccountDetail_argsTupleScheme getScheme() {
        return new queryUserAccountDetail_argsTupleScheme();
      }
    }

    private static class queryUserAccountDetail_argsTupleScheme extends TupleScheme<queryUserAccountDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryUserAccountDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter163 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter163.getKey());
              oprot.writeString(_iter163.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryUserAccountDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map164 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map164.size);
            String _key165;
            String _val166;
            for (int _i167 = 0; _i167 < _map164.size; ++_i167)
            {
              _key165 = iprot.readString();
              _val166 = iprot.readString();
              struct.datamap.put(_key165, _val166);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class queryUserAccountDetail_result implements org.apache.thrift.TBase<queryUserAccountDetail_result, queryUserAccountDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryUserAccountDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryUserAccountDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryUserAccountDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryUserAccountDetail_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryUserAccountDetail_result.class, metaDataMap);
    }

    public queryUserAccountDetail_result() {
    }

    public queryUserAccountDetail_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryUserAccountDetail_result(queryUserAccountDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public queryUserAccountDetail_result deepCopy() {
      return new queryUserAccountDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public queryUserAccountDetail_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryUserAccountDetail_result)
        return this.equals((queryUserAccountDetail_result)that);
      return false;
    }

    public boolean equals(queryUserAccountDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryUserAccountDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryUserAccountDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryUserAccountDetail_resultStandardSchemeFactory implements SchemeFactory {
      public queryUserAccountDetail_resultStandardScheme getScheme() {
        return new queryUserAccountDetail_resultStandardScheme();
      }
    }

    private static class queryUserAccountDetail_resultStandardScheme extends StandardScheme<queryUserAccountDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryUserAccountDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryUserAccountDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryUserAccountDetail_resultTupleSchemeFactory implements SchemeFactory {
      public queryUserAccountDetail_resultTupleScheme getScheme() {
        return new queryUserAccountDetail_resultTupleScheme();
      }
    }

    private static class queryUserAccountDetail_resultTupleScheme extends TupleScheme<queryUserAccountDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryUserAccountDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryUserAccountDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryUserAccount_args implements org.apache.thrift.TBase<queryUserAccount_args, queryUserAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryUserAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryUserAccount_args");

    private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryUserAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryUserAccount_argsTupleSchemeFactory());
    }

    public int userid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERID((short)1, "userid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERID
            return USERID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryUserAccount_args.class, metaDataMap);
    }

    public queryUserAccount_args() {
    }

    public queryUserAccount_args(
      int userid)
    {
      this();
      this.userid = userid;
      setUseridIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryUserAccount_args(queryUserAccount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userid = other.userid;
    }

    public queryUserAccount_args deepCopy() {
      return new queryUserAccount_args(this);
    }

    @Override
    public void clear() {
      setUseridIsSet(false);
      this.userid = 0;
    }

    public int getUserid() {
      return this.userid;
    }

    public queryUserAccount_args setUserid(int userid) {
      this.userid = userid;
      setUseridIsSet(true);
      return this;
    }

    public void unsetUserid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUseridIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERID:
        if (value == null) {
          unsetUserid();
        } else {
          setUserid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERID:
        return getUserid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERID:
        return isSetUserid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryUserAccount_args)
        return this.equals((queryUserAccount_args)that);
      return false;
    }

    public boolean equals(queryUserAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_userid = true;
      boolean that_present_userid = true;
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (this.userid != that.userid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userid = true;
      list.add(present_userid);
      if (present_userid)
        list.add(userid);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryUserAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserid()).compareTo(other.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, other.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryUserAccount_args(");
      boolean first = true;

      sb.append("userid:");
      sb.append(this.userid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryUserAccount_argsStandardSchemeFactory implements SchemeFactory {
      public queryUserAccount_argsStandardScheme getScheme() {
        return new queryUserAccount_argsStandardScheme();
      }
    }

    private static class queryUserAccount_argsStandardScheme extends StandardScheme<queryUserAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryUserAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userid = iprot.readI32();
                struct.setUseridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryUserAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USERID_FIELD_DESC);
        oprot.writeI32(struct.userid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryUserAccount_argsTupleSchemeFactory implements SchemeFactory {
      public queryUserAccount_argsTupleScheme getScheme() {
        return new queryUserAccount_argsTupleScheme();
      }
    }

    private static class queryUserAccount_argsTupleScheme extends TupleScheme<queryUserAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryUserAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserid()) {
          oprot.writeI32(struct.userid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryUserAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userid = iprot.readI32();
          struct.setUseridIsSet(true);
        }
      }
    }

  }

  public static class queryUserAccount_result implements org.apache.thrift.TBase<queryUserAccount_result, queryUserAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryUserAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryUserAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryUserAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryUserAccount_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryUserAccount_result.class, metaDataMap);
    }

    public queryUserAccount_result() {
    }

    public queryUserAccount_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryUserAccount_result(queryUserAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public queryUserAccount_result deepCopy() {
      return new queryUserAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public queryUserAccount_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryUserAccount_result)
        return this.equals((queryUserAccount_result)that);
      return false;
    }

    public boolean equals(queryUserAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryUserAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryUserAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryUserAccount_resultStandardSchemeFactory implements SchemeFactory {
      public queryUserAccount_resultStandardScheme getScheme() {
        return new queryUserAccount_resultStandardScheme();
      }
    }

    private static class queryUserAccount_resultStandardScheme extends StandardScheme<queryUserAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryUserAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryUserAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryUserAccount_resultTupleSchemeFactory implements SchemeFactory {
      public queryUserAccount_resultTupleScheme getScheme() {
        return new queryUserAccount_resultTupleScheme();
      }
    }

    private static class queryUserAccount_resultTupleScheme extends TupleScheme<queryUserAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryUserAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryUserAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addMoney_args implements org.apache.thrift.TBase<addMoney_args, addMoney_args._Fields>, java.io.Serializable, Cloneable, Comparable<addMoney_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMoney_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addMoney_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addMoney_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMoney_args.class, metaDataMap);
    }

    public addMoney_args() {
    }

    public addMoney_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMoney_args(addMoney_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public addMoney_args deepCopy() {
      return new addMoney_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public addMoney_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMoney_args)
        return this.equals((addMoney_args)that);
      return false;
    }

    public boolean equals(addMoney_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(addMoney_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMoney_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMoney_argsStandardSchemeFactory implements SchemeFactory {
      public addMoney_argsStandardScheme getScheme() {
        return new addMoney_argsStandardScheme();
      }
    }

    private static class addMoney_argsStandardScheme extends StandardScheme<addMoney_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMoney_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map168 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map168.size);
                  String _key169;
                  String _val170;
                  for (int _i171 = 0; _i171 < _map168.size; ++_i171)
                  {
                    _key169 = iprot.readString();
                    _val170 = iprot.readString();
                    struct.datamap.put(_key169, _val170);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMoney_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter172 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter172.getKey());
              oprot.writeString(_iter172.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMoney_argsTupleSchemeFactory implements SchemeFactory {
      public addMoney_argsTupleScheme getScheme() {
        return new addMoney_argsTupleScheme();
      }
    }

    private static class addMoney_argsTupleScheme extends TupleScheme<addMoney_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMoney_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter173 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter173.getKey());
              oprot.writeString(_iter173.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMoney_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map174 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map174.size);
            String _key175;
            String _val176;
            for (int _i177 = 0; _i177 < _map174.size; ++_i177)
            {
              _key175 = iprot.readString();
              _val176 = iprot.readString();
              struct.datamap.put(_key175, _val176);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class addMoney_result implements org.apache.thrift.TBase<addMoney_result, addMoney_result._Fields>, java.io.Serializable, Cloneable, Comparable<addMoney_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMoney_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addMoney_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addMoney_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMoney_result.class, metaDataMap);
    }

    public addMoney_result() {
    }

    public addMoney_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMoney_result(addMoney_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public addMoney_result deepCopy() {
      return new addMoney_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public addMoney_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMoney_result)
        return this.equals((addMoney_result)that);
      return false;
    }

    public boolean equals(addMoney_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addMoney_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMoney_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMoney_resultStandardSchemeFactory implements SchemeFactory {
      public addMoney_resultStandardScheme getScheme() {
        return new addMoney_resultStandardScheme();
      }
    }

    private static class addMoney_resultStandardScheme extends StandardScheme<addMoney_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMoney_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMoney_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMoney_resultTupleSchemeFactory implements SchemeFactory {
      public addMoney_resultTupleScheme getScheme() {
        return new addMoney_resultTupleScheme();
      }
    }

    private static class addMoney_resultTupleScheme extends TupleScheme<addMoney_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMoney_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMoney_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reduceMoney_args implements org.apache.thrift.TBase<reduceMoney_args, reduceMoney_args._Fields>, java.io.Serializable, Cloneable, Comparable<reduceMoney_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reduceMoney_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reduceMoney_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reduceMoney_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reduceMoney_args.class, metaDataMap);
    }

    public reduceMoney_args() {
    }

    public reduceMoney_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reduceMoney_args(reduceMoney_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public reduceMoney_args deepCopy() {
      return new reduceMoney_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public reduceMoney_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reduceMoney_args)
        return this.equals((reduceMoney_args)that);
      return false;
    }

    public boolean equals(reduceMoney_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(reduceMoney_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reduceMoney_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reduceMoney_argsStandardSchemeFactory implements SchemeFactory {
      public reduceMoney_argsStandardScheme getScheme() {
        return new reduceMoney_argsStandardScheme();
      }
    }

    private static class reduceMoney_argsStandardScheme extends StandardScheme<reduceMoney_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reduceMoney_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map178 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map178.size);
                  String _key179;
                  String _val180;
                  for (int _i181 = 0; _i181 < _map178.size; ++_i181)
                  {
                    _key179 = iprot.readString();
                    _val180 = iprot.readString();
                    struct.datamap.put(_key179, _val180);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reduceMoney_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter182 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter182.getKey());
              oprot.writeString(_iter182.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reduceMoney_argsTupleSchemeFactory implements SchemeFactory {
      public reduceMoney_argsTupleScheme getScheme() {
        return new reduceMoney_argsTupleScheme();
      }
    }

    private static class reduceMoney_argsTupleScheme extends TupleScheme<reduceMoney_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reduceMoney_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter183 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter183.getKey());
              oprot.writeString(_iter183.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reduceMoney_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map184 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map184.size);
            String _key185;
            String _val186;
            for (int _i187 = 0; _i187 < _map184.size; ++_i187)
            {
              _key185 = iprot.readString();
              _val186 = iprot.readString();
              struct.datamap.put(_key185, _val186);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class reduceMoney_result implements org.apache.thrift.TBase<reduceMoney_result, reduceMoney_result._Fields>, java.io.Serializable, Cloneable, Comparable<reduceMoney_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reduceMoney_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reduceMoney_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reduceMoney_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reduceMoney_result.class, metaDataMap);
    }

    public reduceMoney_result() {
    }

    public reduceMoney_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reduceMoney_result(reduceMoney_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public reduceMoney_result deepCopy() {
      return new reduceMoney_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public reduceMoney_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reduceMoney_result)
        return this.equals((reduceMoney_result)that);
      return false;
    }

    public boolean equals(reduceMoney_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(reduceMoney_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reduceMoney_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reduceMoney_resultStandardSchemeFactory implements SchemeFactory {
      public reduceMoney_resultStandardScheme getScheme() {
        return new reduceMoney_resultStandardScheme();
      }
    }

    private static class reduceMoney_resultStandardScheme extends StandardScheme<reduceMoney_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reduceMoney_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reduceMoney_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reduceMoney_resultTupleSchemeFactory implements SchemeFactory {
      public reduceMoney_resultTupleScheme getScheme() {
        return new reduceMoney_resultTupleScheme();
      }
    }

    private static class reduceMoney_resultTupleScheme extends TupleScheme<reduceMoney_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reduceMoney_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reduceMoney_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryUserServe_args implements org.apache.thrift.TBase<queryUserServe_args, queryUserServe_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryUserServe_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryUserServe_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryUserServe_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryUserServe_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryUserServe_args.class, metaDataMap);
    }

    public queryUserServe_args() {
    }

    public queryUserServe_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryUserServe_args(queryUserServe_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public queryUserServe_args deepCopy() {
      return new queryUserServe_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public queryUserServe_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryUserServe_args)
        return this.equals((queryUserServe_args)that);
      return false;
    }

    public boolean equals(queryUserServe_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryUserServe_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryUserServe_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryUserServe_argsStandardSchemeFactory implements SchemeFactory {
      public queryUserServe_argsStandardScheme getScheme() {
        return new queryUserServe_argsStandardScheme();
      }
    }

    private static class queryUserServe_argsStandardScheme extends StandardScheme<queryUserServe_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryUserServe_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map188 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map188.size);
                  String _key189;
                  String _val190;
                  for (int _i191 = 0; _i191 < _map188.size; ++_i191)
                  {
                    _key189 = iprot.readString();
                    _val190 = iprot.readString();
                    struct.datamap.put(_key189, _val190);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryUserServe_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter192 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter192.getKey());
              oprot.writeString(_iter192.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryUserServe_argsTupleSchemeFactory implements SchemeFactory {
      public queryUserServe_argsTupleScheme getScheme() {
        return new queryUserServe_argsTupleScheme();
      }
    }

    private static class queryUserServe_argsTupleScheme extends TupleScheme<queryUserServe_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryUserServe_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter193 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter193.getKey());
              oprot.writeString(_iter193.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryUserServe_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map194 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map194.size);
            String _key195;
            String _val196;
            for (int _i197 = 0; _i197 < _map194.size; ++_i197)
            {
              _key195 = iprot.readString();
              _val196 = iprot.readString();
              struct.datamap.put(_key195, _val196);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class queryUserServe_result implements org.apache.thrift.TBase<queryUserServe_result, queryUserServe_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryUserServe_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryUserServe_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryUserServe_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryUserServe_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryUserServe_result.class, metaDataMap);
    }

    public queryUserServe_result() {
    }

    public queryUserServe_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryUserServe_result(queryUserServe_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public queryUserServe_result deepCopy() {
      return new queryUserServe_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public queryUserServe_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryUserServe_result)
        return this.equals((queryUserServe_result)that);
      return false;
    }

    public boolean equals(queryUserServe_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryUserServe_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryUserServe_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryUserServe_resultStandardSchemeFactory implements SchemeFactory {
      public queryUserServe_resultStandardScheme getScheme() {
        return new queryUserServe_resultStandardScheme();
      }
    }

    private static class queryUserServe_resultStandardScheme extends StandardScheme<queryUserServe_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryUserServe_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryUserServe_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryUserServe_resultTupleSchemeFactory implements SchemeFactory {
      public queryUserServe_resultTupleScheme getScheme() {
        return new queryUserServe_resultTupleScheme();
      }
    }

    private static class queryUserServe_resultTupleScheme extends TupleScheme<queryUserServe_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryUserServe_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryUserServe_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addServeTimes_args implements org.apache.thrift.TBase<addServeTimes_args, addServeTimes_args._Fields>, java.io.Serializable, Cloneable, Comparable<addServeTimes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addServeTimes_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addServeTimes_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addServeTimes_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addServeTimes_args.class, metaDataMap);
    }

    public addServeTimes_args() {
    }

    public addServeTimes_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addServeTimes_args(addServeTimes_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public addServeTimes_args deepCopy() {
      return new addServeTimes_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public addServeTimes_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addServeTimes_args)
        return this.equals((addServeTimes_args)that);
      return false;
    }

    public boolean equals(addServeTimes_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(addServeTimes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addServeTimes_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addServeTimes_argsStandardSchemeFactory implements SchemeFactory {
      public addServeTimes_argsStandardScheme getScheme() {
        return new addServeTimes_argsStandardScheme();
      }
    }

    private static class addServeTimes_argsStandardScheme extends StandardScheme<addServeTimes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addServeTimes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map198 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map198.size);
                  String _key199;
                  String _val200;
                  for (int _i201 = 0; _i201 < _map198.size; ++_i201)
                  {
                    _key199 = iprot.readString();
                    _val200 = iprot.readString();
                    struct.datamap.put(_key199, _val200);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addServeTimes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter202 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter202.getKey());
              oprot.writeString(_iter202.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addServeTimes_argsTupleSchemeFactory implements SchemeFactory {
      public addServeTimes_argsTupleScheme getScheme() {
        return new addServeTimes_argsTupleScheme();
      }
    }

    private static class addServeTimes_argsTupleScheme extends TupleScheme<addServeTimes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addServeTimes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter203 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter203.getKey());
              oprot.writeString(_iter203.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addServeTimes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map204 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map204.size);
            String _key205;
            String _val206;
            for (int _i207 = 0; _i207 < _map204.size; ++_i207)
            {
              _key205 = iprot.readString();
              _val206 = iprot.readString();
              struct.datamap.put(_key205, _val206);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class addServeTimes_result implements org.apache.thrift.TBase<addServeTimes_result, addServeTimes_result._Fields>, java.io.Serializable, Cloneable, Comparable<addServeTimes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addServeTimes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addServeTimes_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addServeTimes_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addServeTimes_result.class, metaDataMap);
    }

    public addServeTimes_result() {
    }

    public addServeTimes_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addServeTimes_result(addServeTimes_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public addServeTimes_result deepCopy() {
      return new addServeTimes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public addServeTimes_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addServeTimes_result)
        return this.equals((addServeTimes_result)that);
      return false;
    }

    public boolean equals(addServeTimes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addServeTimes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addServeTimes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addServeTimes_resultStandardSchemeFactory implements SchemeFactory {
      public addServeTimes_resultStandardScheme getScheme() {
        return new addServeTimes_resultStandardScheme();
      }
    }

    private static class addServeTimes_resultStandardScheme extends StandardScheme<addServeTimes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addServeTimes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addServeTimes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addServeTimes_resultTupleSchemeFactory implements SchemeFactory {
      public addServeTimes_resultTupleScheme getScheme() {
        return new addServeTimes_resultTupleScheme();
      }
    }

    private static class addServeTimes_resultTupleScheme extends TupleScheme<addServeTimes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addServeTimes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addServeTimes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reduceServeTimes_args implements org.apache.thrift.TBase<reduceServeTimes_args, reduceServeTimes_args._Fields>, java.io.Serializable, Cloneable, Comparable<reduceServeTimes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reduceServeTimes_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reduceServeTimes_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reduceServeTimes_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reduceServeTimes_args.class, metaDataMap);
    }

    public reduceServeTimes_args() {
    }

    public reduceServeTimes_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reduceServeTimes_args(reduceServeTimes_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public reduceServeTimes_args deepCopy() {
      return new reduceServeTimes_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public reduceServeTimes_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reduceServeTimes_args)
        return this.equals((reduceServeTimes_args)that);
      return false;
    }

    public boolean equals(reduceServeTimes_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(reduceServeTimes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reduceServeTimes_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reduceServeTimes_argsStandardSchemeFactory implements SchemeFactory {
      public reduceServeTimes_argsStandardScheme getScheme() {
        return new reduceServeTimes_argsStandardScheme();
      }
    }

    private static class reduceServeTimes_argsStandardScheme extends StandardScheme<reduceServeTimes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reduceServeTimes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map208 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map208.size);
                  String _key209;
                  String _val210;
                  for (int _i211 = 0; _i211 < _map208.size; ++_i211)
                  {
                    _key209 = iprot.readString();
                    _val210 = iprot.readString();
                    struct.datamap.put(_key209, _val210);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reduceServeTimes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter212 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter212.getKey());
              oprot.writeString(_iter212.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reduceServeTimes_argsTupleSchemeFactory implements SchemeFactory {
      public reduceServeTimes_argsTupleScheme getScheme() {
        return new reduceServeTimes_argsTupleScheme();
      }
    }

    private static class reduceServeTimes_argsTupleScheme extends TupleScheme<reduceServeTimes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reduceServeTimes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter213 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter213.getKey());
              oprot.writeString(_iter213.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reduceServeTimes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map214 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map214.size);
            String _key215;
            String _val216;
            for (int _i217 = 0; _i217 < _map214.size; ++_i217)
            {
              _key215 = iprot.readString();
              _val216 = iprot.readString();
              struct.datamap.put(_key215, _val216);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class reduceServeTimes_result implements org.apache.thrift.TBase<reduceServeTimes_result, reduceServeTimes_result._Fields>, java.io.Serializable, Cloneable, Comparable<reduceServeTimes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reduceServeTimes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reduceServeTimes_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reduceServeTimes_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reduceServeTimes_result.class, metaDataMap);
    }

    public reduceServeTimes_result() {
    }

    public reduceServeTimes_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reduceServeTimes_result(reduceServeTimes_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public reduceServeTimes_result deepCopy() {
      return new reduceServeTimes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public reduceServeTimes_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reduceServeTimes_result)
        return this.equals((reduceServeTimes_result)that);
      return false;
    }

    public boolean equals(reduceServeTimes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(reduceServeTimes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reduceServeTimes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reduceServeTimes_resultStandardSchemeFactory implements SchemeFactory {
      public reduceServeTimes_resultStandardScheme getScheme() {
        return new reduceServeTimes_resultStandardScheme();
      }
    }

    private static class reduceServeTimes_resultStandardScheme extends StandardScheme<reduceServeTimes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reduceServeTimes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reduceServeTimes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reduceServeTimes_resultTupleSchemeFactory implements SchemeFactory {
      public reduceServeTimes_resultTupleScheme getScheme() {
        return new reduceServeTimes_resultTupleScheme();
      }
    }

    private static class reduceServeTimes_resultTupleScheme extends TupleScheme<reduceServeTimes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reduceServeTimes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reduceServeTimes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryPayServe_args implements org.apache.thrift.TBase<queryPayServe_args, queryPayServe_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryPayServe_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryPayServe_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryPayServe_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryPayServe_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryPayServe_args.class, metaDataMap);
    }

    public queryPayServe_args() {
    }

    public queryPayServe_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryPayServe_args(queryPayServe_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public queryPayServe_args deepCopy() {
      return new queryPayServe_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public queryPayServe_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryPayServe_args)
        return this.equals((queryPayServe_args)that);
      return false;
    }

    public boolean equals(queryPayServe_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryPayServe_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryPayServe_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryPayServe_argsStandardSchemeFactory implements SchemeFactory {
      public queryPayServe_argsStandardScheme getScheme() {
        return new queryPayServe_argsStandardScheme();
      }
    }

    private static class queryPayServe_argsStandardScheme extends StandardScheme<queryPayServe_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryPayServe_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map218 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map218.size);
                  String _key219;
                  String _val220;
                  for (int _i221 = 0; _i221 < _map218.size; ++_i221)
                  {
                    _key219 = iprot.readString();
                    _val220 = iprot.readString();
                    struct.datamap.put(_key219, _val220);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryPayServe_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter222 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter222.getKey());
              oprot.writeString(_iter222.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryPayServe_argsTupleSchemeFactory implements SchemeFactory {
      public queryPayServe_argsTupleScheme getScheme() {
        return new queryPayServe_argsTupleScheme();
      }
    }

    private static class queryPayServe_argsTupleScheme extends TupleScheme<queryPayServe_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryPayServe_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter223 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter223.getKey());
              oprot.writeString(_iter223.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryPayServe_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map224 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map224.size);
            String _key225;
            String _val226;
            for (int _i227 = 0; _i227 < _map224.size; ++_i227)
            {
              _key225 = iprot.readString();
              _val226 = iprot.readString();
              struct.datamap.put(_key225, _val226);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class queryPayServe_result implements org.apache.thrift.TBase<queryPayServe_result, queryPayServe_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryPayServe_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryPayServe_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryPayServe_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryPayServe_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryPayServe_result.class, metaDataMap);
    }

    public queryPayServe_result() {
    }

    public queryPayServe_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryPayServe_result(queryPayServe_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public queryPayServe_result deepCopy() {
      return new queryPayServe_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public queryPayServe_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryPayServe_result)
        return this.equals((queryPayServe_result)that);
      return false;
    }

    public boolean equals(queryPayServe_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryPayServe_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryPayServe_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryPayServe_resultStandardSchemeFactory implements SchemeFactory {
      public queryPayServe_resultStandardScheme getScheme() {
        return new queryPayServe_resultStandardScheme();
      }
    }

    private static class queryPayServe_resultStandardScheme extends StandardScheme<queryPayServe_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryPayServe_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryPayServe_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryPayServe_resultTupleSchemeFactory implements SchemeFactory {
      public queryPayServe_resultTupleScheme getScheme() {
        return new queryPayServe_resultTupleScheme();
      }
    }

    private static class queryPayServe_resultTupleScheme extends TupleScheme<queryPayServe_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryPayServe_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryPayServe_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addPayServe_args implements org.apache.thrift.TBase<addPayServe_args, addPayServe_args._Fields>, java.io.Serializable, Cloneable, Comparable<addPayServe_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPayServe_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPayServe_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPayServe_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPayServe_args.class, metaDataMap);
    }

    public addPayServe_args() {
    }

    public addPayServe_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPayServe_args(addPayServe_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public addPayServe_args deepCopy() {
      return new addPayServe_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public addPayServe_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPayServe_args)
        return this.equals((addPayServe_args)that);
      return false;
    }

    public boolean equals(addPayServe_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(addPayServe_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPayServe_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPayServe_argsStandardSchemeFactory implements SchemeFactory {
      public addPayServe_argsStandardScheme getScheme() {
        return new addPayServe_argsStandardScheme();
      }
    }

    private static class addPayServe_argsStandardScheme extends StandardScheme<addPayServe_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPayServe_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map228 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map228.size);
                  String _key229;
                  String _val230;
                  for (int _i231 = 0; _i231 < _map228.size; ++_i231)
                  {
                    _key229 = iprot.readString();
                    _val230 = iprot.readString();
                    struct.datamap.put(_key229, _val230);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPayServe_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter232 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter232.getKey());
              oprot.writeString(_iter232.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPayServe_argsTupleSchemeFactory implements SchemeFactory {
      public addPayServe_argsTupleScheme getScheme() {
        return new addPayServe_argsTupleScheme();
      }
    }

    private static class addPayServe_argsTupleScheme extends TupleScheme<addPayServe_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPayServe_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter233 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter233.getKey());
              oprot.writeString(_iter233.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPayServe_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map234 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map234.size);
            String _key235;
            String _val236;
            for (int _i237 = 0; _i237 < _map234.size; ++_i237)
            {
              _key235 = iprot.readString();
              _val236 = iprot.readString();
              struct.datamap.put(_key235, _val236);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class addPayServe_result implements org.apache.thrift.TBase<addPayServe_result, addPayServe_result._Fields>, java.io.Serializable, Cloneable, Comparable<addPayServe_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPayServe_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPayServe_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPayServe_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPayServe_result.class, metaDataMap);
    }

    public addPayServe_result() {
    }

    public addPayServe_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPayServe_result(addPayServe_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public addPayServe_result deepCopy() {
      return new addPayServe_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public addPayServe_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPayServe_result)
        return this.equals((addPayServe_result)that);
      return false;
    }

    public boolean equals(addPayServe_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addPayServe_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPayServe_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPayServe_resultStandardSchemeFactory implements SchemeFactory {
      public addPayServe_resultStandardScheme getScheme() {
        return new addPayServe_resultStandardScheme();
      }
    }

    private static class addPayServe_resultStandardScheme extends StandardScheme<addPayServe_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPayServe_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPayServe_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPayServe_resultTupleSchemeFactory implements SchemeFactory {
      public addPayServe_resultTupleScheme getScheme() {
        return new addPayServe_resultTupleScheme();
      }
    }

    private static class addPayServe_resultTupleScheme extends TupleScheme<addPayServe_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPayServe_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPayServe_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updatePayServe_args implements org.apache.thrift.TBase<updatePayServe_args, updatePayServe_args._Fields>, java.io.Serializable, Cloneable, Comparable<updatePayServe_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePayServe_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePayServe_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePayServe_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePayServe_args.class, metaDataMap);
    }

    public updatePayServe_args() {
    }

    public updatePayServe_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePayServe_args(updatePayServe_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public updatePayServe_args deepCopy() {
      return new updatePayServe_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public updatePayServe_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePayServe_args)
        return this.equals((updatePayServe_args)that);
      return false;
    }

    public boolean equals(updatePayServe_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(updatePayServe_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePayServe_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePayServe_argsStandardSchemeFactory implements SchemeFactory {
      public updatePayServe_argsStandardScheme getScheme() {
        return new updatePayServe_argsStandardScheme();
      }
    }

    private static class updatePayServe_argsStandardScheme extends StandardScheme<updatePayServe_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePayServe_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map238 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map238.size);
                  String _key239;
                  String _val240;
                  for (int _i241 = 0; _i241 < _map238.size; ++_i241)
                  {
                    _key239 = iprot.readString();
                    _val240 = iprot.readString();
                    struct.datamap.put(_key239, _val240);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePayServe_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter242 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter242.getKey());
              oprot.writeString(_iter242.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePayServe_argsTupleSchemeFactory implements SchemeFactory {
      public updatePayServe_argsTupleScheme getScheme() {
        return new updatePayServe_argsTupleScheme();
      }
    }

    private static class updatePayServe_argsTupleScheme extends TupleScheme<updatePayServe_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePayServe_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter243 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter243.getKey());
              oprot.writeString(_iter243.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePayServe_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map244 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map244.size);
            String _key245;
            String _val246;
            for (int _i247 = 0; _i247 < _map244.size; ++_i247)
            {
              _key245 = iprot.readString();
              _val246 = iprot.readString();
              struct.datamap.put(_key245, _val246);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class updatePayServe_result implements org.apache.thrift.TBase<updatePayServe_result, updatePayServe_result._Fields>, java.io.Serializable, Cloneable, Comparable<updatePayServe_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePayServe_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePayServe_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePayServe_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePayServe_result.class, metaDataMap);
    }

    public updatePayServe_result() {
    }

    public updatePayServe_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePayServe_result(updatePayServe_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public updatePayServe_result deepCopy() {
      return new updatePayServe_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public updatePayServe_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePayServe_result)
        return this.equals((updatePayServe_result)that);
      return false;
    }

    public boolean equals(updatePayServe_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updatePayServe_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePayServe_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePayServe_resultStandardSchemeFactory implements SchemeFactory {
      public updatePayServe_resultStandardScheme getScheme() {
        return new updatePayServe_resultStandardScheme();
      }
    }

    private static class updatePayServe_resultStandardScheme extends StandardScheme<updatePayServe_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePayServe_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePayServe_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePayServe_resultTupleSchemeFactory implements SchemeFactory {
      public updatePayServe_resultTupleScheme getScheme() {
        return new updatePayServe_resultTupleScheme();
      }
    }

    private static class updatePayServe_resultTupleScheme extends TupleScheme<updatePayServe_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePayServe_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePayServe_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveOrder_args implements org.apache.thrift.TBase<saveOrder_args, saveOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveOrder_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);
    private static final org.apache.thrift.protocol.TField MMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("mmap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveOrder_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required
    public Map<String,String> mmap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap"),
      MMAP((short)2, "mmap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          case 2: // MMAP
            return MMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.MMAP, new org.apache.thrift.meta_data.FieldMetaData("mmap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveOrder_args.class, metaDataMap);
    }

    public saveOrder_args() {
    }

    public saveOrder_args(
      Map<String,String> datamap,
      Map<String,String> mmap)
    {
      this();
      this.datamap = datamap;
      this.mmap = mmap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveOrder_args(saveOrder_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
      if (other.isSetMmap()) {
        Map<String,String> __this__mmap = new HashMap<String,String>(other.mmap);
        this.mmap = __this__mmap;
      }
    }

    public saveOrder_args deepCopy() {
      return new saveOrder_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
      this.mmap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public saveOrder_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public int getMmapSize() {
      return (this.mmap == null) ? 0 : this.mmap.size();
    }

    public void putToMmap(String key, String val) {
      if (this.mmap == null) {
        this.mmap = new HashMap<String,String>();
      }
      this.mmap.put(key, val);
    }

    public Map<String,String> getMmap() {
      return this.mmap;
    }

    public saveOrder_args setMmap(Map<String,String> mmap) {
      this.mmap = mmap;
      return this;
    }

    public void unsetMmap() {
      this.mmap = null;
    }

    /** Returns true if field mmap is set (has been assigned a value) and false otherwise */
    public boolean isSetMmap() {
      return this.mmap != null;
    }

    public void setMmapIsSet(boolean value) {
      if (!value) {
        this.mmap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      case MMAP:
        if (value == null) {
          unsetMmap();
        } else {
          setMmap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      case MMAP:
        return getMmap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      case MMAP:
        return isSetMmap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveOrder_args)
        return this.equals((saveOrder_args)that);
      return false;
    }

    public boolean equals(saveOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      boolean this_present_mmap = true && this.isSetMmap();
      boolean that_present_mmap = true && that.isSetMmap();
      if (this_present_mmap || that_present_mmap) {
        if (!(this_present_mmap && that_present_mmap))
          return false;
        if (!this.mmap.equals(that.mmap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      boolean present_mmap = true && (isSetMmap());
      list.add(present_mmap);
      if (present_mmap)
        list.add(mmap);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMmap()).compareTo(other.isSetMmap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMmap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mmap, other.mmap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveOrder_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mmap:");
      if (this.mmap == null) {
        sb.append("null");
      } else {
        sb.append(this.mmap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveOrder_argsStandardSchemeFactory implements SchemeFactory {
      public saveOrder_argsStandardScheme getScheme() {
        return new saveOrder_argsStandardScheme();
      }
    }

    private static class saveOrder_argsStandardScheme extends StandardScheme<saveOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map248 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map248.size);
                  String _key249;
                  String _val250;
                  for (int _i251 = 0; _i251 < _map248.size; ++_i251)
                  {
                    _key249 = iprot.readString();
                    _val250 = iprot.readString();
                    struct.datamap.put(_key249, _val250);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map252 = iprot.readMapBegin();
                  struct.mmap = new HashMap<String,String>(2*_map252.size);
                  String _key253;
                  String _val254;
                  for (int _i255 = 0; _i255 < _map252.size; ++_i255)
                  {
                    _key253 = iprot.readString();
                    _val254 = iprot.readString();
                    struct.mmap.put(_key253, _val254);
                  }
                  iprot.readMapEnd();
                }
                struct.setMmapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter256 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter256.getKey());
              oprot.writeString(_iter256.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.mmap != null) {
          oprot.writeFieldBegin(MMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.mmap.size()));
            for (Map.Entry<String, String> _iter257 : struct.mmap.entrySet())
            {
              oprot.writeString(_iter257.getKey());
              oprot.writeString(_iter257.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveOrder_argsTupleSchemeFactory implements SchemeFactory {
      public saveOrder_argsTupleScheme getScheme() {
        return new saveOrder_argsTupleScheme();
      }
    }

    private static class saveOrder_argsTupleScheme extends TupleScheme<saveOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        if (struct.isSetMmap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter258 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter258.getKey());
              oprot.writeString(_iter258.getValue());
            }
          }
        }
        if (struct.isSetMmap()) {
          {
            oprot.writeI32(struct.mmap.size());
            for (Map.Entry<String, String> _iter259 : struct.mmap.entrySet())
            {
              oprot.writeString(_iter259.getKey());
              oprot.writeString(_iter259.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map260 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map260.size);
            String _key261;
            String _val262;
            for (int _i263 = 0; _i263 < _map260.size; ++_i263)
            {
              _key261 = iprot.readString();
              _val262 = iprot.readString();
              struct.datamap.put(_key261, _val262);
            }
          }
          struct.setDatamapIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map264 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.mmap = new HashMap<String,String>(2*_map264.size);
            String _key265;
            String _val266;
            for (int _i267 = 0; _i267 < _map264.size; ++_i267)
            {
              _key265 = iprot.readString();
              _val266 = iprot.readString();
              struct.mmap.put(_key265, _val266);
            }
          }
          struct.setMmapIsSet(true);
        }
      }
    }

  }

  public static class saveOrder_result implements org.apache.thrift.TBase<saveOrder_result, saveOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveOrder_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveOrder_result.class, metaDataMap);
    }

    public saveOrder_result() {
    }

    public saveOrder_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveOrder_result(saveOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public saveOrder_result deepCopy() {
      return new saveOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public saveOrder_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveOrder_result)
        return this.equals((saveOrder_result)that);
      return false;
    }

    public boolean equals(saveOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveOrder_resultStandardSchemeFactory implements SchemeFactory {
      public saveOrder_resultStandardScheme getScheme() {
        return new saveOrder_resultStandardScheme();
      }
    }

    private static class saveOrder_resultStandardScheme extends StandardScheme<saveOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveOrder_resultTupleSchemeFactory implements SchemeFactory {
      public saveOrder_resultTupleScheme getScheme() {
        return new saveOrder_resultTupleScheme();
      }
    }

    private static class saveOrder_resultTupleScheme extends TupleScheme<saveOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryPayRecord_args implements org.apache.thrift.TBase<queryPayRecord_args, queryPayRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryPayRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryPayRecord_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryPayRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryPayRecord_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryPayRecord_args.class, metaDataMap);
    }

    public queryPayRecord_args() {
    }

    public queryPayRecord_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryPayRecord_args(queryPayRecord_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public queryPayRecord_args deepCopy() {
      return new queryPayRecord_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public queryPayRecord_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryPayRecord_args)
        return this.equals((queryPayRecord_args)that);
      return false;
    }

    public boolean equals(queryPayRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryPayRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryPayRecord_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryPayRecord_argsStandardSchemeFactory implements SchemeFactory {
      public queryPayRecord_argsStandardScheme getScheme() {
        return new queryPayRecord_argsStandardScheme();
      }
    }

    private static class queryPayRecord_argsStandardScheme extends StandardScheme<queryPayRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryPayRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map268 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map268.size);
                  String _key269;
                  String _val270;
                  for (int _i271 = 0; _i271 < _map268.size; ++_i271)
                  {
                    _key269 = iprot.readString();
                    _val270 = iprot.readString();
                    struct.datamap.put(_key269, _val270);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryPayRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter272 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter272.getKey());
              oprot.writeString(_iter272.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryPayRecord_argsTupleSchemeFactory implements SchemeFactory {
      public queryPayRecord_argsTupleScheme getScheme() {
        return new queryPayRecord_argsTupleScheme();
      }
    }

    private static class queryPayRecord_argsTupleScheme extends TupleScheme<queryPayRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryPayRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter273 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter273.getKey());
              oprot.writeString(_iter273.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryPayRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map274 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map274.size);
            String _key275;
            String _val276;
            for (int _i277 = 0; _i277 < _map274.size; ++_i277)
            {
              _key275 = iprot.readString();
              _val276 = iprot.readString();
              struct.datamap.put(_key275, _val276);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class queryPayRecord_result implements org.apache.thrift.TBase<queryPayRecord_result, queryPayRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryPayRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryPayRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryPayRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryPayRecord_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryPayRecord_result.class, metaDataMap);
    }

    public queryPayRecord_result() {
    }

    public queryPayRecord_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryPayRecord_result(queryPayRecord_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public queryPayRecord_result deepCopy() {
      return new queryPayRecord_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public queryPayRecord_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryPayRecord_result)
        return this.equals((queryPayRecord_result)that);
      return false;
    }

    public boolean equals(queryPayRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryPayRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryPayRecord_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryPayRecord_resultStandardSchemeFactory implements SchemeFactory {
      public queryPayRecord_resultStandardScheme getScheme() {
        return new queryPayRecord_resultStandardScheme();
      }
    }

    private static class queryPayRecord_resultStandardScheme extends StandardScheme<queryPayRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryPayRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryPayRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryPayRecord_resultTupleSchemeFactory implements SchemeFactory {
      public queryPayRecord_resultTupleScheme getScheme() {
        return new queryPayRecord_resultTupleScheme();
      }
    }

    private static class queryPayRecord_resultTupleScheme extends TupleScheme<queryPayRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryPayRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryPayRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateOrderStatus_args implements org.apache.thrift.TBase<updateOrderStatus_args, updateOrderStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateOrderStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateOrderStatus_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateOrderStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateOrderStatus_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateOrderStatus_args.class, metaDataMap);
    }

    public updateOrderStatus_args() {
    }

    public updateOrderStatus_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateOrderStatus_args(updateOrderStatus_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public updateOrderStatus_args deepCopy() {
      return new updateOrderStatus_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public updateOrderStatus_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateOrderStatus_args)
        return this.equals((updateOrderStatus_args)that);
      return false;
    }

    public boolean equals(updateOrderStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateOrderStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateOrderStatus_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateOrderStatus_argsStandardSchemeFactory implements SchemeFactory {
      public updateOrderStatus_argsStandardScheme getScheme() {
        return new updateOrderStatus_argsStandardScheme();
      }
    }

    private static class updateOrderStatus_argsStandardScheme extends StandardScheme<updateOrderStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateOrderStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map278 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map278.size);
                  String _key279;
                  String _val280;
                  for (int _i281 = 0; _i281 < _map278.size; ++_i281)
                  {
                    _key279 = iprot.readString();
                    _val280 = iprot.readString();
                    struct.datamap.put(_key279, _val280);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateOrderStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter282 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter282.getKey());
              oprot.writeString(_iter282.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateOrderStatus_argsTupleSchemeFactory implements SchemeFactory {
      public updateOrderStatus_argsTupleScheme getScheme() {
        return new updateOrderStatus_argsTupleScheme();
      }
    }

    private static class updateOrderStatus_argsTupleScheme extends TupleScheme<updateOrderStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateOrderStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter283 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter283.getKey());
              oprot.writeString(_iter283.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateOrderStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map284 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map284.size);
            String _key285;
            String _val286;
            for (int _i287 = 0; _i287 < _map284.size; ++_i287)
            {
              _key285 = iprot.readString();
              _val286 = iprot.readString();
              struct.datamap.put(_key285, _val286);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class updateOrderStatus_result implements org.apache.thrift.TBase<updateOrderStatus_result, updateOrderStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateOrderStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateOrderStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateOrderStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateOrderStatus_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateOrderStatus_result.class, metaDataMap);
    }

    public updateOrderStatus_result() {
    }

    public updateOrderStatus_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateOrderStatus_result(updateOrderStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public updateOrderStatus_result deepCopy() {
      return new updateOrderStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public updateOrderStatus_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateOrderStatus_result)
        return this.equals((updateOrderStatus_result)that);
      return false;
    }

    public boolean equals(updateOrderStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateOrderStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateOrderStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateOrderStatus_resultStandardSchemeFactory implements SchemeFactory {
      public updateOrderStatus_resultStandardScheme getScheme() {
        return new updateOrderStatus_resultStandardScheme();
      }
    }

    private static class updateOrderStatus_resultStandardScheme extends StandardScheme<updateOrderStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateOrderStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateOrderStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateOrderStatus_resultTupleSchemeFactory implements SchemeFactory {
      public updateOrderStatus_resultTupleScheme getScheme() {
        return new updateOrderStatus_resultTupleScheme();
      }
    }

    private static class updateOrderStatus_resultTupleScheme extends TupleScheme<updateOrderStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateOrderStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateOrderStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryOrder_args implements org.apache.thrift.TBase<queryOrder_args, queryOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryOrder_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryOrder_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryOrder_args.class, metaDataMap);
    }

    public queryOrder_args() {
    }

    public queryOrder_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryOrder_args(queryOrder_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public queryOrder_args deepCopy() {
      return new queryOrder_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public queryOrder_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryOrder_args)
        return this.equals((queryOrder_args)that);
      return false;
    }

    public boolean equals(queryOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryOrder_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryOrder_argsStandardSchemeFactory implements SchemeFactory {
      public queryOrder_argsStandardScheme getScheme() {
        return new queryOrder_argsStandardScheme();
      }
    }

    private static class queryOrder_argsStandardScheme extends StandardScheme<queryOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map288 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map288.size);
                  String _key289;
                  String _val290;
                  for (int _i291 = 0; _i291 < _map288.size; ++_i291)
                  {
                    _key289 = iprot.readString();
                    _val290 = iprot.readString();
                    struct.datamap.put(_key289, _val290);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter292 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter292.getKey());
              oprot.writeString(_iter292.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryOrder_argsTupleSchemeFactory implements SchemeFactory {
      public queryOrder_argsTupleScheme getScheme() {
        return new queryOrder_argsTupleScheme();
      }
    }

    private static class queryOrder_argsTupleScheme extends TupleScheme<queryOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter293 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter293.getKey());
              oprot.writeString(_iter293.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map294 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map294.size);
            String _key295;
            String _val296;
            for (int _i297 = 0; _i297 < _map294.size; ++_i297)
            {
              _key295 = iprot.readString();
              _val296 = iprot.readString();
              struct.datamap.put(_key295, _val296);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class queryOrder_result implements org.apache.thrift.TBase<queryOrder_result, queryOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryOrder_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryOrder_result.class, metaDataMap);
    }

    public queryOrder_result() {
    }

    public queryOrder_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryOrder_result(queryOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public queryOrder_result deepCopy() {
      return new queryOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public queryOrder_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryOrder_result)
        return this.equals((queryOrder_result)that);
      return false;
    }

    public boolean equals(queryOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryOrder_resultStandardSchemeFactory implements SchemeFactory {
      public queryOrder_resultStandardScheme getScheme() {
        return new queryOrder_resultStandardScheme();
      }
    }

    private static class queryOrder_resultStandardScheme extends StandardScheme<queryOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryOrder_resultTupleSchemeFactory implements SchemeFactory {
      public queryOrder_resultTupleScheme getScheme() {
        return new queryOrder_resultTupleScheme();
      }
    }

    private static class queryOrder_resultTupleScheme extends TupleScheme<queryOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
