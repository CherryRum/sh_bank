/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mmec.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-29")
public class DataResult implements org.apache.thrift.TBase<DataResult, DataResult._Fields>, java.io.Serializable, Cloneable, Comparable<DataResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DataResult");

  private static final org.apache.thrift.protocol.TField CONT_SERIAL_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("contSerialNum", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ZIP_SHA1_FIELD_DESC = new org.apache.thrift.protocol.TField("zipSha1", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ZIP_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("zipSize", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SIGNER_FIELD_DESC = new org.apache.thrift.protocol.TField("signer", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DataResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DataResultTupleSchemeFactory());
  }

  public String contSerialNum; // required
  public String title; // required
  public String zipSha1; // required
  public String zipSize; // required
  public List<Map<String,String>> signer; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONT_SERIAL_NUM((short)1, "contSerialNum"),
    TITLE((short)2, "title"),
    ZIP_SHA1((short)3, "zipSha1"),
    ZIP_SIZE((short)4, "zipSize"),
    SIGNER((short)5, "signer");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONT_SERIAL_NUM
          return CONT_SERIAL_NUM;
        case 2: // TITLE
          return TITLE;
        case 3: // ZIP_SHA1
          return ZIP_SHA1;
        case 4: // ZIP_SIZE
          return ZIP_SIZE;
        case 5: // SIGNER
          return SIGNER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONT_SERIAL_NUM, new org.apache.thrift.meta_data.FieldMetaData("contSerialNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ZIP_SHA1, new org.apache.thrift.meta_data.FieldMetaData("zipSha1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ZIP_SIZE, new org.apache.thrift.meta_data.FieldMetaData("zipSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIGNER, new org.apache.thrift.meta_data.FieldMetaData("signer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DataResult.class, metaDataMap);
  }

  public DataResult() {
  }

  public DataResult(
    String contSerialNum,
    String title,
    String zipSha1,
    String zipSize,
    List<Map<String,String>> signer)
  {
    this();
    this.contSerialNum = contSerialNum;
    this.title = title;
    this.zipSha1 = zipSha1;
    this.zipSize = zipSize;
    this.signer = signer;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DataResult(DataResult other) {
    if (other.isSetContSerialNum()) {
      this.contSerialNum = other.contSerialNum;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetZipSha1()) {
      this.zipSha1 = other.zipSha1;
    }
    if (other.isSetZipSize()) {
      this.zipSize = other.zipSize;
    }
    if (other.isSetSigner()) {
      List<Map<String,String>> __this__signer = new ArrayList<Map<String,String>>(other.signer.size());
      for (Map<String,String> other_element : other.signer) {
        Map<String,String> __this__signer_copy = new HashMap<String,String>(other_element);
        __this__signer.add(__this__signer_copy);
      }
      this.signer = __this__signer;
    }
  }

  public DataResult deepCopy() {
    return new DataResult(this);
  }

  @Override
  public void clear() {
    this.contSerialNum = null;
    this.title = null;
    this.zipSha1 = null;
    this.zipSize = null;
    this.signer = null;
  }

  public String getContSerialNum() {
    return this.contSerialNum;
  }

  public DataResult setContSerialNum(String contSerialNum) {
    this.contSerialNum = contSerialNum;
    return this;
  }

  public void unsetContSerialNum() {
    this.contSerialNum = null;
  }

  /** Returns true if field contSerialNum is set (has been assigned a value) and false otherwise */
  public boolean isSetContSerialNum() {
    return this.contSerialNum != null;
  }

  public void setContSerialNumIsSet(boolean value) {
    if (!value) {
      this.contSerialNum = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public DataResult setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getZipSha1() {
    return this.zipSha1;
  }

  public DataResult setZipSha1(String zipSha1) {
    this.zipSha1 = zipSha1;
    return this;
  }

  public void unsetZipSha1() {
    this.zipSha1 = null;
  }

  /** Returns true if field zipSha1 is set (has been assigned a value) and false otherwise */
  public boolean isSetZipSha1() {
    return this.zipSha1 != null;
  }

  public void setZipSha1IsSet(boolean value) {
    if (!value) {
      this.zipSha1 = null;
    }
  }

  public String getZipSize() {
    return this.zipSize;
  }

  public DataResult setZipSize(String zipSize) {
    this.zipSize = zipSize;
    return this;
  }

  public void unsetZipSize() {
    this.zipSize = null;
  }

  /** Returns true if field zipSize is set (has been assigned a value) and false otherwise */
  public boolean isSetZipSize() {
    return this.zipSize != null;
  }

  public void setZipSizeIsSet(boolean value) {
    if (!value) {
      this.zipSize = null;
    }
  }

  public int getSignerSize() {
    return (this.signer == null) ? 0 : this.signer.size();
  }

  public java.util.Iterator<Map<String,String>> getSignerIterator() {
    return (this.signer == null) ? null : this.signer.iterator();
  }

  public void addToSigner(Map<String,String> elem) {
    if (this.signer == null) {
      this.signer = new ArrayList<Map<String,String>>();
    }
    this.signer.add(elem);
  }

  public List<Map<String,String>> getSigner() {
    return this.signer;
  }

  public DataResult setSigner(List<Map<String,String>> signer) {
    this.signer = signer;
    return this;
  }

  public void unsetSigner() {
    this.signer = null;
  }

  /** Returns true if field signer is set (has been assigned a value) and false otherwise */
  public boolean isSetSigner() {
    return this.signer != null;
  }

  public void setSignerIsSet(boolean value) {
    if (!value) {
      this.signer = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONT_SERIAL_NUM:
      if (value == null) {
        unsetContSerialNum();
      } else {
        setContSerialNum((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case ZIP_SHA1:
      if (value == null) {
        unsetZipSha1();
      } else {
        setZipSha1((String)value);
      }
      break;

    case ZIP_SIZE:
      if (value == null) {
        unsetZipSize();
      } else {
        setZipSize((String)value);
      }
      break;

    case SIGNER:
      if (value == null) {
        unsetSigner();
      } else {
        setSigner((List<Map<String,String>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONT_SERIAL_NUM:
      return getContSerialNum();

    case TITLE:
      return getTitle();

    case ZIP_SHA1:
      return getZipSha1();

    case ZIP_SIZE:
      return getZipSize();

    case SIGNER:
      return getSigner();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONT_SERIAL_NUM:
      return isSetContSerialNum();
    case TITLE:
      return isSetTitle();
    case ZIP_SHA1:
      return isSetZipSha1();
    case ZIP_SIZE:
      return isSetZipSize();
    case SIGNER:
      return isSetSigner();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DataResult)
      return this.equals((DataResult)that);
    return false;
  }

  public boolean equals(DataResult that) {
    if (that == null)
      return false;

    boolean this_present_contSerialNum = true && this.isSetContSerialNum();
    boolean that_present_contSerialNum = true && that.isSetContSerialNum();
    if (this_present_contSerialNum || that_present_contSerialNum) {
      if (!(this_present_contSerialNum && that_present_contSerialNum))
        return false;
      if (!this.contSerialNum.equals(that.contSerialNum))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_zipSha1 = true && this.isSetZipSha1();
    boolean that_present_zipSha1 = true && that.isSetZipSha1();
    if (this_present_zipSha1 || that_present_zipSha1) {
      if (!(this_present_zipSha1 && that_present_zipSha1))
        return false;
      if (!this.zipSha1.equals(that.zipSha1))
        return false;
    }

    boolean this_present_zipSize = true && this.isSetZipSize();
    boolean that_present_zipSize = true && that.isSetZipSize();
    if (this_present_zipSize || that_present_zipSize) {
      if (!(this_present_zipSize && that_present_zipSize))
        return false;
      if (!this.zipSize.equals(that.zipSize))
        return false;
    }

    boolean this_present_signer = true && this.isSetSigner();
    boolean that_present_signer = true && that.isSetSigner();
    if (this_present_signer || that_present_signer) {
      if (!(this_present_signer && that_present_signer))
        return false;
      if (!this.signer.equals(that.signer))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_contSerialNum = true && (isSetContSerialNum());
    list.add(present_contSerialNum);
    if (present_contSerialNum)
      list.add(contSerialNum);

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_zipSha1 = true && (isSetZipSha1());
    list.add(present_zipSha1);
    if (present_zipSha1)
      list.add(zipSha1);

    boolean present_zipSize = true && (isSetZipSize());
    list.add(present_zipSize);
    if (present_zipSize)
      list.add(zipSize);

    boolean present_signer = true && (isSetSigner());
    list.add(present_signer);
    if (present_signer)
      list.add(signer);

    return list.hashCode();
  }

  @Override
  public int compareTo(DataResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetContSerialNum()).compareTo(other.isSetContSerialNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContSerialNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contSerialNum, other.contSerialNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZipSha1()).compareTo(other.isSetZipSha1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZipSha1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zipSha1, other.zipSha1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZipSize()).compareTo(other.isSetZipSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZipSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zipSize, other.zipSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSigner()).compareTo(other.isSetSigner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSigner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signer, other.signer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DataResult(");
    boolean first = true;

    sb.append("contSerialNum:");
    if (this.contSerialNum == null) {
      sb.append("null");
    } else {
      sb.append(this.contSerialNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("zipSha1:");
    if (this.zipSha1 == null) {
      sb.append("null");
    } else {
      sb.append(this.zipSha1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("zipSize:");
    if (this.zipSize == null) {
      sb.append("null");
    } else {
      sb.append(this.zipSize);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("signer:");
    if (this.signer == null) {
      sb.append("null");
    } else {
      sb.append(this.signer);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DataResultStandardSchemeFactory implements SchemeFactory {
    public DataResultStandardScheme getScheme() {
      return new DataResultStandardScheme();
    }
  }

  private static class DataResultStandardScheme extends StandardScheme<DataResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DataResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONT_SERIAL_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contSerialNum = iprot.readString();
              struct.setContSerialNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ZIP_SHA1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.zipSha1 = iprot.readString();
              struct.setZipSha1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ZIP_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.zipSize = iprot.readString();
              struct.setZipSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SIGNER
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                struct.signer = new ArrayList<Map<String,String>>(_list20.size);
                Map<String,String> _elem21;
                for (int _i22 = 0; _i22 < _list20.size; ++_i22)
                {
                  {
                    org.apache.thrift.protocol.TMap _map23 = iprot.readMapBegin();
                    _elem21 = new HashMap<String,String>(2*_map23.size);
                    String _key24;
                    String _val25;
                    for (int _i26 = 0; _i26 < _map23.size; ++_i26)
                    {
                      _key24 = iprot.readString();
                      _val25 = iprot.readString();
                      _elem21.put(_key24, _val25);
                    }
                    iprot.readMapEnd();
                  }
                  struct.signer.add(_elem21);
                }
                iprot.readListEnd();
              }
              struct.setSignerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DataResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.contSerialNum != null) {
        oprot.writeFieldBegin(CONT_SERIAL_NUM_FIELD_DESC);
        oprot.writeString(struct.contSerialNum);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.zipSha1 != null) {
        oprot.writeFieldBegin(ZIP_SHA1_FIELD_DESC);
        oprot.writeString(struct.zipSha1);
        oprot.writeFieldEnd();
      }
      if (struct.zipSize != null) {
        oprot.writeFieldBegin(ZIP_SIZE_FIELD_DESC);
        oprot.writeString(struct.zipSize);
        oprot.writeFieldEnd();
      }
      if (struct.signer != null) {
        oprot.writeFieldBegin(SIGNER_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.signer.size()));
          for (Map<String,String> _iter27 : struct.signer)
          {
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter27.size()));
              for (Map.Entry<String, String> _iter28 : _iter27.entrySet())
              {
                oprot.writeString(_iter28.getKey());
                oprot.writeString(_iter28.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DataResultTupleSchemeFactory implements SchemeFactory {
    public DataResultTupleScheme getScheme() {
      return new DataResultTupleScheme();
    }
  }

  private static class DataResultTupleScheme extends TupleScheme<DataResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DataResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetContSerialNum()) {
        optionals.set(0);
      }
      if (struct.isSetTitle()) {
        optionals.set(1);
      }
      if (struct.isSetZipSha1()) {
        optionals.set(2);
      }
      if (struct.isSetZipSize()) {
        optionals.set(3);
      }
      if (struct.isSetSigner()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetContSerialNum()) {
        oprot.writeString(struct.contSerialNum);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetZipSha1()) {
        oprot.writeString(struct.zipSha1);
      }
      if (struct.isSetZipSize()) {
        oprot.writeString(struct.zipSize);
      }
      if (struct.isSetSigner()) {
        {
          oprot.writeI32(struct.signer.size());
          for (Map<String,String> _iter29 : struct.signer)
          {
            {
              oprot.writeI32(_iter29.size());
              for (Map.Entry<String, String> _iter30 : _iter29.entrySet())
              {
                oprot.writeString(_iter30.getKey());
                oprot.writeString(_iter30.getValue());
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DataResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.contSerialNum = iprot.readString();
        struct.setContSerialNumIsSet(true);
      }
      if (incoming.get(1)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.zipSha1 = iprot.readString();
        struct.setZipSha1IsSet(true);
      }
      if (incoming.get(3)) {
        struct.zipSize = iprot.readString();
        struct.setZipSizeIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.signer = new ArrayList<Map<String,String>>(_list31.size);
          Map<String,String> _elem32;
          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
          {
            {
              org.apache.thrift.protocol.TMap _map34 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _elem32 = new HashMap<String,String>(2*_map34.size);
              String _key35;
              String _val36;
              for (int _i37 = 0; _i37 < _map34.size; ++_i37)
              {
                _key35 = iprot.readString();
                _val36 = iprot.readString();
                _elem32.put(_key35, _val36);
              }
            }
            struct.signer.add(_elem32);
          }
        }
        struct.setSignerIsSet(true);
      }
    }
  }

}

