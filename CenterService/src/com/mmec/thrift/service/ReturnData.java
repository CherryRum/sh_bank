/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mmec.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-05")
public class ReturnData implements org.apache.thrift.TBase<ReturnData, ReturnData._Fields>, java.io.Serializable, Cloneable, Comparable<ReturnData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReturnData");

  private static final org.apache.thrift.protocol.TField RET_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("retCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESC_EN_FIELD_DESC = new org.apache.thrift.protocol.TField("descEn", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField POJO_FIELD_DESC = new org.apache.thrift.protocol.TField("pojo", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReturnDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReturnDataTupleSchemeFactory());
  }

  public String retCode; // required
  public String desc; // required
  public String descEn; // required
  public String pojo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RET_CODE((short)1, "retCode"),
    DESC((short)2, "desc"),
    DESC_EN((short)3, "descEn"),
    POJO((short)4, "pojo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RET_CODE
          return RET_CODE;
        case 2: // DESC
          return DESC;
        case 3: // DESC_EN
          return DESC_EN;
        case 4: // POJO
          return POJO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RET_CODE, new org.apache.thrift.meta_data.FieldMetaData("retCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC_EN, new org.apache.thrift.meta_data.FieldMetaData("descEn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POJO, new org.apache.thrift.meta_data.FieldMetaData("pojo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReturnData.class, metaDataMap);
  }

  public ReturnData() {
  }

  public ReturnData(
    String retCode,
    String desc,
    String descEn,
    String pojo)
  {
    this();
    this.retCode = retCode;
    this.desc = desc;
    this.descEn = descEn;
    this.pojo = pojo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReturnData(ReturnData other) {
    if (other.isSetRetCode()) {
      this.retCode = other.retCode;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    if (other.isSetDescEn()) {
      this.descEn = other.descEn;
    }
    if (other.isSetPojo()) {
      this.pojo = other.pojo;
    }
  }

  public ReturnData deepCopy() {
    return new ReturnData(this);
  }

  @Override
  public void clear() {
    this.retCode = null;
    this.desc = null;
    this.descEn = null;
    this.pojo = null;
  }

  public String getRetCode() {
    return this.retCode;
  }

  public ReturnData setRetCode(String retCode) {
    this.retCode = retCode;
    return this;
  }

  public void unsetRetCode() {
    this.retCode = null;
  }

  /** Returns true if field retCode is set (has been assigned a value) and false otherwise */
  public boolean isSetRetCode() {
    return this.retCode != null;
  }

  public void setRetCodeIsSet(boolean value) {
    if (!value) {
      this.retCode = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public ReturnData setDesc(String desc) {
    this.desc = desc;
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public String getDescEn() {
    return this.descEn;
  }

  public ReturnData setDescEn(String descEn) {
    this.descEn = descEn;
    return this;
  }

  public void unsetDescEn() {
    this.descEn = null;
  }

  /** Returns true if field descEn is set (has been assigned a value) and false otherwise */
  public boolean isSetDescEn() {
    return this.descEn != null;
  }

  public void setDescEnIsSet(boolean value) {
    if (!value) {
      this.descEn = null;
    }
  }

  public String getPojo() {
    return this.pojo;
  }

  public ReturnData setPojo(String pojo) {
    this.pojo = pojo;
    return this;
  }

  public void unsetPojo() {
    this.pojo = null;
  }

  /** Returns true if field pojo is set (has been assigned a value) and false otherwise */
  public boolean isSetPojo() {
    return this.pojo != null;
  }

  public void setPojoIsSet(boolean value) {
    if (!value) {
      this.pojo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RET_CODE:
      if (value == null) {
        unsetRetCode();
      } else {
        setRetCode((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case DESC_EN:
      if (value == null) {
        unsetDescEn();
      } else {
        setDescEn((String)value);
      }
      break;

    case POJO:
      if (value == null) {
        unsetPojo();
      } else {
        setPojo((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RET_CODE:
      return getRetCode();

    case DESC:
      return getDesc();

    case DESC_EN:
      return getDescEn();

    case POJO:
      return getPojo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RET_CODE:
      return isSetRetCode();
    case DESC:
      return isSetDesc();
    case DESC_EN:
      return isSetDescEn();
    case POJO:
      return isSetPojo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReturnData)
      return this.equals((ReturnData)that);
    return false;
  }

  public boolean equals(ReturnData that) {
    if (that == null)
      return false;

    boolean this_present_retCode = true && this.isSetRetCode();
    boolean that_present_retCode = true && that.isSetRetCode();
    if (this_present_retCode || that_present_retCode) {
      if (!(this_present_retCode && that_present_retCode))
        return false;
      if (!this.retCode.equals(that.retCode))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_descEn = true && this.isSetDescEn();
    boolean that_present_descEn = true && that.isSetDescEn();
    if (this_present_descEn || that_present_descEn) {
      if (!(this_present_descEn && that_present_descEn))
        return false;
      if (!this.descEn.equals(that.descEn))
        return false;
    }

    boolean this_present_pojo = true && this.isSetPojo();
    boolean that_present_pojo = true && that.isSetPojo();
    if (this_present_pojo || that_present_pojo) {
      if (!(this_present_pojo && that_present_pojo))
        return false;
      if (!this.pojo.equals(that.pojo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_retCode = true && (isSetRetCode());
    list.add(present_retCode);
    if (present_retCode)
      list.add(retCode);

    boolean present_desc = true && (isSetDesc());
    list.add(present_desc);
    if (present_desc)
      list.add(desc);

    boolean present_descEn = true && (isSetDescEn());
    list.add(present_descEn);
    if (present_descEn)
      list.add(descEn);

    boolean present_pojo = true && (isSetPojo());
    list.add(present_pojo);
    if (present_pojo)
      list.add(pojo);

    return list.hashCode();
  }

  @Override
  public int compareTo(ReturnData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRetCode()).compareTo(other.isSetRetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retCode, other.retCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescEn()).compareTo(other.isSetDescEn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescEn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descEn, other.descEn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPojo()).compareTo(other.isSetPojo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPojo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pojo, other.pojo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReturnData(");
    boolean first = true;

    sb.append("retCode:");
    if (this.retCode == null) {
      sb.append("null");
    } else {
      sb.append(this.retCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("desc:");
    if (this.desc == null) {
      sb.append("null");
    } else {
      sb.append(this.desc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("descEn:");
    if (this.descEn == null) {
      sb.append("null");
    } else {
      sb.append(this.descEn);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pojo:");
    if (this.pojo == null) {
      sb.append("null");
    } else {
      sb.append(this.pojo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReturnDataStandardSchemeFactory implements SchemeFactory {
    public ReturnDataStandardScheme getScheme() {
      return new ReturnDataStandardScheme();
    }
  }

  private static class ReturnDataStandardScheme extends StandardScheme<ReturnData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReturnData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RET_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.retCode = iprot.readString();
              struct.setRetCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESC_EN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.descEn = iprot.readString();
              struct.setDescEnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // POJO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pojo = iprot.readString();
              struct.setPojoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReturnData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.retCode != null) {
        oprot.writeFieldBegin(RET_CODE_FIELD_DESC);
        oprot.writeString(struct.retCode);
        oprot.writeFieldEnd();
      }
      if (struct.desc != null) {
        oprot.writeFieldBegin(DESC_FIELD_DESC);
        oprot.writeString(struct.desc);
        oprot.writeFieldEnd();
      }
      if (struct.descEn != null) {
        oprot.writeFieldBegin(DESC_EN_FIELD_DESC);
        oprot.writeString(struct.descEn);
        oprot.writeFieldEnd();
      }
      if (struct.pojo != null) {
        oprot.writeFieldBegin(POJO_FIELD_DESC);
        oprot.writeString(struct.pojo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReturnDataTupleSchemeFactory implements SchemeFactory {
    public ReturnDataTupleScheme getScheme() {
      return new ReturnDataTupleScheme();
    }
  }

  private static class ReturnDataTupleScheme extends TupleScheme<ReturnData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReturnData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRetCode()) {
        optionals.set(0);
      }
      if (struct.isSetDesc()) {
        optionals.set(1);
      }
      if (struct.isSetDescEn()) {
        optionals.set(2);
      }
      if (struct.isSetPojo()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetRetCode()) {
        oprot.writeString(struct.retCode);
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetDescEn()) {
        oprot.writeString(struct.descEn);
      }
      if (struct.isSetPojo()) {
        oprot.writeString(struct.pojo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReturnData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.retCode = iprot.readString();
        struct.setRetCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(2)) {
        struct.descEn = iprot.readString();
        struct.setDescEnIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pojo = iprot.readString();
        struct.setPojoIsSet(true);
      }
    }
  }

}

