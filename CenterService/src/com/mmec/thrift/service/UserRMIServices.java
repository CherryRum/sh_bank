/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mmec.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-05-26")
public class UserRMIServices {

  public interface Iface {

    public ReturnData userLogin(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData userRegister(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData userUpdate(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData userActivat(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData userLogOut(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData userQuery(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData certLogin(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData certRegister(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData certQuery(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData certActive(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData certUnbund(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData platformRegister(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData platformVerify(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData platformQuery(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData getCustomByMobile(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData getCompanyByEmail(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData openSigningRoom(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData querySigningRoom(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData closeSigningRoom(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData addChildAccount(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData updateChildAccount(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData stopChildAccount(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData queryChildAccount(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData queryNonYunSignPlatform(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData addSeal(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData querySeal(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData delSeal(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData platformApply(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData platformApplyCheck(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData platformApplyQuery(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData getAllUser(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData bangdingAccountList(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData platformCallbackQuery(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData bangindWx(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData unbundWx(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData getCompanyAccountByMobile(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData getCustomAccountByEmail(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData addMyAttn(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData delMyAttn(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData listMyAttn(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData listCompanyMember(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData changeAppAdmin(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData userQueryByMobile(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData checkCert(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData queryUserExamineStatus(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData synchronizationUserInfo(Map<String,String> datamap) throws org.apache.thrift.TException;

    public ReturnData userRegisterTUNIU(Map<String,String> datamap) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void userLogin(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void userRegister(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void userUpdate(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void userActivat(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void userLogOut(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void userQuery(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void certLogin(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void certRegister(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void certQuery(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void certActive(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void certUnbund(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void platformRegister(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void platformVerify(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void platformQuery(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCustomByMobile(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCompanyByEmail(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void openSigningRoom(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySigningRoom(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void closeSigningRoom(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addChildAccount(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateChildAccount(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void stopChildAccount(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryChildAccount(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryNonYunSignPlatform(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addSeal(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySeal(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delSeal(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void platformApply(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void platformApplyCheck(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void platformApplyQuery(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllUser(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bangdingAccountList(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void platformCallbackQuery(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bangindWx(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void unbundWx(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCompanyAccountByMobile(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCustomAccountByEmail(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addMyAttn(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delMyAttn(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listMyAttn(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listCompanyMember(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void changeAppAdmin(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void userQueryByMobile(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void checkCert(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryUserExamineStatus(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void synchronizationUserInfo(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void userRegisterTUNIU(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ReturnData userLogin(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_userLogin(datamap);
      return recv_userLogin();
    }

    public void send_userLogin(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      userLogin_args args = new userLogin_args();
      args.setDatamap(datamap);
      sendBase("userLogin", args);
    }

    public ReturnData recv_userLogin() throws org.apache.thrift.TException
    {
      userLogin_result result = new userLogin_result();
      receiveBase(result, "userLogin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "userLogin failed: unknown result");
    }

    public ReturnData userRegister(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_userRegister(datamap);
      return recv_userRegister();
    }

    public void send_userRegister(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      userRegister_args args = new userRegister_args();
      args.setDatamap(datamap);
      sendBase("userRegister", args);
    }

    public ReturnData recv_userRegister() throws org.apache.thrift.TException
    {
      userRegister_result result = new userRegister_result();
      receiveBase(result, "userRegister");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "userRegister failed: unknown result");
    }

    public ReturnData userUpdate(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_userUpdate(datamap);
      return recv_userUpdate();
    }

    public void send_userUpdate(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      userUpdate_args args = new userUpdate_args();
      args.setDatamap(datamap);
      sendBase("userUpdate", args);
    }

    public ReturnData recv_userUpdate() throws org.apache.thrift.TException
    {
      userUpdate_result result = new userUpdate_result();
      receiveBase(result, "userUpdate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "userUpdate failed: unknown result");
    }

    public ReturnData userActivat(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_userActivat(datamap);
      return recv_userActivat();
    }

    public void send_userActivat(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      userActivat_args args = new userActivat_args();
      args.setDatamap(datamap);
      sendBase("userActivat", args);
    }

    public ReturnData recv_userActivat() throws org.apache.thrift.TException
    {
      userActivat_result result = new userActivat_result();
      receiveBase(result, "userActivat");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "userActivat failed: unknown result");
    }

    public ReturnData userLogOut(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_userLogOut(datamap);
      return recv_userLogOut();
    }

    public void send_userLogOut(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      userLogOut_args args = new userLogOut_args();
      args.setDatamap(datamap);
      sendBase("userLogOut", args);
    }

    public ReturnData recv_userLogOut() throws org.apache.thrift.TException
    {
      userLogOut_result result = new userLogOut_result();
      receiveBase(result, "userLogOut");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "userLogOut failed: unknown result");
    }

    public ReturnData userQuery(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_userQuery(datamap);
      return recv_userQuery();
    }

    public void send_userQuery(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      userQuery_args args = new userQuery_args();
      args.setDatamap(datamap);
      sendBase("userQuery", args);
    }

    public ReturnData recv_userQuery() throws org.apache.thrift.TException
    {
      userQuery_result result = new userQuery_result();
      receiveBase(result, "userQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "userQuery failed: unknown result");
    }

    public ReturnData certLogin(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_certLogin(datamap);
      return recv_certLogin();
    }

    public void send_certLogin(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      certLogin_args args = new certLogin_args();
      args.setDatamap(datamap);
      sendBase("certLogin", args);
    }

    public ReturnData recv_certLogin() throws org.apache.thrift.TException
    {
      certLogin_result result = new certLogin_result();
      receiveBase(result, "certLogin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "certLogin failed: unknown result");
    }

    public ReturnData certRegister(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_certRegister(datamap);
      return recv_certRegister();
    }

    public void send_certRegister(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      certRegister_args args = new certRegister_args();
      args.setDatamap(datamap);
      sendBase("certRegister", args);
    }

    public ReturnData recv_certRegister() throws org.apache.thrift.TException
    {
      certRegister_result result = new certRegister_result();
      receiveBase(result, "certRegister");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "certRegister failed: unknown result");
    }

    public ReturnData certQuery(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_certQuery(datamap);
      return recv_certQuery();
    }

    public void send_certQuery(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      certQuery_args args = new certQuery_args();
      args.setDatamap(datamap);
      sendBase("certQuery", args);
    }

    public ReturnData recv_certQuery() throws org.apache.thrift.TException
    {
      certQuery_result result = new certQuery_result();
      receiveBase(result, "certQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "certQuery failed: unknown result");
    }

    public ReturnData certActive(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_certActive(datamap);
      return recv_certActive();
    }

    public void send_certActive(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      certActive_args args = new certActive_args();
      args.setDatamap(datamap);
      sendBase("certActive", args);
    }

    public ReturnData recv_certActive() throws org.apache.thrift.TException
    {
      certActive_result result = new certActive_result();
      receiveBase(result, "certActive");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "certActive failed: unknown result");
    }

    public ReturnData certUnbund(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_certUnbund(datamap);
      return recv_certUnbund();
    }

    public void send_certUnbund(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      certUnbund_args args = new certUnbund_args();
      args.setDatamap(datamap);
      sendBase("certUnbund", args);
    }

    public ReturnData recv_certUnbund() throws org.apache.thrift.TException
    {
      certUnbund_result result = new certUnbund_result();
      receiveBase(result, "certUnbund");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "certUnbund failed: unknown result");
    }

    public ReturnData platformRegister(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_platformRegister(datamap);
      return recv_platformRegister();
    }

    public void send_platformRegister(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      platformRegister_args args = new platformRegister_args();
      args.setDatamap(datamap);
      sendBase("platformRegister", args);
    }

    public ReturnData recv_platformRegister() throws org.apache.thrift.TException
    {
      platformRegister_result result = new platformRegister_result();
      receiveBase(result, "platformRegister");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "platformRegister failed: unknown result");
    }

    public ReturnData platformVerify(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_platformVerify(datamap);
      return recv_platformVerify();
    }

    public void send_platformVerify(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      platformVerify_args args = new platformVerify_args();
      args.setDatamap(datamap);
      sendBase("platformVerify", args);
    }

    public ReturnData recv_platformVerify() throws org.apache.thrift.TException
    {
      platformVerify_result result = new platformVerify_result();
      receiveBase(result, "platformVerify");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "platformVerify failed: unknown result");
    }

    public ReturnData platformQuery(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_platformQuery(datamap);
      return recv_platformQuery();
    }

    public void send_platformQuery(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      platformQuery_args args = new platformQuery_args();
      args.setDatamap(datamap);
      sendBase("platformQuery", args);
    }

    public ReturnData recv_platformQuery() throws org.apache.thrift.TException
    {
      platformQuery_result result = new platformQuery_result();
      receiveBase(result, "platformQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "platformQuery failed: unknown result");
    }

    public ReturnData getCustomByMobile(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_getCustomByMobile(datamap);
      return recv_getCustomByMobile();
    }

    public void send_getCustomByMobile(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      getCustomByMobile_args args = new getCustomByMobile_args();
      args.setDatamap(datamap);
      sendBase("getCustomByMobile", args);
    }

    public ReturnData recv_getCustomByMobile() throws org.apache.thrift.TException
    {
      getCustomByMobile_result result = new getCustomByMobile_result();
      receiveBase(result, "getCustomByMobile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCustomByMobile failed: unknown result");
    }

    public ReturnData getCompanyByEmail(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_getCompanyByEmail(datamap);
      return recv_getCompanyByEmail();
    }

    public void send_getCompanyByEmail(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      getCompanyByEmail_args args = new getCompanyByEmail_args();
      args.setDatamap(datamap);
      sendBase("getCompanyByEmail", args);
    }

    public ReturnData recv_getCompanyByEmail() throws org.apache.thrift.TException
    {
      getCompanyByEmail_result result = new getCompanyByEmail_result();
      receiveBase(result, "getCompanyByEmail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCompanyByEmail failed: unknown result");
    }

    public ReturnData openSigningRoom(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_openSigningRoom(datamap);
      return recv_openSigningRoom();
    }

    public void send_openSigningRoom(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      openSigningRoom_args args = new openSigningRoom_args();
      args.setDatamap(datamap);
      sendBase("openSigningRoom", args);
    }

    public ReturnData recv_openSigningRoom() throws org.apache.thrift.TException
    {
      openSigningRoom_result result = new openSigningRoom_result();
      receiveBase(result, "openSigningRoom");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "openSigningRoom failed: unknown result");
    }

    public ReturnData querySigningRoom(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_querySigningRoom(datamap);
      return recv_querySigningRoom();
    }

    public void send_querySigningRoom(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      querySigningRoom_args args = new querySigningRoom_args();
      args.setDatamap(datamap);
      sendBase("querySigningRoom", args);
    }

    public ReturnData recv_querySigningRoom() throws org.apache.thrift.TException
    {
      querySigningRoom_result result = new querySigningRoom_result();
      receiveBase(result, "querySigningRoom");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySigningRoom failed: unknown result");
    }

    public ReturnData closeSigningRoom(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_closeSigningRoom(datamap);
      return recv_closeSigningRoom();
    }

    public void send_closeSigningRoom(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      closeSigningRoom_args args = new closeSigningRoom_args();
      args.setDatamap(datamap);
      sendBase("closeSigningRoom", args);
    }

    public ReturnData recv_closeSigningRoom() throws org.apache.thrift.TException
    {
      closeSigningRoom_result result = new closeSigningRoom_result();
      receiveBase(result, "closeSigningRoom");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "closeSigningRoom failed: unknown result");
    }

    public ReturnData addChildAccount(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_addChildAccount(datamap);
      return recv_addChildAccount();
    }

    public void send_addChildAccount(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      addChildAccount_args args = new addChildAccount_args();
      args.setDatamap(datamap);
      sendBase("addChildAccount", args);
    }

    public ReturnData recv_addChildAccount() throws org.apache.thrift.TException
    {
      addChildAccount_result result = new addChildAccount_result();
      receiveBase(result, "addChildAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addChildAccount failed: unknown result");
    }

    public ReturnData updateChildAccount(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_updateChildAccount(datamap);
      return recv_updateChildAccount();
    }

    public void send_updateChildAccount(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      updateChildAccount_args args = new updateChildAccount_args();
      args.setDatamap(datamap);
      sendBase("updateChildAccount", args);
    }

    public ReturnData recv_updateChildAccount() throws org.apache.thrift.TException
    {
      updateChildAccount_result result = new updateChildAccount_result();
      receiveBase(result, "updateChildAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateChildAccount failed: unknown result");
    }

    public ReturnData stopChildAccount(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_stopChildAccount(datamap);
      return recv_stopChildAccount();
    }

    public void send_stopChildAccount(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      stopChildAccount_args args = new stopChildAccount_args();
      args.setDatamap(datamap);
      sendBase("stopChildAccount", args);
    }

    public ReturnData recv_stopChildAccount() throws org.apache.thrift.TException
    {
      stopChildAccount_result result = new stopChildAccount_result();
      receiveBase(result, "stopChildAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "stopChildAccount failed: unknown result");
    }

    public ReturnData queryChildAccount(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_queryChildAccount(datamap);
      return recv_queryChildAccount();
    }

    public void send_queryChildAccount(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      queryChildAccount_args args = new queryChildAccount_args();
      args.setDatamap(datamap);
      sendBase("queryChildAccount", args);
    }

    public ReturnData recv_queryChildAccount() throws org.apache.thrift.TException
    {
      queryChildAccount_result result = new queryChildAccount_result();
      receiveBase(result, "queryChildAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryChildAccount failed: unknown result");
    }

    public ReturnData queryNonYunSignPlatform(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_queryNonYunSignPlatform(datamap);
      return recv_queryNonYunSignPlatform();
    }

    public void send_queryNonYunSignPlatform(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      queryNonYunSignPlatform_args args = new queryNonYunSignPlatform_args();
      args.setDatamap(datamap);
      sendBase("queryNonYunSignPlatform", args);
    }

    public ReturnData recv_queryNonYunSignPlatform() throws org.apache.thrift.TException
    {
      queryNonYunSignPlatform_result result = new queryNonYunSignPlatform_result();
      receiveBase(result, "queryNonYunSignPlatform");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryNonYunSignPlatform failed: unknown result");
    }

    public ReturnData addSeal(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_addSeal(datamap);
      return recv_addSeal();
    }

    public void send_addSeal(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      addSeal_args args = new addSeal_args();
      args.setDatamap(datamap);
      sendBase("addSeal", args);
    }

    public ReturnData recv_addSeal() throws org.apache.thrift.TException
    {
      addSeal_result result = new addSeal_result();
      receiveBase(result, "addSeal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addSeal failed: unknown result");
    }

    public ReturnData querySeal(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_querySeal(datamap);
      return recv_querySeal();
    }

    public void send_querySeal(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      querySeal_args args = new querySeal_args();
      args.setDatamap(datamap);
      sendBase("querySeal", args);
    }

    public ReturnData recv_querySeal() throws org.apache.thrift.TException
    {
      querySeal_result result = new querySeal_result();
      receiveBase(result, "querySeal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySeal failed: unknown result");
    }

    public ReturnData delSeal(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_delSeal(datamap);
      return recv_delSeal();
    }

    public void send_delSeal(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      delSeal_args args = new delSeal_args();
      args.setDatamap(datamap);
      sendBase("delSeal", args);
    }

    public ReturnData recv_delSeal() throws org.apache.thrift.TException
    {
      delSeal_result result = new delSeal_result();
      receiveBase(result, "delSeal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delSeal failed: unknown result");
    }

    public ReturnData platformApply(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_platformApply(datamap);
      return recv_platformApply();
    }

    public void send_platformApply(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      platformApply_args args = new platformApply_args();
      args.setDatamap(datamap);
      sendBase("platformApply", args);
    }

    public ReturnData recv_platformApply() throws org.apache.thrift.TException
    {
      platformApply_result result = new platformApply_result();
      receiveBase(result, "platformApply");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "platformApply failed: unknown result");
    }

    public ReturnData platformApplyCheck(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_platformApplyCheck(datamap);
      return recv_platformApplyCheck();
    }

    public void send_platformApplyCheck(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      platformApplyCheck_args args = new platformApplyCheck_args();
      args.setDatamap(datamap);
      sendBase("platformApplyCheck", args);
    }

    public ReturnData recv_platformApplyCheck() throws org.apache.thrift.TException
    {
      platformApplyCheck_result result = new platformApplyCheck_result();
      receiveBase(result, "platformApplyCheck");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "platformApplyCheck failed: unknown result");
    }

    public ReturnData platformApplyQuery(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_platformApplyQuery(datamap);
      return recv_platformApplyQuery();
    }

    public void send_platformApplyQuery(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      platformApplyQuery_args args = new platformApplyQuery_args();
      args.setDatamap(datamap);
      sendBase("platformApplyQuery", args);
    }

    public ReturnData recv_platformApplyQuery() throws org.apache.thrift.TException
    {
      platformApplyQuery_result result = new platformApplyQuery_result();
      receiveBase(result, "platformApplyQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "platformApplyQuery failed: unknown result");
    }

    public ReturnData getAllUser(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_getAllUser(datamap);
      return recv_getAllUser();
    }

    public void send_getAllUser(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      getAllUser_args args = new getAllUser_args();
      args.setDatamap(datamap);
      sendBase("getAllUser", args);
    }

    public ReturnData recv_getAllUser() throws org.apache.thrift.TException
    {
      getAllUser_result result = new getAllUser_result();
      receiveBase(result, "getAllUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllUser failed: unknown result");
    }

    public ReturnData bangdingAccountList(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_bangdingAccountList(datamap);
      return recv_bangdingAccountList();
    }

    public void send_bangdingAccountList(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      bangdingAccountList_args args = new bangdingAccountList_args();
      args.setDatamap(datamap);
      sendBase("bangdingAccountList", args);
    }

    public ReturnData recv_bangdingAccountList() throws org.apache.thrift.TException
    {
      bangdingAccountList_result result = new bangdingAccountList_result();
      receiveBase(result, "bangdingAccountList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bangdingAccountList failed: unknown result");
    }

    public ReturnData platformCallbackQuery(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_platformCallbackQuery(datamap);
      return recv_platformCallbackQuery();
    }

    public void send_platformCallbackQuery(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      platformCallbackQuery_args args = new platformCallbackQuery_args();
      args.setDatamap(datamap);
      sendBase("platformCallbackQuery", args);
    }

    public ReturnData recv_platformCallbackQuery() throws org.apache.thrift.TException
    {
      platformCallbackQuery_result result = new platformCallbackQuery_result();
      receiveBase(result, "platformCallbackQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "platformCallbackQuery failed: unknown result");
    }

    public ReturnData bangindWx(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_bangindWx(datamap);
      return recv_bangindWx();
    }

    public void send_bangindWx(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      bangindWx_args args = new bangindWx_args();
      args.setDatamap(datamap);
      sendBase("bangindWx", args);
    }

    public ReturnData recv_bangindWx() throws org.apache.thrift.TException
    {
      bangindWx_result result = new bangindWx_result();
      receiveBase(result, "bangindWx");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bangindWx failed: unknown result");
    }

    public ReturnData unbundWx(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_unbundWx(datamap);
      return recv_unbundWx();
    }

    public void send_unbundWx(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      unbundWx_args args = new unbundWx_args();
      args.setDatamap(datamap);
      sendBase("unbundWx", args);
    }

    public ReturnData recv_unbundWx() throws org.apache.thrift.TException
    {
      unbundWx_result result = new unbundWx_result();
      receiveBase(result, "unbundWx");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "unbundWx failed: unknown result");
    }

    public ReturnData getCompanyAccountByMobile(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_getCompanyAccountByMobile(datamap);
      return recv_getCompanyAccountByMobile();
    }

    public void send_getCompanyAccountByMobile(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      getCompanyAccountByMobile_args args = new getCompanyAccountByMobile_args();
      args.setDatamap(datamap);
      sendBase("getCompanyAccountByMobile", args);
    }

    public ReturnData recv_getCompanyAccountByMobile() throws org.apache.thrift.TException
    {
      getCompanyAccountByMobile_result result = new getCompanyAccountByMobile_result();
      receiveBase(result, "getCompanyAccountByMobile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCompanyAccountByMobile failed: unknown result");
    }

    public ReturnData getCustomAccountByEmail(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_getCustomAccountByEmail(datamap);
      return recv_getCustomAccountByEmail();
    }

    public void send_getCustomAccountByEmail(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      getCustomAccountByEmail_args args = new getCustomAccountByEmail_args();
      args.setDatamap(datamap);
      sendBase("getCustomAccountByEmail", args);
    }

    public ReturnData recv_getCustomAccountByEmail() throws org.apache.thrift.TException
    {
      getCustomAccountByEmail_result result = new getCustomAccountByEmail_result();
      receiveBase(result, "getCustomAccountByEmail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCustomAccountByEmail failed: unknown result");
    }

    public ReturnData addMyAttn(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_addMyAttn(datamap);
      return recv_addMyAttn();
    }

    public void send_addMyAttn(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      addMyAttn_args args = new addMyAttn_args();
      args.setDatamap(datamap);
      sendBase("addMyAttn", args);
    }

    public ReturnData recv_addMyAttn() throws org.apache.thrift.TException
    {
      addMyAttn_result result = new addMyAttn_result();
      receiveBase(result, "addMyAttn");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addMyAttn failed: unknown result");
    }

    public ReturnData delMyAttn(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_delMyAttn(datamap);
      return recv_delMyAttn();
    }

    public void send_delMyAttn(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      delMyAttn_args args = new delMyAttn_args();
      args.setDatamap(datamap);
      sendBase("delMyAttn", args);
    }

    public ReturnData recv_delMyAttn() throws org.apache.thrift.TException
    {
      delMyAttn_result result = new delMyAttn_result();
      receiveBase(result, "delMyAttn");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delMyAttn failed: unknown result");
    }

    public ReturnData listMyAttn(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_listMyAttn(datamap);
      return recv_listMyAttn();
    }

    public void send_listMyAttn(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      listMyAttn_args args = new listMyAttn_args();
      args.setDatamap(datamap);
      sendBase("listMyAttn", args);
    }

    public ReturnData recv_listMyAttn() throws org.apache.thrift.TException
    {
      listMyAttn_result result = new listMyAttn_result();
      receiveBase(result, "listMyAttn");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listMyAttn failed: unknown result");
    }

    public ReturnData listCompanyMember(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_listCompanyMember(datamap);
      return recv_listCompanyMember();
    }

    public void send_listCompanyMember(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      listCompanyMember_args args = new listCompanyMember_args();
      args.setDatamap(datamap);
      sendBase("listCompanyMember", args);
    }

    public ReturnData recv_listCompanyMember() throws org.apache.thrift.TException
    {
      listCompanyMember_result result = new listCompanyMember_result();
      receiveBase(result, "listCompanyMember");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listCompanyMember failed: unknown result");
    }

    public ReturnData changeAppAdmin(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_changeAppAdmin(datamap);
      return recv_changeAppAdmin();
    }

    public void send_changeAppAdmin(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      changeAppAdmin_args args = new changeAppAdmin_args();
      args.setDatamap(datamap);
      sendBase("changeAppAdmin", args);
    }

    public ReturnData recv_changeAppAdmin() throws org.apache.thrift.TException
    {
      changeAppAdmin_result result = new changeAppAdmin_result();
      receiveBase(result, "changeAppAdmin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "changeAppAdmin failed: unknown result");
    }

    public ReturnData userQueryByMobile(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_userQueryByMobile(datamap);
      return recv_userQueryByMobile();
    }

    public void send_userQueryByMobile(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      userQueryByMobile_args args = new userQueryByMobile_args();
      args.setDatamap(datamap);
      sendBase("userQueryByMobile", args);
    }

    public ReturnData recv_userQueryByMobile() throws org.apache.thrift.TException
    {
      userQueryByMobile_result result = new userQueryByMobile_result();
      receiveBase(result, "userQueryByMobile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "userQueryByMobile failed: unknown result");
    }

    public ReturnData checkCert(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_checkCert(datamap);
      return recv_checkCert();
    }

    public void send_checkCert(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      checkCert_args args = new checkCert_args();
      args.setDatamap(datamap);
      sendBase("checkCert", args);
    }

    public ReturnData recv_checkCert() throws org.apache.thrift.TException
    {
      checkCert_result result = new checkCert_result();
      receiveBase(result, "checkCert");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkCert failed: unknown result");
    }

    public ReturnData queryUserExamineStatus(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_queryUserExamineStatus(datamap);
      return recv_queryUserExamineStatus();
    }

    public void send_queryUserExamineStatus(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      queryUserExamineStatus_args args = new queryUserExamineStatus_args();
      args.setDatamap(datamap);
      sendBase("queryUserExamineStatus", args);
    }

    public ReturnData recv_queryUserExamineStatus() throws org.apache.thrift.TException
    {
      queryUserExamineStatus_result result = new queryUserExamineStatus_result();
      receiveBase(result, "queryUserExamineStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryUserExamineStatus failed: unknown result");
    }

    public ReturnData synchronizationUserInfo(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_synchronizationUserInfo(datamap);
      return recv_synchronizationUserInfo();
    }

    public void send_synchronizationUserInfo(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      synchronizationUserInfo_args args = new synchronizationUserInfo_args();
      args.setDatamap(datamap);
      sendBase("synchronizationUserInfo", args);
    }

    public ReturnData recv_synchronizationUserInfo() throws org.apache.thrift.TException
    {
      synchronizationUserInfo_result result = new synchronizationUserInfo_result();
      receiveBase(result, "synchronizationUserInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "synchronizationUserInfo failed: unknown result");
    }

    public ReturnData userRegisterTUNIU(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      send_userRegisterTUNIU(datamap);
      return recv_userRegisterTUNIU();
    }

    public void send_userRegisterTUNIU(Map<String,String> datamap) throws org.apache.thrift.TException
    {
      userRegisterTUNIU_args args = new userRegisterTUNIU_args();
      args.setDatamap(datamap);
      sendBase("userRegisterTUNIU", args);
    }

    public ReturnData recv_userRegisterTUNIU() throws org.apache.thrift.TException
    {
      userRegisterTUNIU_result result = new userRegisterTUNIU_result();
      receiveBase(result, "userRegisterTUNIU");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "userRegisterTUNIU failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void userLogin(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      userLogin_call method_call = new userLogin_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class userLogin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public userLogin_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("userLogin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        userLogin_args args = new userLogin_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_userLogin();
      }
    }

    public void userRegister(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      userRegister_call method_call = new userRegister_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class userRegister_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public userRegister_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("userRegister", org.apache.thrift.protocol.TMessageType.CALL, 0));
        userRegister_args args = new userRegister_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_userRegister();
      }
    }

    public void userUpdate(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      userUpdate_call method_call = new userUpdate_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class userUpdate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public userUpdate_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("userUpdate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        userUpdate_args args = new userUpdate_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_userUpdate();
      }
    }

    public void userActivat(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      userActivat_call method_call = new userActivat_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class userActivat_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public userActivat_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("userActivat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        userActivat_args args = new userActivat_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_userActivat();
      }
    }

    public void userLogOut(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      userLogOut_call method_call = new userLogOut_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class userLogOut_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public userLogOut_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("userLogOut", org.apache.thrift.protocol.TMessageType.CALL, 0));
        userLogOut_args args = new userLogOut_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_userLogOut();
      }
    }

    public void userQuery(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      userQuery_call method_call = new userQuery_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class userQuery_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public userQuery_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("userQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        userQuery_args args = new userQuery_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_userQuery();
      }
    }

    public void certLogin(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      certLogin_call method_call = new certLogin_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class certLogin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public certLogin_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("certLogin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        certLogin_args args = new certLogin_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_certLogin();
      }
    }

    public void certRegister(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      certRegister_call method_call = new certRegister_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class certRegister_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public certRegister_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("certRegister", org.apache.thrift.protocol.TMessageType.CALL, 0));
        certRegister_args args = new certRegister_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_certRegister();
      }
    }

    public void certQuery(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      certQuery_call method_call = new certQuery_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class certQuery_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public certQuery_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("certQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        certQuery_args args = new certQuery_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_certQuery();
      }
    }

    public void certActive(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      certActive_call method_call = new certActive_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class certActive_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public certActive_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("certActive", org.apache.thrift.protocol.TMessageType.CALL, 0));
        certActive_args args = new certActive_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_certActive();
      }
    }

    public void certUnbund(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      certUnbund_call method_call = new certUnbund_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class certUnbund_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public certUnbund_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("certUnbund", org.apache.thrift.protocol.TMessageType.CALL, 0));
        certUnbund_args args = new certUnbund_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_certUnbund();
      }
    }

    public void platformRegister(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      platformRegister_call method_call = new platformRegister_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class platformRegister_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public platformRegister_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("platformRegister", org.apache.thrift.protocol.TMessageType.CALL, 0));
        platformRegister_args args = new platformRegister_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_platformRegister();
      }
    }

    public void platformVerify(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      platformVerify_call method_call = new platformVerify_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class platformVerify_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public platformVerify_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("platformVerify", org.apache.thrift.protocol.TMessageType.CALL, 0));
        platformVerify_args args = new platformVerify_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_platformVerify();
      }
    }

    public void platformQuery(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      platformQuery_call method_call = new platformQuery_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class platformQuery_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public platformQuery_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("platformQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        platformQuery_args args = new platformQuery_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_platformQuery();
      }
    }

    public void getCustomByMobile(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCustomByMobile_call method_call = new getCustomByMobile_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCustomByMobile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public getCustomByMobile_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCustomByMobile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCustomByMobile_args args = new getCustomByMobile_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCustomByMobile();
      }
    }

    public void getCompanyByEmail(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCompanyByEmail_call method_call = new getCompanyByEmail_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCompanyByEmail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public getCompanyByEmail_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCompanyByEmail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCompanyByEmail_args args = new getCompanyByEmail_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCompanyByEmail();
      }
    }

    public void openSigningRoom(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      openSigningRoom_call method_call = new openSigningRoom_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class openSigningRoom_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public openSigningRoom_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("openSigningRoom", org.apache.thrift.protocol.TMessageType.CALL, 0));
        openSigningRoom_args args = new openSigningRoom_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_openSigningRoom();
      }
    }

    public void querySigningRoom(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySigningRoom_call method_call = new querySigningRoom_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySigningRoom_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public querySigningRoom_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySigningRoom", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySigningRoom_args args = new querySigningRoom_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySigningRoom();
      }
    }

    public void closeSigningRoom(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      closeSigningRoom_call method_call = new closeSigningRoom_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class closeSigningRoom_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public closeSigningRoom_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("closeSigningRoom", org.apache.thrift.protocol.TMessageType.CALL, 0));
        closeSigningRoom_args args = new closeSigningRoom_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_closeSigningRoom();
      }
    }

    public void addChildAccount(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addChildAccount_call method_call = new addChildAccount_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addChildAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public addChildAccount_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addChildAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addChildAccount_args args = new addChildAccount_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addChildAccount();
      }
    }

    public void updateChildAccount(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateChildAccount_call method_call = new updateChildAccount_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateChildAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public updateChildAccount_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateChildAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateChildAccount_args args = new updateChildAccount_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateChildAccount();
      }
    }

    public void stopChildAccount(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stopChildAccount_call method_call = new stopChildAccount_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stopChildAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public stopChildAccount_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stopChildAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stopChildAccount_args args = new stopChildAccount_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_stopChildAccount();
      }
    }

    public void queryChildAccount(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryChildAccount_call method_call = new queryChildAccount_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryChildAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public queryChildAccount_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryChildAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryChildAccount_args args = new queryChildAccount_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryChildAccount();
      }
    }

    public void queryNonYunSignPlatform(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryNonYunSignPlatform_call method_call = new queryNonYunSignPlatform_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryNonYunSignPlatform_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public queryNonYunSignPlatform_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryNonYunSignPlatform", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryNonYunSignPlatform_args args = new queryNonYunSignPlatform_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryNonYunSignPlatform();
      }
    }

    public void addSeal(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addSeal_call method_call = new addSeal_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addSeal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public addSeal_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addSeal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addSeal_args args = new addSeal_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addSeal();
      }
    }

    public void querySeal(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySeal_call method_call = new querySeal_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySeal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public querySeal_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySeal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySeal_args args = new querySeal_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySeal();
      }
    }

    public void delSeal(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delSeal_call method_call = new delSeal_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delSeal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public delSeal_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delSeal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delSeal_args args = new delSeal_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delSeal();
      }
    }

    public void platformApply(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      platformApply_call method_call = new platformApply_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class platformApply_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public platformApply_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("platformApply", org.apache.thrift.protocol.TMessageType.CALL, 0));
        platformApply_args args = new platformApply_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_platformApply();
      }
    }

    public void platformApplyCheck(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      platformApplyCheck_call method_call = new platformApplyCheck_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class platformApplyCheck_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public platformApplyCheck_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("platformApplyCheck", org.apache.thrift.protocol.TMessageType.CALL, 0));
        platformApplyCheck_args args = new platformApplyCheck_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_platformApplyCheck();
      }
    }

    public void platformApplyQuery(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      platformApplyQuery_call method_call = new platformApplyQuery_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class platformApplyQuery_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public platformApplyQuery_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("platformApplyQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        platformApplyQuery_args args = new platformApplyQuery_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_platformApplyQuery();
      }
    }

    public void getAllUser(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllUser_call method_call = new getAllUser_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public getAllUser_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllUser_args args = new getAllUser_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllUser();
      }
    }

    public void bangdingAccountList(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bangdingAccountList_call method_call = new bangdingAccountList_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bangdingAccountList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public bangdingAccountList_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bangdingAccountList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bangdingAccountList_args args = new bangdingAccountList_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bangdingAccountList();
      }
    }

    public void platformCallbackQuery(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      platformCallbackQuery_call method_call = new platformCallbackQuery_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class platformCallbackQuery_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public platformCallbackQuery_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("platformCallbackQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        platformCallbackQuery_args args = new platformCallbackQuery_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_platformCallbackQuery();
      }
    }

    public void bangindWx(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bangindWx_call method_call = new bangindWx_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bangindWx_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public bangindWx_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bangindWx", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bangindWx_args args = new bangindWx_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bangindWx();
      }
    }

    public void unbundWx(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unbundWx_call method_call = new unbundWx_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class unbundWx_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public unbundWx_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unbundWx", org.apache.thrift.protocol.TMessageType.CALL, 0));
        unbundWx_args args = new unbundWx_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_unbundWx();
      }
    }

    public void getCompanyAccountByMobile(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCompanyAccountByMobile_call method_call = new getCompanyAccountByMobile_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCompanyAccountByMobile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public getCompanyAccountByMobile_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCompanyAccountByMobile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCompanyAccountByMobile_args args = new getCompanyAccountByMobile_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCompanyAccountByMobile();
      }
    }

    public void getCustomAccountByEmail(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCustomAccountByEmail_call method_call = new getCustomAccountByEmail_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCustomAccountByEmail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public getCustomAccountByEmail_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCustomAccountByEmail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCustomAccountByEmail_args args = new getCustomAccountByEmail_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCustomAccountByEmail();
      }
    }

    public void addMyAttn(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addMyAttn_call method_call = new addMyAttn_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addMyAttn_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public addMyAttn_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addMyAttn", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addMyAttn_args args = new addMyAttn_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addMyAttn();
      }
    }

    public void delMyAttn(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delMyAttn_call method_call = new delMyAttn_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delMyAttn_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public delMyAttn_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delMyAttn", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delMyAttn_args args = new delMyAttn_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delMyAttn();
      }
    }

    public void listMyAttn(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listMyAttn_call method_call = new listMyAttn_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listMyAttn_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public listMyAttn_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listMyAttn", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listMyAttn_args args = new listMyAttn_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listMyAttn();
      }
    }

    public void listCompanyMember(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listCompanyMember_call method_call = new listCompanyMember_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listCompanyMember_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public listCompanyMember_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listCompanyMember", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listCompanyMember_args args = new listCompanyMember_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listCompanyMember();
      }
    }

    public void changeAppAdmin(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      changeAppAdmin_call method_call = new changeAppAdmin_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class changeAppAdmin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public changeAppAdmin_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("changeAppAdmin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        changeAppAdmin_args args = new changeAppAdmin_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_changeAppAdmin();
      }
    }

    public void userQueryByMobile(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      userQueryByMobile_call method_call = new userQueryByMobile_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class userQueryByMobile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public userQueryByMobile_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("userQueryByMobile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        userQueryByMobile_args args = new userQueryByMobile_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_userQueryByMobile();
      }
    }

    public void checkCert(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkCert_call method_call = new checkCert_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkCert_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public checkCert_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkCert", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkCert_args args = new checkCert_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkCert();
      }
    }

    public void queryUserExamineStatus(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryUserExamineStatus_call method_call = new queryUserExamineStatus_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryUserExamineStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public queryUserExamineStatus_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryUserExamineStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryUserExamineStatus_args args = new queryUserExamineStatus_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryUserExamineStatus();
      }
    }

    public void synchronizationUserInfo(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      synchronizationUserInfo_call method_call = new synchronizationUserInfo_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class synchronizationUserInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public synchronizationUserInfo_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("synchronizationUserInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        synchronizationUserInfo_args args = new synchronizationUserInfo_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_synchronizationUserInfo();
      }
    }

    public void userRegisterTUNIU(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      userRegisterTUNIU_call method_call = new userRegisterTUNIU_call(datamap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class userRegisterTUNIU_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> datamap;
      public userRegisterTUNIU_call(Map<String,String> datamap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datamap = datamap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("userRegisterTUNIU", org.apache.thrift.protocol.TMessageType.CALL, 0));
        userRegisterTUNIU_args args = new userRegisterTUNIU_args();
        args.setDatamap(datamap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_userRegisterTUNIU();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("userLogin", new userLogin());
      processMap.put("userRegister", new userRegister());
      processMap.put("userUpdate", new userUpdate());
      processMap.put("userActivat", new userActivat());
      processMap.put("userLogOut", new userLogOut());
      processMap.put("userQuery", new userQuery());
      processMap.put("certLogin", new certLogin());
      processMap.put("certRegister", new certRegister());
      processMap.put("certQuery", new certQuery());
      processMap.put("certActive", new certActive());
      processMap.put("certUnbund", new certUnbund());
      processMap.put("platformRegister", new platformRegister());
      processMap.put("platformVerify", new platformVerify());
      processMap.put("platformQuery", new platformQuery());
      processMap.put("getCustomByMobile", new getCustomByMobile());
      processMap.put("getCompanyByEmail", new getCompanyByEmail());
      processMap.put("openSigningRoom", new openSigningRoom());
      processMap.put("querySigningRoom", new querySigningRoom());
      processMap.put("closeSigningRoom", new closeSigningRoom());
      processMap.put("addChildAccount", new addChildAccount());
      processMap.put("updateChildAccount", new updateChildAccount());
      processMap.put("stopChildAccount", new stopChildAccount());
      processMap.put("queryChildAccount", new queryChildAccount());
      processMap.put("queryNonYunSignPlatform", new queryNonYunSignPlatform());
      processMap.put("addSeal", new addSeal());
      processMap.put("querySeal", new querySeal());
      processMap.put("delSeal", new delSeal());
      processMap.put("platformApply", new platformApply());
      processMap.put("platformApplyCheck", new platformApplyCheck());
      processMap.put("platformApplyQuery", new platformApplyQuery());
      processMap.put("getAllUser", new getAllUser());
      processMap.put("bangdingAccountList", new bangdingAccountList());
      processMap.put("platformCallbackQuery", new platformCallbackQuery());
      processMap.put("bangindWx", new bangindWx());
      processMap.put("unbundWx", new unbundWx());
      processMap.put("getCompanyAccountByMobile", new getCompanyAccountByMobile());
      processMap.put("getCustomAccountByEmail", new getCustomAccountByEmail());
      processMap.put("addMyAttn", new addMyAttn());
      processMap.put("delMyAttn", new delMyAttn());
      processMap.put("listMyAttn", new listMyAttn());
      processMap.put("listCompanyMember", new listCompanyMember());
      processMap.put("changeAppAdmin", new changeAppAdmin());
      processMap.put("userQueryByMobile", new userQueryByMobile());
      processMap.put("checkCert", new checkCert());
      processMap.put("queryUserExamineStatus", new queryUserExamineStatus());
      processMap.put("synchronizationUserInfo", new synchronizationUserInfo());
      processMap.put("userRegisterTUNIU", new userRegisterTUNIU());
      return processMap;
    }

    public static class userLogin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, userLogin_args> {
      public userLogin() {
        super("userLogin");
      }

      public userLogin_args getEmptyArgsInstance() {
        return new userLogin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public userLogin_result getResult(I iface, userLogin_args args) throws org.apache.thrift.TException {
        userLogin_result result = new userLogin_result();
        result.success = iface.userLogin(args.datamap);
        return result;
      }
    }

    public static class userRegister<I extends Iface> extends org.apache.thrift.ProcessFunction<I, userRegister_args> {
      public userRegister() {
        super("userRegister");
      }

      public userRegister_args getEmptyArgsInstance() {
        return new userRegister_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public userRegister_result getResult(I iface, userRegister_args args) throws org.apache.thrift.TException {
        userRegister_result result = new userRegister_result();
        result.success = iface.userRegister(args.datamap);
        return result;
      }
    }

    public static class userUpdate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, userUpdate_args> {
      public userUpdate() {
        super("userUpdate");
      }

      public userUpdate_args getEmptyArgsInstance() {
        return new userUpdate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public userUpdate_result getResult(I iface, userUpdate_args args) throws org.apache.thrift.TException {
        userUpdate_result result = new userUpdate_result();
        result.success = iface.userUpdate(args.datamap);
        return result;
      }
    }

    public static class userActivat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, userActivat_args> {
      public userActivat() {
        super("userActivat");
      }

      public userActivat_args getEmptyArgsInstance() {
        return new userActivat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public userActivat_result getResult(I iface, userActivat_args args) throws org.apache.thrift.TException {
        userActivat_result result = new userActivat_result();
        result.success = iface.userActivat(args.datamap);
        return result;
      }
    }

    public static class userLogOut<I extends Iface> extends org.apache.thrift.ProcessFunction<I, userLogOut_args> {
      public userLogOut() {
        super("userLogOut");
      }

      public userLogOut_args getEmptyArgsInstance() {
        return new userLogOut_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public userLogOut_result getResult(I iface, userLogOut_args args) throws org.apache.thrift.TException {
        userLogOut_result result = new userLogOut_result();
        result.success = iface.userLogOut(args.datamap);
        return result;
      }
    }

    public static class userQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, userQuery_args> {
      public userQuery() {
        super("userQuery");
      }

      public userQuery_args getEmptyArgsInstance() {
        return new userQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public userQuery_result getResult(I iface, userQuery_args args) throws org.apache.thrift.TException {
        userQuery_result result = new userQuery_result();
        result.success = iface.userQuery(args.datamap);
        return result;
      }
    }

    public static class certLogin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, certLogin_args> {
      public certLogin() {
        super("certLogin");
      }

      public certLogin_args getEmptyArgsInstance() {
        return new certLogin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public certLogin_result getResult(I iface, certLogin_args args) throws org.apache.thrift.TException {
        certLogin_result result = new certLogin_result();
        result.success = iface.certLogin(args.datamap);
        return result;
      }
    }

    public static class certRegister<I extends Iface> extends org.apache.thrift.ProcessFunction<I, certRegister_args> {
      public certRegister() {
        super("certRegister");
      }

      public certRegister_args getEmptyArgsInstance() {
        return new certRegister_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public certRegister_result getResult(I iface, certRegister_args args) throws org.apache.thrift.TException {
        certRegister_result result = new certRegister_result();
        result.success = iface.certRegister(args.datamap);
        return result;
      }
    }

    public static class certQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, certQuery_args> {
      public certQuery() {
        super("certQuery");
      }

      public certQuery_args getEmptyArgsInstance() {
        return new certQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public certQuery_result getResult(I iface, certQuery_args args) throws org.apache.thrift.TException {
        certQuery_result result = new certQuery_result();
        result.success = iface.certQuery(args.datamap);
        return result;
      }
    }

    public static class certActive<I extends Iface> extends org.apache.thrift.ProcessFunction<I, certActive_args> {
      public certActive() {
        super("certActive");
      }

      public certActive_args getEmptyArgsInstance() {
        return new certActive_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public certActive_result getResult(I iface, certActive_args args) throws org.apache.thrift.TException {
        certActive_result result = new certActive_result();
        result.success = iface.certActive(args.datamap);
        return result;
      }
    }

    public static class certUnbund<I extends Iface> extends org.apache.thrift.ProcessFunction<I, certUnbund_args> {
      public certUnbund() {
        super("certUnbund");
      }

      public certUnbund_args getEmptyArgsInstance() {
        return new certUnbund_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public certUnbund_result getResult(I iface, certUnbund_args args) throws org.apache.thrift.TException {
        certUnbund_result result = new certUnbund_result();
        result.success = iface.certUnbund(args.datamap);
        return result;
      }
    }

    public static class platformRegister<I extends Iface> extends org.apache.thrift.ProcessFunction<I, platformRegister_args> {
      public platformRegister() {
        super("platformRegister");
      }

      public platformRegister_args getEmptyArgsInstance() {
        return new platformRegister_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public platformRegister_result getResult(I iface, platformRegister_args args) throws org.apache.thrift.TException {
        platformRegister_result result = new platformRegister_result();
        result.success = iface.platformRegister(args.datamap);
        return result;
      }
    }

    public static class platformVerify<I extends Iface> extends org.apache.thrift.ProcessFunction<I, platformVerify_args> {
      public platformVerify() {
        super("platformVerify");
      }

      public platformVerify_args getEmptyArgsInstance() {
        return new platformVerify_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public platformVerify_result getResult(I iface, platformVerify_args args) throws org.apache.thrift.TException {
        platformVerify_result result = new platformVerify_result();
        result.success = iface.platformVerify(args.datamap);
        return result;
      }
    }

    public static class platformQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, platformQuery_args> {
      public platformQuery() {
        super("platformQuery");
      }

      public platformQuery_args getEmptyArgsInstance() {
        return new platformQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public platformQuery_result getResult(I iface, platformQuery_args args) throws org.apache.thrift.TException {
        platformQuery_result result = new platformQuery_result();
        result.success = iface.platformQuery(args.datamap);
        return result;
      }
    }

    public static class getCustomByMobile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCustomByMobile_args> {
      public getCustomByMobile() {
        super("getCustomByMobile");
      }

      public getCustomByMobile_args getEmptyArgsInstance() {
        return new getCustomByMobile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCustomByMobile_result getResult(I iface, getCustomByMobile_args args) throws org.apache.thrift.TException {
        getCustomByMobile_result result = new getCustomByMobile_result();
        result.success = iface.getCustomByMobile(args.datamap);
        return result;
      }
    }

    public static class getCompanyByEmail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCompanyByEmail_args> {
      public getCompanyByEmail() {
        super("getCompanyByEmail");
      }

      public getCompanyByEmail_args getEmptyArgsInstance() {
        return new getCompanyByEmail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCompanyByEmail_result getResult(I iface, getCompanyByEmail_args args) throws org.apache.thrift.TException {
        getCompanyByEmail_result result = new getCompanyByEmail_result();
        result.success = iface.getCompanyByEmail(args.datamap);
        return result;
      }
    }

    public static class openSigningRoom<I extends Iface> extends org.apache.thrift.ProcessFunction<I, openSigningRoom_args> {
      public openSigningRoom() {
        super("openSigningRoom");
      }

      public openSigningRoom_args getEmptyArgsInstance() {
        return new openSigningRoom_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public openSigningRoom_result getResult(I iface, openSigningRoom_args args) throws org.apache.thrift.TException {
        openSigningRoom_result result = new openSigningRoom_result();
        result.success = iface.openSigningRoom(args.datamap);
        return result;
      }
    }

    public static class querySigningRoom<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySigningRoom_args> {
      public querySigningRoom() {
        super("querySigningRoom");
      }

      public querySigningRoom_args getEmptyArgsInstance() {
        return new querySigningRoom_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySigningRoom_result getResult(I iface, querySigningRoom_args args) throws org.apache.thrift.TException {
        querySigningRoom_result result = new querySigningRoom_result();
        result.success = iface.querySigningRoom(args.datamap);
        return result;
      }
    }

    public static class closeSigningRoom<I extends Iface> extends org.apache.thrift.ProcessFunction<I, closeSigningRoom_args> {
      public closeSigningRoom() {
        super("closeSigningRoom");
      }

      public closeSigningRoom_args getEmptyArgsInstance() {
        return new closeSigningRoom_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public closeSigningRoom_result getResult(I iface, closeSigningRoom_args args) throws org.apache.thrift.TException {
        closeSigningRoom_result result = new closeSigningRoom_result();
        result.success = iface.closeSigningRoom(args.datamap);
        return result;
      }
    }

    public static class addChildAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addChildAccount_args> {
      public addChildAccount() {
        super("addChildAccount");
      }

      public addChildAccount_args getEmptyArgsInstance() {
        return new addChildAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addChildAccount_result getResult(I iface, addChildAccount_args args) throws org.apache.thrift.TException {
        addChildAccount_result result = new addChildAccount_result();
        result.success = iface.addChildAccount(args.datamap);
        return result;
      }
    }

    public static class updateChildAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateChildAccount_args> {
      public updateChildAccount() {
        super("updateChildAccount");
      }

      public updateChildAccount_args getEmptyArgsInstance() {
        return new updateChildAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateChildAccount_result getResult(I iface, updateChildAccount_args args) throws org.apache.thrift.TException {
        updateChildAccount_result result = new updateChildAccount_result();
        result.success = iface.updateChildAccount(args.datamap);
        return result;
      }
    }

    public static class stopChildAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stopChildAccount_args> {
      public stopChildAccount() {
        super("stopChildAccount");
      }

      public stopChildAccount_args getEmptyArgsInstance() {
        return new stopChildAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public stopChildAccount_result getResult(I iface, stopChildAccount_args args) throws org.apache.thrift.TException {
        stopChildAccount_result result = new stopChildAccount_result();
        result.success = iface.stopChildAccount(args.datamap);
        return result;
      }
    }

    public static class queryChildAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryChildAccount_args> {
      public queryChildAccount() {
        super("queryChildAccount");
      }

      public queryChildAccount_args getEmptyArgsInstance() {
        return new queryChildAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryChildAccount_result getResult(I iface, queryChildAccount_args args) throws org.apache.thrift.TException {
        queryChildAccount_result result = new queryChildAccount_result();
        result.success = iface.queryChildAccount(args.datamap);
        return result;
      }
    }

    public static class queryNonYunSignPlatform<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryNonYunSignPlatform_args> {
      public queryNonYunSignPlatform() {
        super("queryNonYunSignPlatform");
      }

      public queryNonYunSignPlatform_args getEmptyArgsInstance() {
        return new queryNonYunSignPlatform_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryNonYunSignPlatform_result getResult(I iface, queryNonYunSignPlatform_args args) throws org.apache.thrift.TException {
        queryNonYunSignPlatform_result result = new queryNonYunSignPlatform_result();
        result.success = iface.queryNonYunSignPlatform(args.datamap);
        return result;
      }
    }

    public static class addSeal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addSeal_args> {
      public addSeal() {
        super("addSeal");
      }

      public addSeal_args getEmptyArgsInstance() {
        return new addSeal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addSeal_result getResult(I iface, addSeal_args args) throws org.apache.thrift.TException {
        addSeal_result result = new addSeal_result();
        result.success = iface.addSeal(args.datamap);
        return result;
      }
    }

    public static class querySeal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySeal_args> {
      public querySeal() {
        super("querySeal");
      }

      public querySeal_args getEmptyArgsInstance() {
        return new querySeal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySeal_result getResult(I iface, querySeal_args args) throws org.apache.thrift.TException {
        querySeal_result result = new querySeal_result();
        result.success = iface.querySeal(args.datamap);
        return result;
      }
    }

    public static class delSeal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delSeal_args> {
      public delSeal() {
        super("delSeal");
      }

      public delSeal_args getEmptyArgsInstance() {
        return new delSeal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delSeal_result getResult(I iface, delSeal_args args) throws org.apache.thrift.TException {
        delSeal_result result = new delSeal_result();
        result.success = iface.delSeal(args.datamap);
        return result;
      }
    }

    public static class platformApply<I extends Iface> extends org.apache.thrift.ProcessFunction<I, platformApply_args> {
      public platformApply() {
        super("platformApply");
      }

      public platformApply_args getEmptyArgsInstance() {
        return new platformApply_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public platformApply_result getResult(I iface, platformApply_args args) throws org.apache.thrift.TException {
        platformApply_result result = new platformApply_result();
        result.success = iface.platformApply(args.datamap);
        return result;
      }
    }

    public static class platformApplyCheck<I extends Iface> extends org.apache.thrift.ProcessFunction<I, platformApplyCheck_args> {
      public platformApplyCheck() {
        super("platformApplyCheck");
      }

      public platformApplyCheck_args getEmptyArgsInstance() {
        return new platformApplyCheck_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public platformApplyCheck_result getResult(I iface, platformApplyCheck_args args) throws org.apache.thrift.TException {
        platformApplyCheck_result result = new platformApplyCheck_result();
        result.success = iface.platformApplyCheck(args.datamap);
        return result;
      }
    }

    public static class platformApplyQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, platformApplyQuery_args> {
      public platformApplyQuery() {
        super("platformApplyQuery");
      }

      public platformApplyQuery_args getEmptyArgsInstance() {
        return new platformApplyQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public platformApplyQuery_result getResult(I iface, platformApplyQuery_args args) throws org.apache.thrift.TException {
        platformApplyQuery_result result = new platformApplyQuery_result();
        result.success = iface.platformApplyQuery(args.datamap);
        return result;
      }
    }

    public static class getAllUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllUser_args> {
      public getAllUser() {
        super("getAllUser");
      }

      public getAllUser_args getEmptyArgsInstance() {
        return new getAllUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllUser_result getResult(I iface, getAllUser_args args) throws org.apache.thrift.TException {
        getAllUser_result result = new getAllUser_result();
        result.success = iface.getAllUser(args.datamap);
        return result;
      }
    }

    public static class bangdingAccountList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bangdingAccountList_args> {
      public bangdingAccountList() {
        super("bangdingAccountList");
      }

      public bangdingAccountList_args getEmptyArgsInstance() {
        return new bangdingAccountList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bangdingAccountList_result getResult(I iface, bangdingAccountList_args args) throws org.apache.thrift.TException {
        bangdingAccountList_result result = new bangdingAccountList_result();
        result.success = iface.bangdingAccountList(args.datamap);
        return result;
      }
    }

    public static class platformCallbackQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, platformCallbackQuery_args> {
      public platformCallbackQuery() {
        super("platformCallbackQuery");
      }

      public platformCallbackQuery_args getEmptyArgsInstance() {
        return new platformCallbackQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public platformCallbackQuery_result getResult(I iface, platformCallbackQuery_args args) throws org.apache.thrift.TException {
        platformCallbackQuery_result result = new platformCallbackQuery_result();
        result.success = iface.platformCallbackQuery(args.datamap);
        return result;
      }
    }

    public static class bangindWx<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bangindWx_args> {
      public bangindWx() {
        super("bangindWx");
      }

      public bangindWx_args getEmptyArgsInstance() {
        return new bangindWx_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bangindWx_result getResult(I iface, bangindWx_args args) throws org.apache.thrift.TException {
        bangindWx_result result = new bangindWx_result();
        result.success = iface.bangindWx(args.datamap);
        return result;
      }
    }

    public static class unbundWx<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unbundWx_args> {
      public unbundWx() {
        super("unbundWx");
      }

      public unbundWx_args getEmptyArgsInstance() {
        return new unbundWx_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public unbundWx_result getResult(I iface, unbundWx_args args) throws org.apache.thrift.TException {
        unbundWx_result result = new unbundWx_result();
        result.success = iface.unbundWx(args.datamap);
        return result;
      }
    }

    public static class getCompanyAccountByMobile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCompanyAccountByMobile_args> {
      public getCompanyAccountByMobile() {
        super("getCompanyAccountByMobile");
      }

      public getCompanyAccountByMobile_args getEmptyArgsInstance() {
        return new getCompanyAccountByMobile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCompanyAccountByMobile_result getResult(I iface, getCompanyAccountByMobile_args args) throws org.apache.thrift.TException {
        getCompanyAccountByMobile_result result = new getCompanyAccountByMobile_result();
        result.success = iface.getCompanyAccountByMobile(args.datamap);
        return result;
      }
    }

    public static class getCustomAccountByEmail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCustomAccountByEmail_args> {
      public getCustomAccountByEmail() {
        super("getCustomAccountByEmail");
      }

      public getCustomAccountByEmail_args getEmptyArgsInstance() {
        return new getCustomAccountByEmail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCustomAccountByEmail_result getResult(I iface, getCustomAccountByEmail_args args) throws org.apache.thrift.TException {
        getCustomAccountByEmail_result result = new getCustomAccountByEmail_result();
        result.success = iface.getCustomAccountByEmail(args.datamap);
        return result;
      }
    }

    public static class addMyAttn<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addMyAttn_args> {
      public addMyAttn() {
        super("addMyAttn");
      }

      public addMyAttn_args getEmptyArgsInstance() {
        return new addMyAttn_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addMyAttn_result getResult(I iface, addMyAttn_args args) throws org.apache.thrift.TException {
        addMyAttn_result result = new addMyAttn_result();
        result.success = iface.addMyAttn(args.datamap);
        return result;
      }
    }

    public static class delMyAttn<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delMyAttn_args> {
      public delMyAttn() {
        super("delMyAttn");
      }

      public delMyAttn_args getEmptyArgsInstance() {
        return new delMyAttn_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delMyAttn_result getResult(I iface, delMyAttn_args args) throws org.apache.thrift.TException {
        delMyAttn_result result = new delMyAttn_result();
        result.success = iface.delMyAttn(args.datamap);
        return result;
      }
    }

    public static class listMyAttn<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listMyAttn_args> {
      public listMyAttn() {
        super("listMyAttn");
      }

      public listMyAttn_args getEmptyArgsInstance() {
        return new listMyAttn_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listMyAttn_result getResult(I iface, listMyAttn_args args) throws org.apache.thrift.TException {
        listMyAttn_result result = new listMyAttn_result();
        result.success = iface.listMyAttn(args.datamap);
        return result;
      }
    }

    public static class listCompanyMember<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listCompanyMember_args> {
      public listCompanyMember() {
        super("listCompanyMember");
      }

      public listCompanyMember_args getEmptyArgsInstance() {
        return new listCompanyMember_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listCompanyMember_result getResult(I iface, listCompanyMember_args args) throws org.apache.thrift.TException {
        listCompanyMember_result result = new listCompanyMember_result();
        result.success = iface.listCompanyMember(args.datamap);
        return result;
      }
    }

    public static class changeAppAdmin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, changeAppAdmin_args> {
      public changeAppAdmin() {
        super("changeAppAdmin");
      }

      public changeAppAdmin_args getEmptyArgsInstance() {
        return new changeAppAdmin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public changeAppAdmin_result getResult(I iface, changeAppAdmin_args args) throws org.apache.thrift.TException {
        changeAppAdmin_result result = new changeAppAdmin_result();
        result.success = iface.changeAppAdmin(args.datamap);
        return result;
      }
    }

    public static class userQueryByMobile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, userQueryByMobile_args> {
      public userQueryByMobile() {
        super("userQueryByMobile");
      }

      public userQueryByMobile_args getEmptyArgsInstance() {
        return new userQueryByMobile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public userQueryByMobile_result getResult(I iface, userQueryByMobile_args args) throws org.apache.thrift.TException {
        userQueryByMobile_result result = new userQueryByMobile_result();
        result.success = iface.userQueryByMobile(args.datamap);
        return result;
      }
    }

    public static class checkCert<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkCert_args> {
      public checkCert() {
        super("checkCert");
      }

      public checkCert_args getEmptyArgsInstance() {
        return new checkCert_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkCert_result getResult(I iface, checkCert_args args) throws org.apache.thrift.TException {
        checkCert_result result = new checkCert_result();
        result.success = iface.checkCert(args.datamap);
        return result;
      }
    }

    public static class queryUserExamineStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryUserExamineStatus_args> {
      public queryUserExamineStatus() {
        super("queryUserExamineStatus");
      }

      public queryUserExamineStatus_args getEmptyArgsInstance() {
        return new queryUserExamineStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryUserExamineStatus_result getResult(I iface, queryUserExamineStatus_args args) throws org.apache.thrift.TException {
        queryUserExamineStatus_result result = new queryUserExamineStatus_result();
        result.success = iface.queryUserExamineStatus(args.datamap);
        return result;
      }
    }

    public static class synchronizationUserInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, synchronizationUserInfo_args> {
      public synchronizationUserInfo() {
        super("synchronizationUserInfo");
      }

      public synchronizationUserInfo_args getEmptyArgsInstance() {
        return new synchronizationUserInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public synchronizationUserInfo_result getResult(I iface, synchronizationUserInfo_args args) throws org.apache.thrift.TException {
        synchronizationUserInfo_result result = new synchronizationUserInfo_result();
        result.success = iface.synchronizationUserInfo(args.datamap);
        return result;
      }
    }

    public static class userRegisterTUNIU<I extends Iface> extends org.apache.thrift.ProcessFunction<I, userRegisterTUNIU_args> {
      public userRegisterTUNIU() {
        super("userRegisterTUNIU");
      }

      public userRegisterTUNIU_args getEmptyArgsInstance() {
        return new userRegisterTUNIU_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public userRegisterTUNIU_result getResult(I iface, userRegisterTUNIU_args args) throws org.apache.thrift.TException {
        userRegisterTUNIU_result result = new userRegisterTUNIU_result();
        result.success = iface.userRegisterTUNIU(args.datamap);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("userLogin", new userLogin());
      processMap.put("userRegister", new userRegister());
      processMap.put("userUpdate", new userUpdate());
      processMap.put("userActivat", new userActivat());
      processMap.put("userLogOut", new userLogOut());
      processMap.put("userQuery", new userQuery());
      processMap.put("certLogin", new certLogin());
      processMap.put("certRegister", new certRegister());
      processMap.put("certQuery", new certQuery());
      processMap.put("certActive", new certActive());
      processMap.put("certUnbund", new certUnbund());
      processMap.put("platformRegister", new platformRegister());
      processMap.put("platformVerify", new platformVerify());
      processMap.put("platformQuery", new platformQuery());
      processMap.put("getCustomByMobile", new getCustomByMobile());
      processMap.put("getCompanyByEmail", new getCompanyByEmail());
      processMap.put("openSigningRoom", new openSigningRoom());
      processMap.put("querySigningRoom", new querySigningRoom());
      processMap.put("closeSigningRoom", new closeSigningRoom());
      processMap.put("addChildAccount", new addChildAccount());
      processMap.put("updateChildAccount", new updateChildAccount());
      processMap.put("stopChildAccount", new stopChildAccount());
      processMap.put("queryChildAccount", new queryChildAccount());
      processMap.put("queryNonYunSignPlatform", new queryNonYunSignPlatform());
      processMap.put("addSeal", new addSeal());
      processMap.put("querySeal", new querySeal());
      processMap.put("delSeal", new delSeal());
      processMap.put("platformApply", new platformApply());
      processMap.put("platformApplyCheck", new platformApplyCheck());
      processMap.put("platformApplyQuery", new platformApplyQuery());
      processMap.put("getAllUser", new getAllUser());
      processMap.put("bangdingAccountList", new bangdingAccountList());
      processMap.put("platformCallbackQuery", new platformCallbackQuery());
      processMap.put("bangindWx", new bangindWx());
      processMap.put("unbundWx", new unbundWx());
      processMap.put("getCompanyAccountByMobile", new getCompanyAccountByMobile());
      processMap.put("getCustomAccountByEmail", new getCustomAccountByEmail());
      processMap.put("addMyAttn", new addMyAttn());
      processMap.put("delMyAttn", new delMyAttn());
      processMap.put("listMyAttn", new listMyAttn());
      processMap.put("listCompanyMember", new listCompanyMember());
      processMap.put("changeAppAdmin", new changeAppAdmin());
      processMap.put("userQueryByMobile", new userQueryByMobile());
      processMap.put("checkCert", new checkCert());
      processMap.put("queryUserExamineStatus", new queryUserExamineStatus());
      processMap.put("synchronizationUserInfo", new synchronizationUserInfo());
      processMap.put("userRegisterTUNIU", new userRegisterTUNIU());
      return processMap;
    }

    public static class userLogin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, userLogin_args, ReturnData> {
      public userLogin() {
        super("userLogin");
      }

      public userLogin_args getEmptyArgsInstance() {
        return new userLogin_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            userLogin_result result = new userLogin_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            userLogin_result result = new userLogin_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, userLogin_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.userLogin(args.datamap,resultHandler);
      }
    }

    public static class userRegister<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, userRegister_args, ReturnData> {
      public userRegister() {
        super("userRegister");
      }

      public userRegister_args getEmptyArgsInstance() {
        return new userRegister_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            userRegister_result result = new userRegister_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            userRegister_result result = new userRegister_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, userRegister_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.userRegister(args.datamap,resultHandler);
      }
    }

    public static class userUpdate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, userUpdate_args, ReturnData> {
      public userUpdate() {
        super("userUpdate");
      }

      public userUpdate_args getEmptyArgsInstance() {
        return new userUpdate_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            userUpdate_result result = new userUpdate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            userUpdate_result result = new userUpdate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, userUpdate_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.userUpdate(args.datamap,resultHandler);
      }
    }

    public static class userActivat<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, userActivat_args, ReturnData> {
      public userActivat() {
        super("userActivat");
      }

      public userActivat_args getEmptyArgsInstance() {
        return new userActivat_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            userActivat_result result = new userActivat_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            userActivat_result result = new userActivat_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, userActivat_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.userActivat(args.datamap,resultHandler);
      }
    }

    public static class userLogOut<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, userLogOut_args, ReturnData> {
      public userLogOut() {
        super("userLogOut");
      }

      public userLogOut_args getEmptyArgsInstance() {
        return new userLogOut_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            userLogOut_result result = new userLogOut_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            userLogOut_result result = new userLogOut_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, userLogOut_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.userLogOut(args.datamap,resultHandler);
      }
    }

    public static class userQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, userQuery_args, ReturnData> {
      public userQuery() {
        super("userQuery");
      }

      public userQuery_args getEmptyArgsInstance() {
        return new userQuery_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            userQuery_result result = new userQuery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            userQuery_result result = new userQuery_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, userQuery_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.userQuery(args.datamap,resultHandler);
      }
    }

    public static class certLogin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, certLogin_args, ReturnData> {
      public certLogin() {
        super("certLogin");
      }

      public certLogin_args getEmptyArgsInstance() {
        return new certLogin_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            certLogin_result result = new certLogin_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            certLogin_result result = new certLogin_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, certLogin_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.certLogin(args.datamap,resultHandler);
      }
    }

    public static class certRegister<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, certRegister_args, ReturnData> {
      public certRegister() {
        super("certRegister");
      }

      public certRegister_args getEmptyArgsInstance() {
        return new certRegister_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            certRegister_result result = new certRegister_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            certRegister_result result = new certRegister_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, certRegister_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.certRegister(args.datamap,resultHandler);
      }
    }

    public static class certQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, certQuery_args, ReturnData> {
      public certQuery() {
        super("certQuery");
      }

      public certQuery_args getEmptyArgsInstance() {
        return new certQuery_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            certQuery_result result = new certQuery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            certQuery_result result = new certQuery_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, certQuery_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.certQuery(args.datamap,resultHandler);
      }
    }

    public static class certActive<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, certActive_args, ReturnData> {
      public certActive() {
        super("certActive");
      }

      public certActive_args getEmptyArgsInstance() {
        return new certActive_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            certActive_result result = new certActive_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            certActive_result result = new certActive_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, certActive_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.certActive(args.datamap,resultHandler);
      }
    }

    public static class certUnbund<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, certUnbund_args, ReturnData> {
      public certUnbund() {
        super("certUnbund");
      }

      public certUnbund_args getEmptyArgsInstance() {
        return new certUnbund_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            certUnbund_result result = new certUnbund_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            certUnbund_result result = new certUnbund_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, certUnbund_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.certUnbund(args.datamap,resultHandler);
      }
    }

    public static class platformRegister<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, platformRegister_args, ReturnData> {
      public platformRegister() {
        super("platformRegister");
      }

      public platformRegister_args getEmptyArgsInstance() {
        return new platformRegister_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            platformRegister_result result = new platformRegister_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            platformRegister_result result = new platformRegister_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, platformRegister_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.platformRegister(args.datamap,resultHandler);
      }
    }

    public static class platformVerify<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, platformVerify_args, ReturnData> {
      public platformVerify() {
        super("platformVerify");
      }

      public platformVerify_args getEmptyArgsInstance() {
        return new platformVerify_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            platformVerify_result result = new platformVerify_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            platformVerify_result result = new platformVerify_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, platformVerify_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.platformVerify(args.datamap,resultHandler);
      }
    }

    public static class platformQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, platformQuery_args, ReturnData> {
      public platformQuery() {
        super("platformQuery");
      }

      public platformQuery_args getEmptyArgsInstance() {
        return new platformQuery_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            platformQuery_result result = new platformQuery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            platformQuery_result result = new platformQuery_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, platformQuery_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.platformQuery(args.datamap,resultHandler);
      }
    }

    public static class getCustomByMobile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCustomByMobile_args, ReturnData> {
      public getCustomByMobile() {
        super("getCustomByMobile");
      }

      public getCustomByMobile_args getEmptyArgsInstance() {
        return new getCustomByMobile_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            getCustomByMobile_result result = new getCustomByMobile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCustomByMobile_result result = new getCustomByMobile_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCustomByMobile_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.getCustomByMobile(args.datamap,resultHandler);
      }
    }

    public static class getCompanyByEmail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCompanyByEmail_args, ReturnData> {
      public getCompanyByEmail() {
        super("getCompanyByEmail");
      }

      public getCompanyByEmail_args getEmptyArgsInstance() {
        return new getCompanyByEmail_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            getCompanyByEmail_result result = new getCompanyByEmail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCompanyByEmail_result result = new getCompanyByEmail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCompanyByEmail_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.getCompanyByEmail(args.datamap,resultHandler);
      }
    }

    public static class openSigningRoom<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, openSigningRoom_args, ReturnData> {
      public openSigningRoom() {
        super("openSigningRoom");
      }

      public openSigningRoom_args getEmptyArgsInstance() {
        return new openSigningRoom_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            openSigningRoom_result result = new openSigningRoom_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            openSigningRoom_result result = new openSigningRoom_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, openSigningRoom_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.openSigningRoom(args.datamap,resultHandler);
      }
    }

    public static class querySigningRoom<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySigningRoom_args, ReturnData> {
      public querySigningRoom() {
        super("querySigningRoom");
      }

      public querySigningRoom_args getEmptyArgsInstance() {
        return new querySigningRoom_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            querySigningRoom_result result = new querySigningRoom_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySigningRoom_result result = new querySigningRoom_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySigningRoom_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.querySigningRoom(args.datamap,resultHandler);
      }
    }

    public static class closeSigningRoom<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, closeSigningRoom_args, ReturnData> {
      public closeSigningRoom() {
        super("closeSigningRoom");
      }

      public closeSigningRoom_args getEmptyArgsInstance() {
        return new closeSigningRoom_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            closeSigningRoom_result result = new closeSigningRoom_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            closeSigningRoom_result result = new closeSigningRoom_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, closeSigningRoom_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.closeSigningRoom(args.datamap,resultHandler);
      }
    }

    public static class addChildAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addChildAccount_args, ReturnData> {
      public addChildAccount() {
        super("addChildAccount");
      }

      public addChildAccount_args getEmptyArgsInstance() {
        return new addChildAccount_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            addChildAccount_result result = new addChildAccount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addChildAccount_result result = new addChildAccount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addChildAccount_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.addChildAccount(args.datamap,resultHandler);
      }
    }

    public static class updateChildAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateChildAccount_args, ReturnData> {
      public updateChildAccount() {
        super("updateChildAccount");
      }

      public updateChildAccount_args getEmptyArgsInstance() {
        return new updateChildAccount_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            updateChildAccount_result result = new updateChildAccount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateChildAccount_result result = new updateChildAccount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateChildAccount_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.updateChildAccount(args.datamap,resultHandler);
      }
    }

    public static class stopChildAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, stopChildAccount_args, ReturnData> {
      public stopChildAccount() {
        super("stopChildAccount");
      }

      public stopChildAccount_args getEmptyArgsInstance() {
        return new stopChildAccount_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            stopChildAccount_result result = new stopChildAccount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            stopChildAccount_result result = new stopChildAccount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, stopChildAccount_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.stopChildAccount(args.datamap,resultHandler);
      }
    }

    public static class queryChildAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryChildAccount_args, ReturnData> {
      public queryChildAccount() {
        super("queryChildAccount");
      }

      public queryChildAccount_args getEmptyArgsInstance() {
        return new queryChildAccount_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            queryChildAccount_result result = new queryChildAccount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryChildAccount_result result = new queryChildAccount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryChildAccount_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.queryChildAccount(args.datamap,resultHandler);
      }
    }

    public static class queryNonYunSignPlatform<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryNonYunSignPlatform_args, ReturnData> {
      public queryNonYunSignPlatform() {
        super("queryNonYunSignPlatform");
      }

      public queryNonYunSignPlatform_args getEmptyArgsInstance() {
        return new queryNonYunSignPlatform_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            queryNonYunSignPlatform_result result = new queryNonYunSignPlatform_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryNonYunSignPlatform_result result = new queryNonYunSignPlatform_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryNonYunSignPlatform_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.queryNonYunSignPlatform(args.datamap,resultHandler);
      }
    }

    public static class addSeal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addSeal_args, ReturnData> {
      public addSeal() {
        super("addSeal");
      }

      public addSeal_args getEmptyArgsInstance() {
        return new addSeal_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            addSeal_result result = new addSeal_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addSeal_result result = new addSeal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addSeal_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.addSeal(args.datamap,resultHandler);
      }
    }

    public static class querySeal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySeal_args, ReturnData> {
      public querySeal() {
        super("querySeal");
      }

      public querySeal_args getEmptyArgsInstance() {
        return new querySeal_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            querySeal_result result = new querySeal_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySeal_result result = new querySeal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySeal_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.querySeal(args.datamap,resultHandler);
      }
    }

    public static class delSeal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delSeal_args, ReturnData> {
      public delSeal() {
        super("delSeal");
      }

      public delSeal_args getEmptyArgsInstance() {
        return new delSeal_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            delSeal_result result = new delSeal_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delSeal_result result = new delSeal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delSeal_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.delSeal(args.datamap,resultHandler);
      }
    }

    public static class platformApply<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, platformApply_args, ReturnData> {
      public platformApply() {
        super("platformApply");
      }

      public platformApply_args getEmptyArgsInstance() {
        return new platformApply_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            platformApply_result result = new platformApply_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            platformApply_result result = new platformApply_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, platformApply_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.platformApply(args.datamap,resultHandler);
      }
    }

    public static class platformApplyCheck<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, platformApplyCheck_args, ReturnData> {
      public platformApplyCheck() {
        super("platformApplyCheck");
      }

      public platformApplyCheck_args getEmptyArgsInstance() {
        return new platformApplyCheck_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            platformApplyCheck_result result = new platformApplyCheck_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            platformApplyCheck_result result = new platformApplyCheck_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, platformApplyCheck_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.platformApplyCheck(args.datamap,resultHandler);
      }
    }

    public static class platformApplyQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, platformApplyQuery_args, ReturnData> {
      public platformApplyQuery() {
        super("platformApplyQuery");
      }

      public platformApplyQuery_args getEmptyArgsInstance() {
        return new platformApplyQuery_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            platformApplyQuery_result result = new platformApplyQuery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            platformApplyQuery_result result = new platformApplyQuery_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, platformApplyQuery_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.platformApplyQuery(args.datamap,resultHandler);
      }
    }

    public static class getAllUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllUser_args, ReturnData> {
      public getAllUser() {
        super("getAllUser");
      }

      public getAllUser_args getEmptyArgsInstance() {
        return new getAllUser_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            getAllUser_result result = new getAllUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllUser_result result = new getAllUser_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllUser_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.getAllUser(args.datamap,resultHandler);
      }
    }

    public static class bangdingAccountList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bangdingAccountList_args, ReturnData> {
      public bangdingAccountList() {
        super("bangdingAccountList");
      }

      public bangdingAccountList_args getEmptyArgsInstance() {
        return new bangdingAccountList_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            bangdingAccountList_result result = new bangdingAccountList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bangdingAccountList_result result = new bangdingAccountList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bangdingAccountList_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.bangdingAccountList(args.datamap,resultHandler);
      }
    }

    public static class platformCallbackQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, platformCallbackQuery_args, ReturnData> {
      public platformCallbackQuery() {
        super("platformCallbackQuery");
      }

      public platformCallbackQuery_args getEmptyArgsInstance() {
        return new platformCallbackQuery_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            platformCallbackQuery_result result = new platformCallbackQuery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            platformCallbackQuery_result result = new platformCallbackQuery_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, platformCallbackQuery_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.platformCallbackQuery(args.datamap,resultHandler);
      }
    }

    public static class bangindWx<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bangindWx_args, ReturnData> {
      public bangindWx() {
        super("bangindWx");
      }

      public bangindWx_args getEmptyArgsInstance() {
        return new bangindWx_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            bangindWx_result result = new bangindWx_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bangindWx_result result = new bangindWx_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bangindWx_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.bangindWx(args.datamap,resultHandler);
      }
    }

    public static class unbundWx<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, unbundWx_args, ReturnData> {
      public unbundWx() {
        super("unbundWx");
      }

      public unbundWx_args getEmptyArgsInstance() {
        return new unbundWx_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            unbundWx_result result = new unbundWx_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            unbundWx_result result = new unbundWx_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, unbundWx_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.unbundWx(args.datamap,resultHandler);
      }
    }

    public static class getCompanyAccountByMobile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCompanyAccountByMobile_args, ReturnData> {
      public getCompanyAccountByMobile() {
        super("getCompanyAccountByMobile");
      }

      public getCompanyAccountByMobile_args getEmptyArgsInstance() {
        return new getCompanyAccountByMobile_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            getCompanyAccountByMobile_result result = new getCompanyAccountByMobile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCompanyAccountByMobile_result result = new getCompanyAccountByMobile_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCompanyAccountByMobile_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.getCompanyAccountByMobile(args.datamap,resultHandler);
      }
    }

    public static class getCustomAccountByEmail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCustomAccountByEmail_args, ReturnData> {
      public getCustomAccountByEmail() {
        super("getCustomAccountByEmail");
      }

      public getCustomAccountByEmail_args getEmptyArgsInstance() {
        return new getCustomAccountByEmail_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            getCustomAccountByEmail_result result = new getCustomAccountByEmail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCustomAccountByEmail_result result = new getCustomAccountByEmail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCustomAccountByEmail_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.getCustomAccountByEmail(args.datamap,resultHandler);
      }
    }

    public static class addMyAttn<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addMyAttn_args, ReturnData> {
      public addMyAttn() {
        super("addMyAttn");
      }

      public addMyAttn_args getEmptyArgsInstance() {
        return new addMyAttn_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            addMyAttn_result result = new addMyAttn_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addMyAttn_result result = new addMyAttn_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addMyAttn_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.addMyAttn(args.datamap,resultHandler);
      }
    }

    public static class delMyAttn<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delMyAttn_args, ReturnData> {
      public delMyAttn() {
        super("delMyAttn");
      }

      public delMyAttn_args getEmptyArgsInstance() {
        return new delMyAttn_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            delMyAttn_result result = new delMyAttn_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delMyAttn_result result = new delMyAttn_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delMyAttn_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.delMyAttn(args.datamap,resultHandler);
      }
    }

    public static class listMyAttn<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listMyAttn_args, ReturnData> {
      public listMyAttn() {
        super("listMyAttn");
      }

      public listMyAttn_args getEmptyArgsInstance() {
        return new listMyAttn_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            listMyAttn_result result = new listMyAttn_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listMyAttn_result result = new listMyAttn_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listMyAttn_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.listMyAttn(args.datamap,resultHandler);
      }
    }

    public static class listCompanyMember<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listCompanyMember_args, ReturnData> {
      public listCompanyMember() {
        super("listCompanyMember");
      }

      public listCompanyMember_args getEmptyArgsInstance() {
        return new listCompanyMember_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            listCompanyMember_result result = new listCompanyMember_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listCompanyMember_result result = new listCompanyMember_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listCompanyMember_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.listCompanyMember(args.datamap,resultHandler);
      }
    }

    public static class changeAppAdmin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, changeAppAdmin_args, ReturnData> {
      public changeAppAdmin() {
        super("changeAppAdmin");
      }

      public changeAppAdmin_args getEmptyArgsInstance() {
        return new changeAppAdmin_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            changeAppAdmin_result result = new changeAppAdmin_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            changeAppAdmin_result result = new changeAppAdmin_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, changeAppAdmin_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.changeAppAdmin(args.datamap,resultHandler);
      }
    }

    public static class userQueryByMobile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, userQueryByMobile_args, ReturnData> {
      public userQueryByMobile() {
        super("userQueryByMobile");
      }

      public userQueryByMobile_args getEmptyArgsInstance() {
        return new userQueryByMobile_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            userQueryByMobile_result result = new userQueryByMobile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            userQueryByMobile_result result = new userQueryByMobile_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, userQueryByMobile_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.userQueryByMobile(args.datamap,resultHandler);
      }
    }

    public static class checkCert<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkCert_args, ReturnData> {
      public checkCert() {
        super("checkCert");
      }

      public checkCert_args getEmptyArgsInstance() {
        return new checkCert_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            checkCert_result result = new checkCert_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkCert_result result = new checkCert_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkCert_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.checkCert(args.datamap,resultHandler);
      }
    }

    public static class queryUserExamineStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryUserExamineStatus_args, ReturnData> {
      public queryUserExamineStatus() {
        super("queryUserExamineStatus");
      }

      public queryUserExamineStatus_args getEmptyArgsInstance() {
        return new queryUserExamineStatus_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            queryUserExamineStatus_result result = new queryUserExamineStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryUserExamineStatus_result result = new queryUserExamineStatus_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryUserExamineStatus_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.queryUserExamineStatus(args.datamap,resultHandler);
      }
    }

    public static class synchronizationUserInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, synchronizationUserInfo_args, ReturnData> {
      public synchronizationUserInfo() {
        super("synchronizationUserInfo");
      }

      public synchronizationUserInfo_args getEmptyArgsInstance() {
        return new synchronizationUserInfo_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            synchronizationUserInfo_result result = new synchronizationUserInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            synchronizationUserInfo_result result = new synchronizationUserInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, synchronizationUserInfo_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.synchronizationUserInfo(args.datamap,resultHandler);
      }
    }

    public static class userRegisterTUNIU<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, userRegisterTUNIU_args, ReturnData> {
      public userRegisterTUNIU() {
        super("userRegisterTUNIU");
      }

      public userRegisterTUNIU_args getEmptyArgsInstance() {
        return new userRegisterTUNIU_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            userRegisterTUNIU_result result = new userRegisterTUNIU_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            userRegisterTUNIU_result result = new userRegisterTUNIU_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, userRegisterTUNIU_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.userRegisterTUNIU(args.datamap,resultHandler);
      }
    }

  }

  public static class userLogin_args implements org.apache.thrift.TBase<userLogin_args, userLogin_args._Fields>, java.io.Serializable, Cloneable, Comparable<userLogin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userLogin_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userLogin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userLogin_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userLogin_args.class, metaDataMap);
    }

    public userLogin_args() {
    }

    public userLogin_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userLogin_args(userLogin_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public userLogin_args deepCopy() {
      return new userLogin_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public userLogin_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userLogin_args)
        return this.equals((userLogin_args)that);
      return false;
    }

    public boolean equals(userLogin_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(userLogin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userLogin_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userLogin_argsStandardSchemeFactory implements SchemeFactory {
      public userLogin_argsStandardScheme getScheme() {
        return new userLogin_argsStandardScheme();
      }
    }

    private static class userLogin_argsStandardScheme extends StandardScheme<userLogin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userLogin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map78 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map78.size);
                  String _key79;
                  String _val80;
                  for (int _i81 = 0; _i81 < _map78.size; ++_i81)
                  {
                    _key79 = iprot.readString();
                    _val80 = iprot.readString();
                    struct.datamap.put(_key79, _val80);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userLogin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter82 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter82.getKey());
              oprot.writeString(_iter82.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userLogin_argsTupleSchemeFactory implements SchemeFactory {
      public userLogin_argsTupleScheme getScheme() {
        return new userLogin_argsTupleScheme();
      }
    }

    private static class userLogin_argsTupleScheme extends TupleScheme<userLogin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userLogin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter83 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter83.getKey());
              oprot.writeString(_iter83.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userLogin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map84 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map84.size);
            String _key85;
            String _val86;
            for (int _i87 = 0; _i87 < _map84.size; ++_i87)
            {
              _key85 = iprot.readString();
              _val86 = iprot.readString();
              struct.datamap.put(_key85, _val86);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class userLogin_result implements org.apache.thrift.TBase<userLogin_result, userLogin_result._Fields>, java.io.Serializable, Cloneable, Comparable<userLogin_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userLogin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userLogin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userLogin_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userLogin_result.class, metaDataMap);
    }

    public userLogin_result() {
    }

    public userLogin_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userLogin_result(userLogin_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public userLogin_result deepCopy() {
      return new userLogin_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public userLogin_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userLogin_result)
        return this.equals((userLogin_result)that);
      return false;
    }

    public boolean equals(userLogin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(userLogin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userLogin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userLogin_resultStandardSchemeFactory implements SchemeFactory {
      public userLogin_resultStandardScheme getScheme() {
        return new userLogin_resultStandardScheme();
      }
    }

    private static class userLogin_resultStandardScheme extends StandardScheme<userLogin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userLogin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userLogin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userLogin_resultTupleSchemeFactory implements SchemeFactory {
      public userLogin_resultTupleScheme getScheme() {
        return new userLogin_resultTupleScheme();
      }
    }

    private static class userLogin_resultTupleScheme extends TupleScheme<userLogin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userLogin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userLogin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class userRegister_args implements org.apache.thrift.TBase<userRegister_args, userRegister_args._Fields>, java.io.Serializable, Cloneable, Comparable<userRegister_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userRegister_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userRegister_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userRegister_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userRegister_args.class, metaDataMap);
    }

    public userRegister_args() {
    }

    public userRegister_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userRegister_args(userRegister_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public userRegister_args deepCopy() {
      return new userRegister_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public userRegister_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userRegister_args)
        return this.equals((userRegister_args)that);
      return false;
    }

    public boolean equals(userRegister_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(userRegister_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userRegister_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userRegister_argsStandardSchemeFactory implements SchemeFactory {
      public userRegister_argsStandardScheme getScheme() {
        return new userRegister_argsStandardScheme();
      }
    }

    private static class userRegister_argsStandardScheme extends StandardScheme<userRegister_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userRegister_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map88 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map88.size);
                  String _key89;
                  String _val90;
                  for (int _i91 = 0; _i91 < _map88.size; ++_i91)
                  {
                    _key89 = iprot.readString();
                    _val90 = iprot.readString();
                    struct.datamap.put(_key89, _val90);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userRegister_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter92 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter92.getKey());
              oprot.writeString(_iter92.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userRegister_argsTupleSchemeFactory implements SchemeFactory {
      public userRegister_argsTupleScheme getScheme() {
        return new userRegister_argsTupleScheme();
      }
    }

    private static class userRegister_argsTupleScheme extends TupleScheme<userRegister_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userRegister_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter93 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter93.getKey());
              oprot.writeString(_iter93.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userRegister_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map94 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map94.size);
            String _key95;
            String _val96;
            for (int _i97 = 0; _i97 < _map94.size; ++_i97)
            {
              _key95 = iprot.readString();
              _val96 = iprot.readString();
              struct.datamap.put(_key95, _val96);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class userRegister_result implements org.apache.thrift.TBase<userRegister_result, userRegister_result._Fields>, java.io.Serializable, Cloneable, Comparable<userRegister_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userRegister_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userRegister_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userRegister_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userRegister_result.class, metaDataMap);
    }

    public userRegister_result() {
    }

    public userRegister_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userRegister_result(userRegister_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public userRegister_result deepCopy() {
      return new userRegister_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public userRegister_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userRegister_result)
        return this.equals((userRegister_result)that);
      return false;
    }

    public boolean equals(userRegister_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(userRegister_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userRegister_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userRegister_resultStandardSchemeFactory implements SchemeFactory {
      public userRegister_resultStandardScheme getScheme() {
        return new userRegister_resultStandardScheme();
      }
    }

    private static class userRegister_resultStandardScheme extends StandardScheme<userRegister_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userRegister_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userRegister_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userRegister_resultTupleSchemeFactory implements SchemeFactory {
      public userRegister_resultTupleScheme getScheme() {
        return new userRegister_resultTupleScheme();
      }
    }

    private static class userRegister_resultTupleScheme extends TupleScheme<userRegister_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userRegister_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userRegister_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class userUpdate_args implements org.apache.thrift.TBase<userUpdate_args, userUpdate_args._Fields>, java.io.Serializable, Cloneable, Comparable<userUpdate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userUpdate_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userUpdate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userUpdate_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userUpdate_args.class, metaDataMap);
    }

    public userUpdate_args() {
    }

    public userUpdate_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userUpdate_args(userUpdate_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public userUpdate_args deepCopy() {
      return new userUpdate_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public userUpdate_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userUpdate_args)
        return this.equals((userUpdate_args)that);
      return false;
    }

    public boolean equals(userUpdate_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(userUpdate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userUpdate_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userUpdate_argsStandardSchemeFactory implements SchemeFactory {
      public userUpdate_argsStandardScheme getScheme() {
        return new userUpdate_argsStandardScheme();
      }
    }

    private static class userUpdate_argsStandardScheme extends StandardScheme<userUpdate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map98 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map98.size);
                  String _key99;
                  String _val100;
                  for (int _i101 = 0; _i101 < _map98.size; ++_i101)
                  {
                    _key99 = iprot.readString();
                    _val100 = iprot.readString();
                    struct.datamap.put(_key99, _val100);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userUpdate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter102 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter102.getKey());
              oprot.writeString(_iter102.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userUpdate_argsTupleSchemeFactory implements SchemeFactory {
      public userUpdate_argsTupleScheme getScheme() {
        return new userUpdate_argsTupleScheme();
      }
    }

    private static class userUpdate_argsTupleScheme extends TupleScheme<userUpdate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter103 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter103.getKey());
              oprot.writeString(_iter103.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map104 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map104.size);
            String _key105;
            String _val106;
            for (int _i107 = 0; _i107 < _map104.size; ++_i107)
            {
              _key105 = iprot.readString();
              _val106 = iprot.readString();
              struct.datamap.put(_key105, _val106);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class userUpdate_result implements org.apache.thrift.TBase<userUpdate_result, userUpdate_result._Fields>, java.io.Serializable, Cloneable, Comparable<userUpdate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userUpdate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userUpdate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userUpdate_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userUpdate_result.class, metaDataMap);
    }

    public userUpdate_result() {
    }

    public userUpdate_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userUpdate_result(userUpdate_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public userUpdate_result deepCopy() {
      return new userUpdate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public userUpdate_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userUpdate_result)
        return this.equals((userUpdate_result)that);
      return false;
    }

    public boolean equals(userUpdate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(userUpdate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userUpdate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userUpdate_resultStandardSchemeFactory implements SchemeFactory {
      public userUpdate_resultStandardScheme getScheme() {
        return new userUpdate_resultStandardScheme();
      }
    }

    private static class userUpdate_resultStandardScheme extends StandardScheme<userUpdate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userUpdate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userUpdate_resultTupleSchemeFactory implements SchemeFactory {
      public userUpdate_resultTupleScheme getScheme() {
        return new userUpdate_resultTupleScheme();
      }
    }

    private static class userUpdate_resultTupleScheme extends TupleScheme<userUpdate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class userActivat_args implements org.apache.thrift.TBase<userActivat_args, userActivat_args._Fields>, java.io.Serializable, Cloneable, Comparable<userActivat_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userActivat_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userActivat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userActivat_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userActivat_args.class, metaDataMap);
    }

    public userActivat_args() {
    }

    public userActivat_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userActivat_args(userActivat_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public userActivat_args deepCopy() {
      return new userActivat_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public userActivat_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userActivat_args)
        return this.equals((userActivat_args)that);
      return false;
    }

    public boolean equals(userActivat_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(userActivat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userActivat_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userActivat_argsStandardSchemeFactory implements SchemeFactory {
      public userActivat_argsStandardScheme getScheme() {
        return new userActivat_argsStandardScheme();
      }
    }

    private static class userActivat_argsStandardScheme extends StandardScheme<userActivat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userActivat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map108 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map108.size);
                  String _key109;
                  String _val110;
                  for (int _i111 = 0; _i111 < _map108.size; ++_i111)
                  {
                    _key109 = iprot.readString();
                    _val110 = iprot.readString();
                    struct.datamap.put(_key109, _val110);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userActivat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter112 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter112.getKey());
              oprot.writeString(_iter112.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userActivat_argsTupleSchemeFactory implements SchemeFactory {
      public userActivat_argsTupleScheme getScheme() {
        return new userActivat_argsTupleScheme();
      }
    }

    private static class userActivat_argsTupleScheme extends TupleScheme<userActivat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userActivat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter113 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter113.getKey());
              oprot.writeString(_iter113.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userActivat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map114 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map114.size);
            String _key115;
            String _val116;
            for (int _i117 = 0; _i117 < _map114.size; ++_i117)
            {
              _key115 = iprot.readString();
              _val116 = iprot.readString();
              struct.datamap.put(_key115, _val116);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class userActivat_result implements org.apache.thrift.TBase<userActivat_result, userActivat_result._Fields>, java.io.Serializable, Cloneable, Comparable<userActivat_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userActivat_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userActivat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userActivat_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userActivat_result.class, metaDataMap);
    }

    public userActivat_result() {
    }

    public userActivat_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userActivat_result(userActivat_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public userActivat_result deepCopy() {
      return new userActivat_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public userActivat_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userActivat_result)
        return this.equals((userActivat_result)that);
      return false;
    }

    public boolean equals(userActivat_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(userActivat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userActivat_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userActivat_resultStandardSchemeFactory implements SchemeFactory {
      public userActivat_resultStandardScheme getScheme() {
        return new userActivat_resultStandardScheme();
      }
    }

    private static class userActivat_resultStandardScheme extends StandardScheme<userActivat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userActivat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userActivat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userActivat_resultTupleSchemeFactory implements SchemeFactory {
      public userActivat_resultTupleScheme getScheme() {
        return new userActivat_resultTupleScheme();
      }
    }

    private static class userActivat_resultTupleScheme extends TupleScheme<userActivat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userActivat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userActivat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class userLogOut_args implements org.apache.thrift.TBase<userLogOut_args, userLogOut_args._Fields>, java.io.Serializable, Cloneable, Comparable<userLogOut_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userLogOut_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userLogOut_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userLogOut_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userLogOut_args.class, metaDataMap);
    }

    public userLogOut_args() {
    }

    public userLogOut_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userLogOut_args(userLogOut_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public userLogOut_args deepCopy() {
      return new userLogOut_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public userLogOut_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userLogOut_args)
        return this.equals((userLogOut_args)that);
      return false;
    }

    public boolean equals(userLogOut_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(userLogOut_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userLogOut_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userLogOut_argsStandardSchemeFactory implements SchemeFactory {
      public userLogOut_argsStandardScheme getScheme() {
        return new userLogOut_argsStandardScheme();
      }
    }

    private static class userLogOut_argsStandardScheme extends StandardScheme<userLogOut_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userLogOut_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map118 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map118.size);
                  String _key119;
                  String _val120;
                  for (int _i121 = 0; _i121 < _map118.size; ++_i121)
                  {
                    _key119 = iprot.readString();
                    _val120 = iprot.readString();
                    struct.datamap.put(_key119, _val120);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userLogOut_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter122 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter122.getKey());
              oprot.writeString(_iter122.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userLogOut_argsTupleSchemeFactory implements SchemeFactory {
      public userLogOut_argsTupleScheme getScheme() {
        return new userLogOut_argsTupleScheme();
      }
    }

    private static class userLogOut_argsTupleScheme extends TupleScheme<userLogOut_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userLogOut_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter123 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter123.getKey());
              oprot.writeString(_iter123.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userLogOut_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map124 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map124.size);
            String _key125;
            String _val126;
            for (int _i127 = 0; _i127 < _map124.size; ++_i127)
            {
              _key125 = iprot.readString();
              _val126 = iprot.readString();
              struct.datamap.put(_key125, _val126);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class userLogOut_result implements org.apache.thrift.TBase<userLogOut_result, userLogOut_result._Fields>, java.io.Serializable, Cloneable, Comparable<userLogOut_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userLogOut_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userLogOut_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userLogOut_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userLogOut_result.class, metaDataMap);
    }

    public userLogOut_result() {
    }

    public userLogOut_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userLogOut_result(userLogOut_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public userLogOut_result deepCopy() {
      return new userLogOut_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public userLogOut_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userLogOut_result)
        return this.equals((userLogOut_result)that);
      return false;
    }

    public boolean equals(userLogOut_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(userLogOut_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userLogOut_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userLogOut_resultStandardSchemeFactory implements SchemeFactory {
      public userLogOut_resultStandardScheme getScheme() {
        return new userLogOut_resultStandardScheme();
      }
    }

    private static class userLogOut_resultStandardScheme extends StandardScheme<userLogOut_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userLogOut_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userLogOut_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userLogOut_resultTupleSchemeFactory implements SchemeFactory {
      public userLogOut_resultTupleScheme getScheme() {
        return new userLogOut_resultTupleScheme();
      }
    }

    private static class userLogOut_resultTupleScheme extends TupleScheme<userLogOut_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userLogOut_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userLogOut_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class userQuery_args implements org.apache.thrift.TBase<userQuery_args, userQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<userQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userQuery_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userQuery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userQuery_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userQuery_args.class, metaDataMap);
    }

    public userQuery_args() {
    }

    public userQuery_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userQuery_args(userQuery_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public userQuery_args deepCopy() {
      return new userQuery_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public userQuery_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userQuery_args)
        return this.equals((userQuery_args)that);
      return false;
    }

    public boolean equals(userQuery_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(userQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userQuery_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userQuery_argsStandardSchemeFactory implements SchemeFactory {
      public userQuery_argsStandardScheme getScheme() {
        return new userQuery_argsStandardScheme();
      }
    }

    private static class userQuery_argsStandardScheme extends StandardScheme<userQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map128 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map128.size);
                  String _key129;
                  String _val130;
                  for (int _i131 = 0; _i131 < _map128.size; ++_i131)
                  {
                    _key129 = iprot.readString();
                    _val130 = iprot.readString();
                    struct.datamap.put(_key129, _val130);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter132 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter132.getKey());
              oprot.writeString(_iter132.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userQuery_argsTupleSchemeFactory implements SchemeFactory {
      public userQuery_argsTupleScheme getScheme() {
        return new userQuery_argsTupleScheme();
      }
    }

    private static class userQuery_argsTupleScheme extends TupleScheme<userQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter133 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter133.getKey());
              oprot.writeString(_iter133.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map134 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map134.size);
            String _key135;
            String _val136;
            for (int _i137 = 0; _i137 < _map134.size; ++_i137)
            {
              _key135 = iprot.readString();
              _val136 = iprot.readString();
              struct.datamap.put(_key135, _val136);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class userQuery_result implements org.apache.thrift.TBase<userQuery_result, userQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<userQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userQuery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userQuery_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userQuery_result.class, metaDataMap);
    }

    public userQuery_result() {
    }

    public userQuery_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userQuery_result(userQuery_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public userQuery_result deepCopy() {
      return new userQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public userQuery_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userQuery_result)
        return this.equals((userQuery_result)that);
      return false;
    }

    public boolean equals(userQuery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(userQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userQuery_resultStandardSchemeFactory implements SchemeFactory {
      public userQuery_resultStandardScheme getScheme() {
        return new userQuery_resultStandardScheme();
      }
    }

    private static class userQuery_resultStandardScheme extends StandardScheme<userQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userQuery_resultTupleSchemeFactory implements SchemeFactory {
      public userQuery_resultTupleScheme getScheme() {
        return new userQuery_resultTupleScheme();
      }
    }

    private static class userQuery_resultTupleScheme extends TupleScheme<userQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class certLogin_args implements org.apache.thrift.TBase<certLogin_args, certLogin_args._Fields>, java.io.Serializable, Cloneable, Comparable<certLogin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("certLogin_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new certLogin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new certLogin_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(certLogin_args.class, metaDataMap);
    }

    public certLogin_args() {
    }

    public certLogin_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public certLogin_args(certLogin_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public certLogin_args deepCopy() {
      return new certLogin_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public certLogin_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof certLogin_args)
        return this.equals((certLogin_args)that);
      return false;
    }

    public boolean equals(certLogin_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(certLogin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("certLogin_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class certLogin_argsStandardSchemeFactory implements SchemeFactory {
      public certLogin_argsStandardScheme getScheme() {
        return new certLogin_argsStandardScheme();
      }
    }

    private static class certLogin_argsStandardScheme extends StandardScheme<certLogin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, certLogin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map138 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map138.size);
                  String _key139;
                  String _val140;
                  for (int _i141 = 0; _i141 < _map138.size; ++_i141)
                  {
                    _key139 = iprot.readString();
                    _val140 = iprot.readString();
                    struct.datamap.put(_key139, _val140);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, certLogin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter142 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter142.getKey());
              oprot.writeString(_iter142.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class certLogin_argsTupleSchemeFactory implements SchemeFactory {
      public certLogin_argsTupleScheme getScheme() {
        return new certLogin_argsTupleScheme();
      }
    }

    private static class certLogin_argsTupleScheme extends TupleScheme<certLogin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, certLogin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter143 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter143.getKey());
              oprot.writeString(_iter143.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, certLogin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map144 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map144.size);
            String _key145;
            String _val146;
            for (int _i147 = 0; _i147 < _map144.size; ++_i147)
            {
              _key145 = iprot.readString();
              _val146 = iprot.readString();
              struct.datamap.put(_key145, _val146);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class certLogin_result implements org.apache.thrift.TBase<certLogin_result, certLogin_result._Fields>, java.io.Serializable, Cloneable, Comparable<certLogin_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("certLogin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new certLogin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new certLogin_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(certLogin_result.class, metaDataMap);
    }

    public certLogin_result() {
    }

    public certLogin_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public certLogin_result(certLogin_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public certLogin_result deepCopy() {
      return new certLogin_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public certLogin_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof certLogin_result)
        return this.equals((certLogin_result)that);
      return false;
    }

    public boolean equals(certLogin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(certLogin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("certLogin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class certLogin_resultStandardSchemeFactory implements SchemeFactory {
      public certLogin_resultStandardScheme getScheme() {
        return new certLogin_resultStandardScheme();
      }
    }

    private static class certLogin_resultStandardScheme extends StandardScheme<certLogin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, certLogin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, certLogin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class certLogin_resultTupleSchemeFactory implements SchemeFactory {
      public certLogin_resultTupleScheme getScheme() {
        return new certLogin_resultTupleScheme();
      }
    }

    private static class certLogin_resultTupleScheme extends TupleScheme<certLogin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, certLogin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, certLogin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class certRegister_args implements org.apache.thrift.TBase<certRegister_args, certRegister_args._Fields>, java.io.Serializable, Cloneable, Comparable<certRegister_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("certRegister_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new certRegister_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new certRegister_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(certRegister_args.class, metaDataMap);
    }

    public certRegister_args() {
    }

    public certRegister_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public certRegister_args(certRegister_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public certRegister_args deepCopy() {
      return new certRegister_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public certRegister_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof certRegister_args)
        return this.equals((certRegister_args)that);
      return false;
    }

    public boolean equals(certRegister_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(certRegister_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("certRegister_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class certRegister_argsStandardSchemeFactory implements SchemeFactory {
      public certRegister_argsStandardScheme getScheme() {
        return new certRegister_argsStandardScheme();
      }
    }

    private static class certRegister_argsStandardScheme extends StandardScheme<certRegister_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, certRegister_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map148 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map148.size);
                  String _key149;
                  String _val150;
                  for (int _i151 = 0; _i151 < _map148.size; ++_i151)
                  {
                    _key149 = iprot.readString();
                    _val150 = iprot.readString();
                    struct.datamap.put(_key149, _val150);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, certRegister_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter152 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter152.getKey());
              oprot.writeString(_iter152.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class certRegister_argsTupleSchemeFactory implements SchemeFactory {
      public certRegister_argsTupleScheme getScheme() {
        return new certRegister_argsTupleScheme();
      }
    }

    private static class certRegister_argsTupleScheme extends TupleScheme<certRegister_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, certRegister_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter153 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter153.getKey());
              oprot.writeString(_iter153.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, certRegister_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map154 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map154.size);
            String _key155;
            String _val156;
            for (int _i157 = 0; _i157 < _map154.size; ++_i157)
            {
              _key155 = iprot.readString();
              _val156 = iprot.readString();
              struct.datamap.put(_key155, _val156);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class certRegister_result implements org.apache.thrift.TBase<certRegister_result, certRegister_result._Fields>, java.io.Serializable, Cloneable, Comparable<certRegister_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("certRegister_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new certRegister_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new certRegister_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(certRegister_result.class, metaDataMap);
    }

    public certRegister_result() {
    }

    public certRegister_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public certRegister_result(certRegister_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public certRegister_result deepCopy() {
      return new certRegister_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public certRegister_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof certRegister_result)
        return this.equals((certRegister_result)that);
      return false;
    }

    public boolean equals(certRegister_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(certRegister_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("certRegister_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class certRegister_resultStandardSchemeFactory implements SchemeFactory {
      public certRegister_resultStandardScheme getScheme() {
        return new certRegister_resultStandardScheme();
      }
    }

    private static class certRegister_resultStandardScheme extends StandardScheme<certRegister_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, certRegister_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, certRegister_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class certRegister_resultTupleSchemeFactory implements SchemeFactory {
      public certRegister_resultTupleScheme getScheme() {
        return new certRegister_resultTupleScheme();
      }
    }

    private static class certRegister_resultTupleScheme extends TupleScheme<certRegister_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, certRegister_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, certRegister_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class certQuery_args implements org.apache.thrift.TBase<certQuery_args, certQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<certQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("certQuery_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new certQuery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new certQuery_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(certQuery_args.class, metaDataMap);
    }

    public certQuery_args() {
    }

    public certQuery_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public certQuery_args(certQuery_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public certQuery_args deepCopy() {
      return new certQuery_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public certQuery_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof certQuery_args)
        return this.equals((certQuery_args)that);
      return false;
    }

    public boolean equals(certQuery_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(certQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("certQuery_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class certQuery_argsStandardSchemeFactory implements SchemeFactory {
      public certQuery_argsStandardScheme getScheme() {
        return new certQuery_argsStandardScheme();
      }
    }

    private static class certQuery_argsStandardScheme extends StandardScheme<certQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, certQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map158 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map158.size);
                  String _key159;
                  String _val160;
                  for (int _i161 = 0; _i161 < _map158.size; ++_i161)
                  {
                    _key159 = iprot.readString();
                    _val160 = iprot.readString();
                    struct.datamap.put(_key159, _val160);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, certQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter162 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter162.getKey());
              oprot.writeString(_iter162.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class certQuery_argsTupleSchemeFactory implements SchemeFactory {
      public certQuery_argsTupleScheme getScheme() {
        return new certQuery_argsTupleScheme();
      }
    }

    private static class certQuery_argsTupleScheme extends TupleScheme<certQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, certQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter163 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter163.getKey());
              oprot.writeString(_iter163.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, certQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map164 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map164.size);
            String _key165;
            String _val166;
            for (int _i167 = 0; _i167 < _map164.size; ++_i167)
            {
              _key165 = iprot.readString();
              _val166 = iprot.readString();
              struct.datamap.put(_key165, _val166);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class certQuery_result implements org.apache.thrift.TBase<certQuery_result, certQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<certQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("certQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new certQuery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new certQuery_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(certQuery_result.class, metaDataMap);
    }

    public certQuery_result() {
    }

    public certQuery_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public certQuery_result(certQuery_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public certQuery_result deepCopy() {
      return new certQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public certQuery_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof certQuery_result)
        return this.equals((certQuery_result)that);
      return false;
    }

    public boolean equals(certQuery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(certQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("certQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class certQuery_resultStandardSchemeFactory implements SchemeFactory {
      public certQuery_resultStandardScheme getScheme() {
        return new certQuery_resultStandardScheme();
      }
    }

    private static class certQuery_resultStandardScheme extends StandardScheme<certQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, certQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, certQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class certQuery_resultTupleSchemeFactory implements SchemeFactory {
      public certQuery_resultTupleScheme getScheme() {
        return new certQuery_resultTupleScheme();
      }
    }

    private static class certQuery_resultTupleScheme extends TupleScheme<certQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, certQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, certQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class certActive_args implements org.apache.thrift.TBase<certActive_args, certActive_args._Fields>, java.io.Serializable, Cloneable, Comparable<certActive_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("certActive_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new certActive_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new certActive_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(certActive_args.class, metaDataMap);
    }

    public certActive_args() {
    }

    public certActive_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public certActive_args(certActive_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public certActive_args deepCopy() {
      return new certActive_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public certActive_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof certActive_args)
        return this.equals((certActive_args)that);
      return false;
    }

    public boolean equals(certActive_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(certActive_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("certActive_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class certActive_argsStandardSchemeFactory implements SchemeFactory {
      public certActive_argsStandardScheme getScheme() {
        return new certActive_argsStandardScheme();
      }
    }

    private static class certActive_argsStandardScheme extends StandardScheme<certActive_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, certActive_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map168 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map168.size);
                  String _key169;
                  String _val170;
                  for (int _i171 = 0; _i171 < _map168.size; ++_i171)
                  {
                    _key169 = iprot.readString();
                    _val170 = iprot.readString();
                    struct.datamap.put(_key169, _val170);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, certActive_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter172 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter172.getKey());
              oprot.writeString(_iter172.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class certActive_argsTupleSchemeFactory implements SchemeFactory {
      public certActive_argsTupleScheme getScheme() {
        return new certActive_argsTupleScheme();
      }
    }

    private static class certActive_argsTupleScheme extends TupleScheme<certActive_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, certActive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter173 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter173.getKey());
              oprot.writeString(_iter173.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, certActive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map174 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map174.size);
            String _key175;
            String _val176;
            for (int _i177 = 0; _i177 < _map174.size; ++_i177)
            {
              _key175 = iprot.readString();
              _val176 = iprot.readString();
              struct.datamap.put(_key175, _val176);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class certActive_result implements org.apache.thrift.TBase<certActive_result, certActive_result._Fields>, java.io.Serializable, Cloneable, Comparable<certActive_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("certActive_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new certActive_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new certActive_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(certActive_result.class, metaDataMap);
    }

    public certActive_result() {
    }

    public certActive_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public certActive_result(certActive_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public certActive_result deepCopy() {
      return new certActive_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public certActive_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof certActive_result)
        return this.equals((certActive_result)that);
      return false;
    }

    public boolean equals(certActive_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(certActive_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("certActive_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class certActive_resultStandardSchemeFactory implements SchemeFactory {
      public certActive_resultStandardScheme getScheme() {
        return new certActive_resultStandardScheme();
      }
    }

    private static class certActive_resultStandardScheme extends StandardScheme<certActive_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, certActive_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, certActive_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class certActive_resultTupleSchemeFactory implements SchemeFactory {
      public certActive_resultTupleScheme getScheme() {
        return new certActive_resultTupleScheme();
      }
    }

    private static class certActive_resultTupleScheme extends TupleScheme<certActive_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, certActive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, certActive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class certUnbund_args implements org.apache.thrift.TBase<certUnbund_args, certUnbund_args._Fields>, java.io.Serializable, Cloneable, Comparable<certUnbund_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("certUnbund_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new certUnbund_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new certUnbund_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(certUnbund_args.class, metaDataMap);
    }

    public certUnbund_args() {
    }

    public certUnbund_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public certUnbund_args(certUnbund_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public certUnbund_args deepCopy() {
      return new certUnbund_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public certUnbund_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof certUnbund_args)
        return this.equals((certUnbund_args)that);
      return false;
    }

    public boolean equals(certUnbund_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(certUnbund_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("certUnbund_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class certUnbund_argsStandardSchemeFactory implements SchemeFactory {
      public certUnbund_argsStandardScheme getScheme() {
        return new certUnbund_argsStandardScheme();
      }
    }

    private static class certUnbund_argsStandardScheme extends StandardScheme<certUnbund_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, certUnbund_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map178 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map178.size);
                  String _key179;
                  String _val180;
                  for (int _i181 = 0; _i181 < _map178.size; ++_i181)
                  {
                    _key179 = iprot.readString();
                    _val180 = iprot.readString();
                    struct.datamap.put(_key179, _val180);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, certUnbund_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter182 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter182.getKey());
              oprot.writeString(_iter182.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class certUnbund_argsTupleSchemeFactory implements SchemeFactory {
      public certUnbund_argsTupleScheme getScheme() {
        return new certUnbund_argsTupleScheme();
      }
    }

    private static class certUnbund_argsTupleScheme extends TupleScheme<certUnbund_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, certUnbund_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter183 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter183.getKey());
              oprot.writeString(_iter183.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, certUnbund_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map184 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map184.size);
            String _key185;
            String _val186;
            for (int _i187 = 0; _i187 < _map184.size; ++_i187)
            {
              _key185 = iprot.readString();
              _val186 = iprot.readString();
              struct.datamap.put(_key185, _val186);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class certUnbund_result implements org.apache.thrift.TBase<certUnbund_result, certUnbund_result._Fields>, java.io.Serializable, Cloneable, Comparable<certUnbund_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("certUnbund_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new certUnbund_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new certUnbund_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(certUnbund_result.class, metaDataMap);
    }

    public certUnbund_result() {
    }

    public certUnbund_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public certUnbund_result(certUnbund_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public certUnbund_result deepCopy() {
      return new certUnbund_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public certUnbund_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof certUnbund_result)
        return this.equals((certUnbund_result)that);
      return false;
    }

    public boolean equals(certUnbund_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(certUnbund_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("certUnbund_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class certUnbund_resultStandardSchemeFactory implements SchemeFactory {
      public certUnbund_resultStandardScheme getScheme() {
        return new certUnbund_resultStandardScheme();
      }
    }

    private static class certUnbund_resultStandardScheme extends StandardScheme<certUnbund_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, certUnbund_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, certUnbund_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class certUnbund_resultTupleSchemeFactory implements SchemeFactory {
      public certUnbund_resultTupleScheme getScheme() {
        return new certUnbund_resultTupleScheme();
      }
    }

    private static class certUnbund_resultTupleScheme extends TupleScheme<certUnbund_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, certUnbund_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, certUnbund_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class platformRegister_args implements org.apache.thrift.TBase<platformRegister_args, platformRegister_args._Fields>, java.io.Serializable, Cloneable, Comparable<platformRegister_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("platformRegister_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new platformRegister_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new platformRegister_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(platformRegister_args.class, metaDataMap);
    }

    public platformRegister_args() {
    }

    public platformRegister_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public platformRegister_args(platformRegister_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public platformRegister_args deepCopy() {
      return new platformRegister_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public platformRegister_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof platformRegister_args)
        return this.equals((platformRegister_args)that);
      return false;
    }

    public boolean equals(platformRegister_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(platformRegister_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("platformRegister_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class platformRegister_argsStandardSchemeFactory implements SchemeFactory {
      public platformRegister_argsStandardScheme getScheme() {
        return new platformRegister_argsStandardScheme();
      }
    }

    private static class platformRegister_argsStandardScheme extends StandardScheme<platformRegister_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, platformRegister_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map188 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map188.size);
                  String _key189;
                  String _val190;
                  for (int _i191 = 0; _i191 < _map188.size; ++_i191)
                  {
                    _key189 = iprot.readString();
                    _val190 = iprot.readString();
                    struct.datamap.put(_key189, _val190);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, platformRegister_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter192 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter192.getKey());
              oprot.writeString(_iter192.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class platformRegister_argsTupleSchemeFactory implements SchemeFactory {
      public platformRegister_argsTupleScheme getScheme() {
        return new platformRegister_argsTupleScheme();
      }
    }

    private static class platformRegister_argsTupleScheme extends TupleScheme<platformRegister_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, platformRegister_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter193 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter193.getKey());
              oprot.writeString(_iter193.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, platformRegister_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map194 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map194.size);
            String _key195;
            String _val196;
            for (int _i197 = 0; _i197 < _map194.size; ++_i197)
            {
              _key195 = iprot.readString();
              _val196 = iprot.readString();
              struct.datamap.put(_key195, _val196);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class platformRegister_result implements org.apache.thrift.TBase<platformRegister_result, platformRegister_result._Fields>, java.io.Serializable, Cloneable, Comparable<platformRegister_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("platformRegister_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new platformRegister_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new platformRegister_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(platformRegister_result.class, metaDataMap);
    }

    public platformRegister_result() {
    }

    public platformRegister_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public platformRegister_result(platformRegister_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public platformRegister_result deepCopy() {
      return new platformRegister_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public platformRegister_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof platformRegister_result)
        return this.equals((platformRegister_result)that);
      return false;
    }

    public boolean equals(platformRegister_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(platformRegister_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("platformRegister_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class platformRegister_resultStandardSchemeFactory implements SchemeFactory {
      public platformRegister_resultStandardScheme getScheme() {
        return new platformRegister_resultStandardScheme();
      }
    }

    private static class platformRegister_resultStandardScheme extends StandardScheme<platformRegister_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, platformRegister_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, platformRegister_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class platformRegister_resultTupleSchemeFactory implements SchemeFactory {
      public platformRegister_resultTupleScheme getScheme() {
        return new platformRegister_resultTupleScheme();
      }
    }

    private static class platformRegister_resultTupleScheme extends TupleScheme<platformRegister_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, platformRegister_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, platformRegister_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class platformVerify_args implements org.apache.thrift.TBase<platformVerify_args, platformVerify_args._Fields>, java.io.Serializable, Cloneable, Comparable<platformVerify_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("platformVerify_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new platformVerify_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new platformVerify_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(platformVerify_args.class, metaDataMap);
    }

    public platformVerify_args() {
    }

    public platformVerify_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public platformVerify_args(platformVerify_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public platformVerify_args deepCopy() {
      return new platformVerify_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public platformVerify_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof platformVerify_args)
        return this.equals((platformVerify_args)that);
      return false;
    }

    public boolean equals(platformVerify_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(platformVerify_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("platformVerify_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class platformVerify_argsStandardSchemeFactory implements SchemeFactory {
      public platformVerify_argsStandardScheme getScheme() {
        return new platformVerify_argsStandardScheme();
      }
    }

    private static class platformVerify_argsStandardScheme extends StandardScheme<platformVerify_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, platformVerify_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map198 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map198.size);
                  String _key199;
                  String _val200;
                  for (int _i201 = 0; _i201 < _map198.size; ++_i201)
                  {
                    _key199 = iprot.readString();
                    _val200 = iprot.readString();
                    struct.datamap.put(_key199, _val200);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, platformVerify_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter202 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter202.getKey());
              oprot.writeString(_iter202.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class platformVerify_argsTupleSchemeFactory implements SchemeFactory {
      public platformVerify_argsTupleScheme getScheme() {
        return new platformVerify_argsTupleScheme();
      }
    }

    private static class platformVerify_argsTupleScheme extends TupleScheme<platformVerify_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, platformVerify_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter203 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter203.getKey());
              oprot.writeString(_iter203.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, platformVerify_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map204 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map204.size);
            String _key205;
            String _val206;
            for (int _i207 = 0; _i207 < _map204.size; ++_i207)
            {
              _key205 = iprot.readString();
              _val206 = iprot.readString();
              struct.datamap.put(_key205, _val206);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class platformVerify_result implements org.apache.thrift.TBase<platformVerify_result, platformVerify_result._Fields>, java.io.Serializable, Cloneable, Comparable<platformVerify_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("platformVerify_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new platformVerify_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new platformVerify_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(platformVerify_result.class, metaDataMap);
    }

    public platformVerify_result() {
    }

    public platformVerify_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public platformVerify_result(platformVerify_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public platformVerify_result deepCopy() {
      return new platformVerify_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public platformVerify_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof platformVerify_result)
        return this.equals((platformVerify_result)that);
      return false;
    }

    public boolean equals(platformVerify_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(platformVerify_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("platformVerify_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class platformVerify_resultStandardSchemeFactory implements SchemeFactory {
      public platformVerify_resultStandardScheme getScheme() {
        return new platformVerify_resultStandardScheme();
      }
    }

    private static class platformVerify_resultStandardScheme extends StandardScheme<platformVerify_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, platformVerify_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, platformVerify_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class platformVerify_resultTupleSchemeFactory implements SchemeFactory {
      public platformVerify_resultTupleScheme getScheme() {
        return new platformVerify_resultTupleScheme();
      }
    }

    private static class platformVerify_resultTupleScheme extends TupleScheme<platformVerify_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, platformVerify_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, platformVerify_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class platformQuery_args implements org.apache.thrift.TBase<platformQuery_args, platformQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<platformQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("platformQuery_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new platformQuery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new platformQuery_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(platformQuery_args.class, metaDataMap);
    }

    public platformQuery_args() {
    }

    public platformQuery_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public platformQuery_args(platformQuery_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public platformQuery_args deepCopy() {
      return new platformQuery_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public platformQuery_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof platformQuery_args)
        return this.equals((platformQuery_args)that);
      return false;
    }

    public boolean equals(platformQuery_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(platformQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("platformQuery_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class platformQuery_argsStandardSchemeFactory implements SchemeFactory {
      public platformQuery_argsStandardScheme getScheme() {
        return new platformQuery_argsStandardScheme();
      }
    }

    private static class platformQuery_argsStandardScheme extends StandardScheme<platformQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, platformQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map208 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map208.size);
                  String _key209;
                  String _val210;
                  for (int _i211 = 0; _i211 < _map208.size; ++_i211)
                  {
                    _key209 = iprot.readString();
                    _val210 = iprot.readString();
                    struct.datamap.put(_key209, _val210);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, platformQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter212 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter212.getKey());
              oprot.writeString(_iter212.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class platformQuery_argsTupleSchemeFactory implements SchemeFactory {
      public platformQuery_argsTupleScheme getScheme() {
        return new platformQuery_argsTupleScheme();
      }
    }

    private static class platformQuery_argsTupleScheme extends TupleScheme<platformQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, platformQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter213 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter213.getKey());
              oprot.writeString(_iter213.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, platformQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map214 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map214.size);
            String _key215;
            String _val216;
            for (int _i217 = 0; _i217 < _map214.size; ++_i217)
            {
              _key215 = iprot.readString();
              _val216 = iprot.readString();
              struct.datamap.put(_key215, _val216);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class platformQuery_result implements org.apache.thrift.TBase<platformQuery_result, platformQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<platformQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("platformQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new platformQuery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new platformQuery_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(platformQuery_result.class, metaDataMap);
    }

    public platformQuery_result() {
    }

    public platformQuery_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public platformQuery_result(platformQuery_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public platformQuery_result deepCopy() {
      return new platformQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public platformQuery_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof platformQuery_result)
        return this.equals((platformQuery_result)that);
      return false;
    }

    public boolean equals(platformQuery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(platformQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("platformQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class platformQuery_resultStandardSchemeFactory implements SchemeFactory {
      public platformQuery_resultStandardScheme getScheme() {
        return new platformQuery_resultStandardScheme();
      }
    }

    private static class platformQuery_resultStandardScheme extends StandardScheme<platformQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, platformQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, platformQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class platformQuery_resultTupleSchemeFactory implements SchemeFactory {
      public platformQuery_resultTupleScheme getScheme() {
        return new platformQuery_resultTupleScheme();
      }
    }

    private static class platformQuery_resultTupleScheme extends TupleScheme<platformQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, platformQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, platformQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCustomByMobile_args implements org.apache.thrift.TBase<getCustomByMobile_args, getCustomByMobile_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCustomByMobile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCustomByMobile_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCustomByMobile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCustomByMobile_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCustomByMobile_args.class, metaDataMap);
    }

    public getCustomByMobile_args() {
    }

    public getCustomByMobile_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCustomByMobile_args(getCustomByMobile_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public getCustomByMobile_args deepCopy() {
      return new getCustomByMobile_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public getCustomByMobile_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCustomByMobile_args)
        return this.equals((getCustomByMobile_args)that);
      return false;
    }

    public boolean equals(getCustomByMobile_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCustomByMobile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCustomByMobile_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCustomByMobile_argsStandardSchemeFactory implements SchemeFactory {
      public getCustomByMobile_argsStandardScheme getScheme() {
        return new getCustomByMobile_argsStandardScheme();
      }
    }

    private static class getCustomByMobile_argsStandardScheme extends StandardScheme<getCustomByMobile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCustomByMobile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map218 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map218.size);
                  String _key219;
                  String _val220;
                  for (int _i221 = 0; _i221 < _map218.size; ++_i221)
                  {
                    _key219 = iprot.readString();
                    _val220 = iprot.readString();
                    struct.datamap.put(_key219, _val220);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCustomByMobile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter222 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter222.getKey());
              oprot.writeString(_iter222.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCustomByMobile_argsTupleSchemeFactory implements SchemeFactory {
      public getCustomByMobile_argsTupleScheme getScheme() {
        return new getCustomByMobile_argsTupleScheme();
      }
    }

    private static class getCustomByMobile_argsTupleScheme extends TupleScheme<getCustomByMobile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCustomByMobile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter223 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter223.getKey());
              oprot.writeString(_iter223.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCustomByMobile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map224 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map224.size);
            String _key225;
            String _val226;
            for (int _i227 = 0; _i227 < _map224.size; ++_i227)
            {
              _key225 = iprot.readString();
              _val226 = iprot.readString();
              struct.datamap.put(_key225, _val226);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class getCustomByMobile_result implements org.apache.thrift.TBase<getCustomByMobile_result, getCustomByMobile_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCustomByMobile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCustomByMobile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCustomByMobile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCustomByMobile_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCustomByMobile_result.class, metaDataMap);
    }

    public getCustomByMobile_result() {
    }

    public getCustomByMobile_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCustomByMobile_result(getCustomByMobile_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public getCustomByMobile_result deepCopy() {
      return new getCustomByMobile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public getCustomByMobile_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCustomByMobile_result)
        return this.equals((getCustomByMobile_result)that);
      return false;
    }

    public boolean equals(getCustomByMobile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCustomByMobile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCustomByMobile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCustomByMobile_resultStandardSchemeFactory implements SchemeFactory {
      public getCustomByMobile_resultStandardScheme getScheme() {
        return new getCustomByMobile_resultStandardScheme();
      }
    }

    private static class getCustomByMobile_resultStandardScheme extends StandardScheme<getCustomByMobile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCustomByMobile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCustomByMobile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCustomByMobile_resultTupleSchemeFactory implements SchemeFactory {
      public getCustomByMobile_resultTupleScheme getScheme() {
        return new getCustomByMobile_resultTupleScheme();
      }
    }

    private static class getCustomByMobile_resultTupleScheme extends TupleScheme<getCustomByMobile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCustomByMobile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCustomByMobile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCompanyByEmail_args implements org.apache.thrift.TBase<getCompanyByEmail_args, getCompanyByEmail_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCompanyByEmail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompanyByEmail_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCompanyByEmail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCompanyByEmail_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompanyByEmail_args.class, metaDataMap);
    }

    public getCompanyByEmail_args() {
    }

    public getCompanyByEmail_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompanyByEmail_args(getCompanyByEmail_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public getCompanyByEmail_args deepCopy() {
      return new getCompanyByEmail_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public getCompanyByEmail_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCompanyByEmail_args)
        return this.equals((getCompanyByEmail_args)that);
      return false;
    }

    public boolean equals(getCompanyByEmail_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCompanyByEmail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCompanyByEmail_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCompanyByEmail_argsStandardSchemeFactory implements SchemeFactory {
      public getCompanyByEmail_argsStandardScheme getScheme() {
        return new getCompanyByEmail_argsStandardScheme();
      }
    }

    private static class getCompanyByEmail_argsStandardScheme extends StandardScheme<getCompanyByEmail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCompanyByEmail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map228 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map228.size);
                  String _key229;
                  String _val230;
                  for (int _i231 = 0; _i231 < _map228.size; ++_i231)
                  {
                    _key229 = iprot.readString();
                    _val230 = iprot.readString();
                    struct.datamap.put(_key229, _val230);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCompanyByEmail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter232 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter232.getKey());
              oprot.writeString(_iter232.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCompanyByEmail_argsTupleSchemeFactory implements SchemeFactory {
      public getCompanyByEmail_argsTupleScheme getScheme() {
        return new getCompanyByEmail_argsTupleScheme();
      }
    }

    private static class getCompanyByEmail_argsTupleScheme extends TupleScheme<getCompanyByEmail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCompanyByEmail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter233 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter233.getKey());
              oprot.writeString(_iter233.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCompanyByEmail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map234 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map234.size);
            String _key235;
            String _val236;
            for (int _i237 = 0; _i237 < _map234.size; ++_i237)
            {
              _key235 = iprot.readString();
              _val236 = iprot.readString();
              struct.datamap.put(_key235, _val236);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class getCompanyByEmail_result implements org.apache.thrift.TBase<getCompanyByEmail_result, getCompanyByEmail_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCompanyByEmail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompanyByEmail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCompanyByEmail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCompanyByEmail_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompanyByEmail_result.class, metaDataMap);
    }

    public getCompanyByEmail_result() {
    }

    public getCompanyByEmail_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompanyByEmail_result(getCompanyByEmail_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public getCompanyByEmail_result deepCopy() {
      return new getCompanyByEmail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public getCompanyByEmail_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCompanyByEmail_result)
        return this.equals((getCompanyByEmail_result)that);
      return false;
    }

    public boolean equals(getCompanyByEmail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCompanyByEmail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCompanyByEmail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCompanyByEmail_resultStandardSchemeFactory implements SchemeFactory {
      public getCompanyByEmail_resultStandardScheme getScheme() {
        return new getCompanyByEmail_resultStandardScheme();
      }
    }

    private static class getCompanyByEmail_resultStandardScheme extends StandardScheme<getCompanyByEmail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCompanyByEmail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCompanyByEmail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCompanyByEmail_resultTupleSchemeFactory implements SchemeFactory {
      public getCompanyByEmail_resultTupleScheme getScheme() {
        return new getCompanyByEmail_resultTupleScheme();
      }
    }

    private static class getCompanyByEmail_resultTupleScheme extends TupleScheme<getCompanyByEmail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCompanyByEmail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCompanyByEmail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class openSigningRoom_args implements org.apache.thrift.TBase<openSigningRoom_args, openSigningRoom_args._Fields>, java.io.Serializable, Cloneable, Comparable<openSigningRoom_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openSigningRoom_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openSigningRoom_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openSigningRoom_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openSigningRoom_args.class, metaDataMap);
    }

    public openSigningRoom_args() {
    }

    public openSigningRoom_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openSigningRoom_args(openSigningRoom_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public openSigningRoom_args deepCopy() {
      return new openSigningRoom_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public openSigningRoom_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openSigningRoom_args)
        return this.equals((openSigningRoom_args)that);
      return false;
    }

    public boolean equals(openSigningRoom_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(openSigningRoom_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openSigningRoom_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openSigningRoom_argsStandardSchemeFactory implements SchemeFactory {
      public openSigningRoom_argsStandardScheme getScheme() {
        return new openSigningRoom_argsStandardScheme();
      }
    }

    private static class openSigningRoom_argsStandardScheme extends StandardScheme<openSigningRoom_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openSigningRoom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map238 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map238.size);
                  String _key239;
                  String _val240;
                  for (int _i241 = 0; _i241 < _map238.size; ++_i241)
                  {
                    _key239 = iprot.readString();
                    _val240 = iprot.readString();
                    struct.datamap.put(_key239, _val240);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openSigningRoom_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter242 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter242.getKey());
              oprot.writeString(_iter242.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openSigningRoom_argsTupleSchemeFactory implements SchemeFactory {
      public openSigningRoom_argsTupleScheme getScheme() {
        return new openSigningRoom_argsTupleScheme();
      }
    }

    private static class openSigningRoom_argsTupleScheme extends TupleScheme<openSigningRoom_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openSigningRoom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter243 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter243.getKey());
              oprot.writeString(_iter243.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openSigningRoom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map244 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map244.size);
            String _key245;
            String _val246;
            for (int _i247 = 0; _i247 < _map244.size; ++_i247)
            {
              _key245 = iprot.readString();
              _val246 = iprot.readString();
              struct.datamap.put(_key245, _val246);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class openSigningRoom_result implements org.apache.thrift.TBase<openSigningRoom_result, openSigningRoom_result._Fields>, java.io.Serializable, Cloneable, Comparable<openSigningRoom_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openSigningRoom_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openSigningRoom_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openSigningRoom_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openSigningRoom_result.class, metaDataMap);
    }

    public openSigningRoom_result() {
    }

    public openSigningRoom_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openSigningRoom_result(openSigningRoom_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public openSigningRoom_result deepCopy() {
      return new openSigningRoom_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public openSigningRoom_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openSigningRoom_result)
        return this.equals((openSigningRoom_result)that);
      return false;
    }

    public boolean equals(openSigningRoom_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(openSigningRoom_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openSigningRoom_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openSigningRoom_resultStandardSchemeFactory implements SchemeFactory {
      public openSigningRoom_resultStandardScheme getScheme() {
        return new openSigningRoom_resultStandardScheme();
      }
    }

    private static class openSigningRoom_resultStandardScheme extends StandardScheme<openSigningRoom_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openSigningRoom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openSigningRoom_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openSigningRoom_resultTupleSchemeFactory implements SchemeFactory {
      public openSigningRoom_resultTupleScheme getScheme() {
        return new openSigningRoom_resultTupleScheme();
      }
    }

    private static class openSigningRoom_resultTupleScheme extends TupleScheme<openSigningRoom_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openSigningRoom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openSigningRoom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class querySigningRoom_args implements org.apache.thrift.TBase<querySigningRoom_args, querySigningRoom_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySigningRoom_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySigningRoom_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySigningRoom_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySigningRoom_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySigningRoom_args.class, metaDataMap);
    }

    public querySigningRoom_args() {
    }

    public querySigningRoom_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySigningRoom_args(querySigningRoom_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public querySigningRoom_args deepCopy() {
      return new querySigningRoom_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public querySigningRoom_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySigningRoom_args)
        return this.equals((querySigningRoom_args)that);
      return false;
    }

    public boolean equals(querySigningRoom_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySigningRoom_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySigningRoom_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySigningRoom_argsStandardSchemeFactory implements SchemeFactory {
      public querySigningRoom_argsStandardScheme getScheme() {
        return new querySigningRoom_argsStandardScheme();
      }
    }

    private static class querySigningRoom_argsStandardScheme extends StandardScheme<querySigningRoom_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySigningRoom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map248 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map248.size);
                  String _key249;
                  String _val250;
                  for (int _i251 = 0; _i251 < _map248.size; ++_i251)
                  {
                    _key249 = iprot.readString();
                    _val250 = iprot.readString();
                    struct.datamap.put(_key249, _val250);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySigningRoom_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter252 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter252.getKey());
              oprot.writeString(_iter252.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySigningRoom_argsTupleSchemeFactory implements SchemeFactory {
      public querySigningRoom_argsTupleScheme getScheme() {
        return new querySigningRoom_argsTupleScheme();
      }
    }

    private static class querySigningRoom_argsTupleScheme extends TupleScheme<querySigningRoom_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySigningRoom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter253 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter253.getKey());
              oprot.writeString(_iter253.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySigningRoom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map254 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map254.size);
            String _key255;
            String _val256;
            for (int _i257 = 0; _i257 < _map254.size; ++_i257)
            {
              _key255 = iprot.readString();
              _val256 = iprot.readString();
              struct.datamap.put(_key255, _val256);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class querySigningRoom_result implements org.apache.thrift.TBase<querySigningRoom_result, querySigningRoom_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySigningRoom_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySigningRoom_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySigningRoom_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySigningRoom_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySigningRoom_result.class, metaDataMap);
    }

    public querySigningRoom_result() {
    }

    public querySigningRoom_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySigningRoom_result(querySigningRoom_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public querySigningRoom_result deepCopy() {
      return new querySigningRoom_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public querySigningRoom_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySigningRoom_result)
        return this.equals((querySigningRoom_result)that);
      return false;
    }

    public boolean equals(querySigningRoom_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySigningRoom_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySigningRoom_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySigningRoom_resultStandardSchemeFactory implements SchemeFactory {
      public querySigningRoom_resultStandardScheme getScheme() {
        return new querySigningRoom_resultStandardScheme();
      }
    }

    private static class querySigningRoom_resultStandardScheme extends StandardScheme<querySigningRoom_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySigningRoom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySigningRoom_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySigningRoom_resultTupleSchemeFactory implements SchemeFactory {
      public querySigningRoom_resultTupleScheme getScheme() {
        return new querySigningRoom_resultTupleScheme();
      }
    }

    private static class querySigningRoom_resultTupleScheme extends TupleScheme<querySigningRoom_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySigningRoom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySigningRoom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class closeSigningRoom_args implements org.apache.thrift.TBase<closeSigningRoom_args, closeSigningRoom_args._Fields>, java.io.Serializable, Cloneable, Comparable<closeSigningRoom_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeSigningRoom_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeSigningRoom_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeSigningRoom_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeSigningRoom_args.class, metaDataMap);
    }

    public closeSigningRoom_args() {
    }

    public closeSigningRoom_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeSigningRoom_args(closeSigningRoom_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public closeSigningRoom_args deepCopy() {
      return new closeSigningRoom_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public closeSigningRoom_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeSigningRoom_args)
        return this.equals((closeSigningRoom_args)that);
      return false;
    }

    public boolean equals(closeSigningRoom_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(closeSigningRoom_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeSigningRoom_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeSigningRoom_argsStandardSchemeFactory implements SchemeFactory {
      public closeSigningRoom_argsStandardScheme getScheme() {
        return new closeSigningRoom_argsStandardScheme();
      }
    }

    private static class closeSigningRoom_argsStandardScheme extends StandardScheme<closeSigningRoom_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeSigningRoom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map258 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map258.size);
                  String _key259;
                  String _val260;
                  for (int _i261 = 0; _i261 < _map258.size; ++_i261)
                  {
                    _key259 = iprot.readString();
                    _val260 = iprot.readString();
                    struct.datamap.put(_key259, _val260);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeSigningRoom_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter262 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter262.getKey());
              oprot.writeString(_iter262.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeSigningRoom_argsTupleSchemeFactory implements SchemeFactory {
      public closeSigningRoom_argsTupleScheme getScheme() {
        return new closeSigningRoom_argsTupleScheme();
      }
    }

    private static class closeSigningRoom_argsTupleScheme extends TupleScheme<closeSigningRoom_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeSigningRoom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter263 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter263.getKey());
              oprot.writeString(_iter263.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeSigningRoom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map264 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map264.size);
            String _key265;
            String _val266;
            for (int _i267 = 0; _i267 < _map264.size; ++_i267)
            {
              _key265 = iprot.readString();
              _val266 = iprot.readString();
              struct.datamap.put(_key265, _val266);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class closeSigningRoom_result implements org.apache.thrift.TBase<closeSigningRoom_result, closeSigningRoom_result._Fields>, java.io.Serializable, Cloneable, Comparable<closeSigningRoom_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeSigningRoom_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeSigningRoom_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeSigningRoom_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeSigningRoom_result.class, metaDataMap);
    }

    public closeSigningRoom_result() {
    }

    public closeSigningRoom_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeSigningRoom_result(closeSigningRoom_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public closeSigningRoom_result deepCopy() {
      return new closeSigningRoom_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public closeSigningRoom_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeSigningRoom_result)
        return this.equals((closeSigningRoom_result)that);
      return false;
    }

    public boolean equals(closeSigningRoom_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(closeSigningRoom_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeSigningRoom_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeSigningRoom_resultStandardSchemeFactory implements SchemeFactory {
      public closeSigningRoom_resultStandardScheme getScheme() {
        return new closeSigningRoom_resultStandardScheme();
      }
    }

    private static class closeSigningRoom_resultStandardScheme extends StandardScheme<closeSigningRoom_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeSigningRoom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeSigningRoom_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeSigningRoom_resultTupleSchemeFactory implements SchemeFactory {
      public closeSigningRoom_resultTupleScheme getScheme() {
        return new closeSigningRoom_resultTupleScheme();
      }
    }

    private static class closeSigningRoom_resultTupleScheme extends TupleScheme<closeSigningRoom_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeSigningRoom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeSigningRoom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addChildAccount_args implements org.apache.thrift.TBase<addChildAccount_args, addChildAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<addChildAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addChildAccount_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addChildAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addChildAccount_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addChildAccount_args.class, metaDataMap);
    }

    public addChildAccount_args() {
    }

    public addChildAccount_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addChildAccount_args(addChildAccount_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public addChildAccount_args deepCopy() {
      return new addChildAccount_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public addChildAccount_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addChildAccount_args)
        return this.equals((addChildAccount_args)that);
      return false;
    }

    public boolean equals(addChildAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(addChildAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addChildAccount_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addChildAccount_argsStandardSchemeFactory implements SchemeFactory {
      public addChildAccount_argsStandardScheme getScheme() {
        return new addChildAccount_argsStandardScheme();
      }
    }

    private static class addChildAccount_argsStandardScheme extends StandardScheme<addChildAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addChildAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map268 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map268.size);
                  String _key269;
                  String _val270;
                  for (int _i271 = 0; _i271 < _map268.size; ++_i271)
                  {
                    _key269 = iprot.readString();
                    _val270 = iprot.readString();
                    struct.datamap.put(_key269, _val270);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addChildAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter272 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter272.getKey());
              oprot.writeString(_iter272.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addChildAccount_argsTupleSchemeFactory implements SchemeFactory {
      public addChildAccount_argsTupleScheme getScheme() {
        return new addChildAccount_argsTupleScheme();
      }
    }

    private static class addChildAccount_argsTupleScheme extends TupleScheme<addChildAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addChildAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter273 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter273.getKey());
              oprot.writeString(_iter273.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addChildAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map274 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map274.size);
            String _key275;
            String _val276;
            for (int _i277 = 0; _i277 < _map274.size; ++_i277)
            {
              _key275 = iprot.readString();
              _val276 = iprot.readString();
              struct.datamap.put(_key275, _val276);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class addChildAccount_result implements org.apache.thrift.TBase<addChildAccount_result, addChildAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<addChildAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addChildAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addChildAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addChildAccount_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addChildAccount_result.class, metaDataMap);
    }

    public addChildAccount_result() {
    }

    public addChildAccount_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addChildAccount_result(addChildAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public addChildAccount_result deepCopy() {
      return new addChildAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public addChildAccount_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addChildAccount_result)
        return this.equals((addChildAccount_result)that);
      return false;
    }

    public boolean equals(addChildAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addChildAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addChildAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addChildAccount_resultStandardSchemeFactory implements SchemeFactory {
      public addChildAccount_resultStandardScheme getScheme() {
        return new addChildAccount_resultStandardScheme();
      }
    }

    private static class addChildAccount_resultStandardScheme extends StandardScheme<addChildAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addChildAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addChildAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addChildAccount_resultTupleSchemeFactory implements SchemeFactory {
      public addChildAccount_resultTupleScheme getScheme() {
        return new addChildAccount_resultTupleScheme();
      }
    }

    private static class addChildAccount_resultTupleScheme extends TupleScheme<addChildAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addChildAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addChildAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateChildAccount_args implements org.apache.thrift.TBase<updateChildAccount_args, updateChildAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateChildAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateChildAccount_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateChildAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateChildAccount_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateChildAccount_args.class, metaDataMap);
    }

    public updateChildAccount_args() {
    }

    public updateChildAccount_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateChildAccount_args(updateChildAccount_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public updateChildAccount_args deepCopy() {
      return new updateChildAccount_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public updateChildAccount_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateChildAccount_args)
        return this.equals((updateChildAccount_args)that);
      return false;
    }

    public boolean equals(updateChildAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateChildAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateChildAccount_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateChildAccount_argsStandardSchemeFactory implements SchemeFactory {
      public updateChildAccount_argsStandardScheme getScheme() {
        return new updateChildAccount_argsStandardScheme();
      }
    }

    private static class updateChildAccount_argsStandardScheme extends StandardScheme<updateChildAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateChildAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map278 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map278.size);
                  String _key279;
                  String _val280;
                  for (int _i281 = 0; _i281 < _map278.size; ++_i281)
                  {
                    _key279 = iprot.readString();
                    _val280 = iprot.readString();
                    struct.datamap.put(_key279, _val280);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateChildAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter282 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter282.getKey());
              oprot.writeString(_iter282.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateChildAccount_argsTupleSchemeFactory implements SchemeFactory {
      public updateChildAccount_argsTupleScheme getScheme() {
        return new updateChildAccount_argsTupleScheme();
      }
    }

    private static class updateChildAccount_argsTupleScheme extends TupleScheme<updateChildAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateChildAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter283 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter283.getKey());
              oprot.writeString(_iter283.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateChildAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map284 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map284.size);
            String _key285;
            String _val286;
            for (int _i287 = 0; _i287 < _map284.size; ++_i287)
            {
              _key285 = iprot.readString();
              _val286 = iprot.readString();
              struct.datamap.put(_key285, _val286);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class updateChildAccount_result implements org.apache.thrift.TBase<updateChildAccount_result, updateChildAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateChildAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateChildAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateChildAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateChildAccount_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateChildAccount_result.class, metaDataMap);
    }

    public updateChildAccount_result() {
    }

    public updateChildAccount_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateChildAccount_result(updateChildAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public updateChildAccount_result deepCopy() {
      return new updateChildAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public updateChildAccount_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateChildAccount_result)
        return this.equals((updateChildAccount_result)that);
      return false;
    }

    public boolean equals(updateChildAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateChildAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateChildAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateChildAccount_resultStandardSchemeFactory implements SchemeFactory {
      public updateChildAccount_resultStandardScheme getScheme() {
        return new updateChildAccount_resultStandardScheme();
      }
    }

    private static class updateChildAccount_resultStandardScheme extends StandardScheme<updateChildAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateChildAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateChildAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateChildAccount_resultTupleSchemeFactory implements SchemeFactory {
      public updateChildAccount_resultTupleScheme getScheme() {
        return new updateChildAccount_resultTupleScheme();
      }
    }

    private static class updateChildAccount_resultTupleScheme extends TupleScheme<updateChildAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateChildAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateChildAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class stopChildAccount_args implements org.apache.thrift.TBase<stopChildAccount_args, stopChildAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<stopChildAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopChildAccount_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stopChildAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stopChildAccount_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopChildAccount_args.class, metaDataMap);
    }

    public stopChildAccount_args() {
    }

    public stopChildAccount_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopChildAccount_args(stopChildAccount_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public stopChildAccount_args deepCopy() {
      return new stopChildAccount_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public stopChildAccount_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopChildAccount_args)
        return this.equals((stopChildAccount_args)that);
      return false;
    }

    public boolean equals(stopChildAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(stopChildAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopChildAccount_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopChildAccount_argsStandardSchemeFactory implements SchemeFactory {
      public stopChildAccount_argsStandardScheme getScheme() {
        return new stopChildAccount_argsStandardScheme();
      }
    }

    private static class stopChildAccount_argsStandardScheme extends StandardScheme<stopChildAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopChildAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map288 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map288.size);
                  String _key289;
                  String _val290;
                  for (int _i291 = 0; _i291 < _map288.size; ++_i291)
                  {
                    _key289 = iprot.readString();
                    _val290 = iprot.readString();
                    struct.datamap.put(_key289, _val290);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopChildAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter292 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter292.getKey());
              oprot.writeString(_iter292.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopChildAccount_argsTupleSchemeFactory implements SchemeFactory {
      public stopChildAccount_argsTupleScheme getScheme() {
        return new stopChildAccount_argsTupleScheme();
      }
    }

    private static class stopChildAccount_argsTupleScheme extends TupleScheme<stopChildAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopChildAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter293 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter293.getKey());
              oprot.writeString(_iter293.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopChildAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map294 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map294.size);
            String _key295;
            String _val296;
            for (int _i297 = 0; _i297 < _map294.size; ++_i297)
            {
              _key295 = iprot.readString();
              _val296 = iprot.readString();
              struct.datamap.put(_key295, _val296);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class stopChildAccount_result implements org.apache.thrift.TBase<stopChildAccount_result, stopChildAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<stopChildAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopChildAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stopChildAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stopChildAccount_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopChildAccount_result.class, metaDataMap);
    }

    public stopChildAccount_result() {
    }

    public stopChildAccount_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopChildAccount_result(stopChildAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public stopChildAccount_result deepCopy() {
      return new stopChildAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public stopChildAccount_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopChildAccount_result)
        return this.equals((stopChildAccount_result)that);
      return false;
    }

    public boolean equals(stopChildAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(stopChildAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopChildAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopChildAccount_resultStandardSchemeFactory implements SchemeFactory {
      public stopChildAccount_resultStandardScheme getScheme() {
        return new stopChildAccount_resultStandardScheme();
      }
    }

    private static class stopChildAccount_resultStandardScheme extends StandardScheme<stopChildAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopChildAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopChildAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopChildAccount_resultTupleSchemeFactory implements SchemeFactory {
      public stopChildAccount_resultTupleScheme getScheme() {
        return new stopChildAccount_resultTupleScheme();
      }
    }

    private static class stopChildAccount_resultTupleScheme extends TupleScheme<stopChildAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopChildAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopChildAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryChildAccount_args implements org.apache.thrift.TBase<queryChildAccount_args, queryChildAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryChildAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryChildAccount_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryChildAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryChildAccount_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryChildAccount_args.class, metaDataMap);
    }

    public queryChildAccount_args() {
    }

    public queryChildAccount_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryChildAccount_args(queryChildAccount_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public queryChildAccount_args deepCopy() {
      return new queryChildAccount_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public queryChildAccount_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryChildAccount_args)
        return this.equals((queryChildAccount_args)that);
      return false;
    }

    public boolean equals(queryChildAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryChildAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryChildAccount_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryChildAccount_argsStandardSchemeFactory implements SchemeFactory {
      public queryChildAccount_argsStandardScheme getScheme() {
        return new queryChildAccount_argsStandardScheme();
      }
    }

    private static class queryChildAccount_argsStandardScheme extends StandardScheme<queryChildAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryChildAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map298 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map298.size);
                  String _key299;
                  String _val300;
                  for (int _i301 = 0; _i301 < _map298.size; ++_i301)
                  {
                    _key299 = iprot.readString();
                    _val300 = iprot.readString();
                    struct.datamap.put(_key299, _val300);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryChildAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter302 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter302.getKey());
              oprot.writeString(_iter302.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryChildAccount_argsTupleSchemeFactory implements SchemeFactory {
      public queryChildAccount_argsTupleScheme getScheme() {
        return new queryChildAccount_argsTupleScheme();
      }
    }

    private static class queryChildAccount_argsTupleScheme extends TupleScheme<queryChildAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryChildAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter303 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter303.getKey());
              oprot.writeString(_iter303.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryChildAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map304 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map304.size);
            String _key305;
            String _val306;
            for (int _i307 = 0; _i307 < _map304.size; ++_i307)
            {
              _key305 = iprot.readString();
              _val306 = iprot.readString();
              struct.datamap.put(_key305, _val306);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class queryChildAccount_result implements org.apache.thrift.TBase<queryChildAccount_result, queryChildAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryChildAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryChildAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryChildAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryChildAccount_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryChildAccount_result.class, metaDataMap);
    }

    public queryChildAccount_result() {
    }

    public queryChildAccount_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryChildAccount_result(queryChildAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public queryChildAccount_result deepCopy() {
      return new queryChildAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public queryChildAccount_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryChildAccount_result)
        return this.equals((queryChildAccount_result)that);
      return false;
    }

    public boolean equals(queryChildAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryChildAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryChildAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryChildAccount_resultStandardSchemeFactory implements SchemeFactory {
      public queryChildAccount_resultStandardScheme getScheme() {
        return new queryChildAccount_resultStandardScheme();
      }
    }

    private static class queryChildAccount_resultStandardScheme extends StandardScheme<queryChildAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryChildAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryChildAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryChildAccount_resultTupleSchemeFactory implements SchemeFactory {
      public queryChildAccount_resultTupleScheme getScheme() {
        return new queryChildAccount_resultTupleScheme();
      }
    }

    private static class queryChildAccount_resultTupleScheme extends TupleScheme<queryChildAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryChildAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryChildAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryNonYunSignPlatform_args implements org.apache.thrift.TBase<queryNonYunSignPlatform_args, queryNonYunSignPlatform_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryNonYunSignPlatform_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryNonYunSignPlatform_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryNonYunSignPlatform_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryNonYunSignPlatform_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryNonYunSignPlatform_args.class, metaDataMap);
    }

    public queryNonYunSignPlatform_args() {
    }

    public queryNonYunSignPlatform_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryNonYunSignPlatform_args(queryNonYunSignPlatform_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public queryNonYunSignPlatform_args deepCopy() {
      return new queryNonYunSignPlatform_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public queryNonYunSignPlatform_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryNonYunSignPlatform_args)
        return this.equals((queryNonYunSignPlatform_args)that);
      return false;
    }

    public boolean equals(queryNonYunSignPlatform_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryNonYunSignPlatform_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryNonYunSignPlatform_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryNonYunSignPlatform_argsStandardSchemeFactory implements SchemeFactory {
      public queryNonYunSignPlatform_argsStandardScheme getScheme() {
        return new queryNonYunSignPlatform_argsStandardScheme();
      }
    }

    private static class queryNonYunSignPlatform_argsStandardScheme extends StandardScheme<queryNonYunSignPlatform_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryNonYunSignPlatform_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map308 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map308.size);
                  String _key309;
                  String _val310;
                  for (int _i311 = 0; _i311 < _map308.size; ++_i311)
                  {
                    _key309 = iprot.readString();
                    _val310 = iprot.readString();
                    struct.datamap.put(_key309, _val310);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryNonYunSignPlatform_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter312 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter312.getKey());
              oprot.writeString(_iter312.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryNonYunSignPlatform_argsTupleSchemeFactory implements SchemeFactory {
      public queryNonYunSignPlatform_argsTupleScheme getScheme() {
        return new queryNonYunSignPlatform_argsTupleScheme();
      }
    }

    private static class queryNonYunSignPlatform_argsTupleScheme extends TupleScheme<queryNonYunSignPlatform_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryNonYunSignPlatform_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter313 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter313.getKey());
              oprot.writeString(_iter313.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryNonYunSignPlatform_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map314 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map314.size);
            String _key315;
            String _val316;
            for (int _i317 = 0; _i317 < _map314.size; ++_i317)
            {
              _key315 = iprot.readString();
              _val316 = iprot.readString();
              struct.datamap.put(_key315, _val316);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class queryNonYunSignPlatform_result implements org.apache.thrift.TBase<queryNonYunSignPlatform_result, queryNonYunSignPlatform_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryNonYunSignPlatform_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryNonYunSignPlatform_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryNonYunSignPlatform_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryNonYunSignPlatform_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryNonYunSignPlatform_result.class, metaDataMap);
    }

    public queryNonYunSignPlatform_result() {
    }

    public queryNonYunSignPlatform_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryNonYunSignPlatform_result(queryNonYunSignPlatform_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public queryNonYunSignPlatform_result deepCopy() {
      return new queryNonYunSignPlatform_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public queryNonYunSignPlatform_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryNonYunSignPlatform_result)
        return this.equals((queryNonYunSignPlatform_result)that);
      return false;
    }

    public boolean equals(queryNonYunSignPlatform_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryNonYunSignPlatform_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryNonYunSignPlatform_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryNonYunSignPlatform_resultStandardSchemeFactory implements SchemeFactory {
      public queryNonYunSignPlatform_resultStandardScheme getScheme() {
        return new queryNonYunSignPlatform_resultStandardScheme();
      }
    }

    private static class queryNonYunSignPlatform_resultStandardScheme extends StandardScheme<queryNonYunSignPlatform_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryNonYunSignPlatform_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryNonYunSignPlatform_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryNonYunSignPlatform_resultTupleSchemeFactory implements SchemeFactory {
      public queryNonYunSignPlatform_resultTupleScheme getScheme() {
        return new queryNonYunSignPlatform_resultTupleScheme();
      }
    }

    private static class queryNonYunSignPlatform_resultTupleScheme extends TupleScheme<queryNonYunSignPlatform_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryNonYunSignPlatform_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryNonYunSignPlatform_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addSeal_args implements org.apache.thrift.TBase<addSeal_args, addSeal_args._Fields>, java.io.Serializable, Cloneable, Comparable<addSeal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSeal_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSeal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSeal_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSeal_args.class, metaDataMap);
    }

    public addSeal_args() {
    }

    public addSeal_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSeal_args(addSeal_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public addSeal_args deepCopy() {
      return new addSeal_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public addSeal_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSeal_args)
        return this.equals((addSeal_args)that);
      return false;
    }

    public boolean equals(addSeal_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(addSeal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSeal_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSeal_argsStandardSchemeFactory implements SchemeFactory {
      public addSeal_argsStandardScheme getScheme() {
        return new addSeal_argsStandardScheme();
      }
    }

    private static class addSeal_argsStandardScheme extends StandardScheme<addSeal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSeal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map318 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map318.size);
                  String _key319;
                  String _val320;
                  for (int _i321 = 0; _i321 < _map318.size; ++_i321)
                  {
                    _key319 = iprot.readString();
                    _val320 = iprot.readString();
                    struct.datamap.put(_key319, _val320);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSeal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter322 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter322.getKey());
              oprot.writeString(_iter322.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSeal_argsTupleSchemeFactory implements SchemeFactory {
      public addSeal_argsTupleScheme getScheme() {
        return new addSeal_argsTupleScheme();
      }
    }

    private static class addSeal_argsTupleScheme extends TupleScheme<addSeal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSeal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter323 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter323.getKey());
              oprot.writeString(_iter323.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSeal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map324 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map324.size);
            String _key325;
            String _val326;
            for (int _i327 = 0; _i327 < _map324.size; ++_i327)
            {
              _key325 = iprot.readString();
              _val326 = iprot.readString();
              struct.datamap.put(_key325, _val326);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class addSeal_result implements org.apache.thrift.TBase<addSeal_result, addSeal_result._Fields>, java.io.Serializable, Cloneable, Comparable<addSeal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSeal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSeal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSeal_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSeal_result.class, metaDataMap);
    }

    public addSeal_result() {
    }

    public addSeal_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSeal_result(addSeal_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public addSeal_result deepCopy() {
      return new addSeal_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public addSeal_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSeal_result)
        return this.equals((addSeal_result)that);
      return false;
    }

    public boolean equals(addSeal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addSeal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSeal_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSeal_resultStandardSchemeFactory implements SchemeFactory {
      public addSeal_resultStandardScheme getScheme() {
        return new addSeal_resultStandardScheme();
      }
    }

    private static class addSeal_resultStandardScheme extends StandardScheme<addSeal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSeal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSeal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSeal_resultTupleSchemeFactory implements SchemeFactory {
      public addSeal_resultTupleScheme getScheme() {
        return new addSeal_resultTupleScheme();
      }
    }

    private static class addSeal_resultTupleScheme extends TupleScheme<addSeal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSeal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSeal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class querySeal_args implements org.apache.thrift.TBase<querySeal_args, querySeal_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySeal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySeal_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySeal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySeal_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySeal_args.class, metaDataMap);
    }

    public querySeal_args() {
    }

    public querySeal_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySeal_args(querySeal_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public querySeal_args deepCopy() {
      return new querySeal_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public querySeal_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySeal_args)
        return this.equals((querySeal_args)that);
      return false;
    }

    public boolean equals(querySeal_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySeal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySeal_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySeal_argsStandardSchemeFactory implements SchemeFactory {
      public querySeal_argsStandardScheme getScheme() {
        return new querySeal_argsStandardScheme();
      }
    }

    private static class querySeal_argsStandardScheme extends StandardScheme<querySeal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySeal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map328 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map328.size);
                  String _key329;
                  String _val330;
                  for (int _i331 = 0; _i331 < _map328.size; ++_i331)
                  {
                    _key329 = iprot.readString();
                    _val330 = iprot.readString();
                    struct.datamap.put(_key329, _val330);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySeal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter332 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter332.getKey());
              oprot.writeString(_iter332.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySeal_argsTupleSchemeFactory implements SchemeFactory {
      public querySeal_argsTupleScheme getScheme() {
        return new querySeal_argsTupleScheme();
      }
    }

    private static class querySeal_argsTupleScheme extends TupleScheme<querySeal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySeal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter333 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter333.getKey());
              oprot.writeString(_iter333.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySeal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map334 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map334.size);
            String _key335;
            String _val336;
            for (int _i337 = 0; _i337 < _map334.size; ++_i337)
            {
              _key335 = iprot.readString();
              _val336 = iprot.readString();
              struct.datamap.put(_key335, _val336);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class querySeal_result implements org.apache.thrift.TBase<querySeal_result, querySeal_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySeal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySeal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySeal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySeal_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySeal_result.class, metaDataMap);
    }

    public querySeal_result() {
    }

    public querySeal_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySeal_result(querySeal_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public querySeal_result deepCopy() {
      return new querySeal_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public querySeal_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySeal_result)
        return this.equals((querySeal_result)that);
      return false;
    }

    public boolean equals(querySeal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySeal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySeal_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySeal_resultStandardSchemeFactory implements SchemeFactory {
      public querySeal_resultStandardScheme getScheme() {
        return new querySeal_resultStandardScheme();
      }
    }

    private static class querySeal_resultStandardScheme extends StandardScheme<querySeal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySeal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySeal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySeal_resultTupleSchemeFactory implements SchemeFactory {
      public querySeal_resultTupleScheme getScheme() {
        return new querySeal_resultTupleScheme();
      }
    }

    private static class querySeal_resultTupleScheme extends TupleScheme<querySeal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySeal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySeal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delSeal_args implements org.apache.thrift.TBase<delSeal_args, delSeal_args._Fields>, java.io.Serializable, Cloneable, Comparable<delSeal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delSeal_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delSeal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delSeal_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delSeal_args.class, metaDataMap);
    }

    public delSeal_args() {
    }

    public delSeal_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delSeal_args(delSeal_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public delSeal_args deepCopy() {
      return new delSeal_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public delSeal_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delSeal_args)
        return this.equals((delSeal_args)that);
      return false;
    }

    public boolean equals(delSeal_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(delSeal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delSeal_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delSeal_argsStandardSchemeFactory implements SchemeFactory {
      public delSeal_argsStandardScheme getScheme() {
        return new delSeal_argsStandardScheme();
      }
    }

    private static class delSeal_argsStandardScheme extends StandardScheme<delSeal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delSeal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map338 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map338.size);
                  String _key339;
                  String _val340;
                  for (int _i341 = 0; _i341 < _map338.size; ++_i341)
                  {
                    _key339 = iprot.readString();
                    _val340 = iprot.readString();
                    struct.datamap.put(_key339, _val340);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delSeal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter342 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter342.getKey());
              oprot.writeString(_iter342.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delSeal_argsTupleSchemeFactory implements SchemeFactory {
      public delSeal_argsTupleScheme getScheme() {
        return new delSeal_argsTupleScheme();
      }
    }

    private static class delSeal_argsTupleScheme extends TupleScheme<delSeal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delSeal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter343 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter343.getKey());
              oprot.writeString(_iter343.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delSeal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map344 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map344.size);
            String _key345;
            String _val346;
            for (int _i347 = 0; _i347 < _map344.size; ++_i347)
            {
              _key345 = iprot.readString();
              _val346 = iprot.readString();
              struct.datamap.put(_key345, _val346);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class delSeal_result implements org.apache.thrift.TBase<delSeal_result, delSeal_result._Fields>, java.io.Serializable, Cloneable, Comparable<delSeal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delSeal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delSeal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delSeal_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delSeal_result.class, metaDataMap);
    }

    public delSeal_result() {
    }

    public delSeal_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delSeal_result(delSeal_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public delSeal_result deepCopy() {
      return new delSeal_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public delSeal_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delSeal_result)
        return this.equals((delSeal_result)that);
      return false;
    }

    public boolean equals(delSeal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delSeal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delSeal_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delSeal_resultStandardSchemeFactory implements SchemeFactory {
      public delSeal_resultStandardScheme getScheme() {
        return new delSeal_resultStandardScheme();
      }
    }

    private static class delSeal_resultStandardScheme extends StandardScheme<delSeal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delSeal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delSeal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delSeal_resultTupleSchemeFactory implements SchemeFactory {
      public delSeal_resultTupleScheme getScheme() {
        return new delSeal_resultTupleScheme();
      }
    }

    private static class delSeal_resultTupleScheme extends TupleScheme<delSeal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delSeal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delSeal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class platformApply_args implements org.apache.thrift.TBase<platformApply_args, platformApply_args._Fields>, java.io.Serializable, Cloneable, Comparable<platformApply_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("platformApply_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new platformApply_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new platformApply_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(platformApply_args.class, metaDataMap);
    }

    public platformApply_args() {
    }

    public platformApply_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public platformApply_args(platformApply_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public platformApply_args deepCopy() {
      return new platformApply_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public platformApply_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof platformApply_args)
        return this.equals((platformApply_args)that);
      return false;
    }

    public boolean equals(platformApply_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(platformApply_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("platformApply_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class platformApply_argsStandardSchemeFactory implements SchemeFactory {
      public platformApply_argsStandardScheme getScheme() {
        return new platformApply_argsStandardScheme();
      }
    }

    private static class platformApply_argsStandardScheme extends StandardScheme<platformApply_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, platformApply_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map348 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map348.size);
                  String _key349;
                  String _val350;
                  for (int _i351 = 0; _i351 < _map348.size; ++_i351)
                  {
                    _key349 = iprot.readString();
                    _val350 = iprot.readString();
                    struct.datamap.put(_key349, _val350);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, platformApply_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter352 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter352.getKey());
              oprot.writeString(_iter352.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class platformApply_argsTupleSchemeFactory implements SchemeFactory {
      public platformApply_argsTupleScheme getScheme() {
        return new platformApply_argsTupleScheme();
      }
    }

    private static class platformApply_argsTupleScheme extends TupleScheme<platformApply_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, platformApply_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter353 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter353.getKey());
              oprot.writeString(_iter353.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, platformApply_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map354 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map354.size);
            String _key355;
            String _val356;
            for (int _i357 = 0; _i357 < _map354.size; ++_i357)
            {
              _key355 = iprot.readString();
              _val356 = iprot.readString();
              struct.datamap.put(_key355, _val356);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class platformApply_result implements org.apache.thrift.TBase<platformApply_result, platformApply_result._Fields>, java.io.Serializable, Cloneable, Comparable<platformApply_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("platformApply_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new platformApply_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new platformApply_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(platformApply_result.class, metaDataMap);
    }

    public platformApply_result() {
    }

    public platformApply_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public platformApply_result(platformApply_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public platformApply_result deepCopy() {
      return new platformApply_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public platformApply_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof platformApply_result)
        return this.equals((platformApply_result)that);
      return false;
    }

    public boolean equals(platformApply_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(platformApply_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("platformApply_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class platformApply_resultStandardSchemeFactory implements SchemeFactory {
      public platformApply_resultStandardScheme getScheme() {
        return new platformApply_resultStandardScheme();
      }
    }

    private static class platformApply_resultStandardScheme extends StandardScheme<platformApply_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, platformApply_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, platformApply_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class platformApply_resultTupleSchemeFactory implements SchemeFactory {
      public platformApply_resultTupleScheme getScheme() {
        return new platformApply_resultTupleScheme();
      }
    }

    private static class platformApply_resultTupleScheme extends TupleScheme<platformApply_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, platformApply_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, platformApply_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class platformApplyCheck_args implements org.apache.thrift.TBase<platformApplyCheck_args, platformApplyCheck_args._Fields>, java.io.Serializable, Cloneable, Comparable<platformApplyCheck_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("platformApplyCheck_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new platformApplyCheck_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new platformApplyCheck_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(platformApplyCheck_args.class, metaDataMap);
    }

    public platformApplyCheck_args() {
    }

    public platformApplyCheck_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public platformApplyCheck_args(platformApplyCheck_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public platformApplyCheck_args deepCopy() {
      return new platformApplyCheck_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public platformApplyCheck_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof platformApplyCheck_args)
        return this.equals((platformApplyCheck_args)that);
      return false;
    }

    public boolean equals(platformApplyCheck_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(platformApplyCheck_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("platformApplyCheck_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class platformApplyCheck_argsStandardSchemeFactory implements SchemeFactory {
      public platformApplyCheck_argsStandardScheme getScheme() {
        return new platformApplyCheck_argsStandardScheme();
      }
    }

    private static class platformApplyCheck_argsStandardScheme extends StandardScheme<platformApplyCheck_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, platformApplyCheck_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map358 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map358.size);
                  String _key359;
                  String _val360;
                  for (int _i361 = 0; _i361 < _map358.size; ++_i361)
                  {
                    _key359 = iprot.readString();
                    _val360 = iprot.readString();
                    struct.datamap.put(_key359, _val360);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, platformApplyCheck_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter362 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter362.getKey());
              oprot.writeString(_iter362.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class platformApplyCheck_argsTupleSchemeFactory implements SchemeFactory {
      public platformApplyCheck_argsTupleScheme getScheme() {
        return new platformApplyCheck_argsTupleScheme();
      }
    }

    private static class platformApplyCheck_argsTupleScheme extends TupleScheme<platformApplyCheck_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, platformApplyCheck_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter363 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter363.getKey());
              oprot.writeString(_iter363.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, platformApplyCheck_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map364 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map364.size);
            String _key365;
            String _val366;
            for (int _i367 = 0; _i367 < _map364.size; ++_i367)
            {
              _key365 = iprot.readString();
              _val366 = iprot.readString();
              struct.datamap.put(_key365, _val366);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class platformApplyCheck_result implements org.apache.thrift.TBase<platformApplyCheck_result, platformApplyCheck_result._Fields>, java.io.Serializable, Cloneable, Comparable<platformApplyCheck_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("platformApplyCheck_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new platformApplyCheck_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new platformApplyCheck_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(platformApplyCheck_result.class, metaDataMap);
    }

    public platformApplyCheck_result() {
    }

    public platformApplyCheck_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public platformApplyCheck_result(platformApplyCheck_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public platformApplyCheck_result deepCopy() {
      return new platformApplyCheck_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public platformApplyCheck_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof platformApplyCheck_result)
        return this.equals((platformApplyCheck_result)that);
      return false;
    }

    public boolean equals(platformApplyCheck_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(platformApplyCheck_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("platformApplyCheck_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class platformApplyCheck_resultStandardSchemeFactory implements SchemeFactory {
      public platformApplyCheck_resultStandardScheme getScheme() {
        return new platformApplyCheck_resultStandardScheme();
      }
    }

    private static class platformApplyCheck_resultStandardScheme extends StandardScheme<platformApplyCheck_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, platformApplyCheck_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, platformApplyCheck_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class platformApplyCheck_resultTupleSchemeFactory implements SchemeFactory {
      public platformApplyCheck_resultTupleScheme getScheme() {
        return new platformApplyCheck_resultTupleScheme();
      }
    }

    private static class platformApplyCheck_resultTupleScheme extends TupleScheme<platformApplyCheck_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, platformApplyCheck_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, platformApplyCheck_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class platformApplyQuery_args implements org.apache.thrift.TBase<platformApplyQuery_args, platformApplyQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<platformApplyQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("platformApplyQuery_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new platformApplyQuery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new platformApplyQuery_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(platformApplyQuery_args.class, metaDataMap);
    }

    public platformApplyQuery_args() {
    }

    public platformApplyQuery_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public platformApplyQuery_args(platformApplyQuery_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public platformApplyQuery_args deepCopy() {
      return new platformApplyQuery_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public platformApplyQuery_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof platformApplyQuery_args)
        return this.equals((platformApplyQuery_args)that);
      return false;
    }

    public boolean equals(platformApplyQuery_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(platformApplyQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("platformApplyQuery_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class platformApplyQuery_argsStandardSchemeFactory implements SchemeFactory {
      public platformApplyQuery_argsStandardScheme getScheme() {
        return new platformApplyQuery_argsStandardScheme();
      }
    }

    private static class platformApplyQuery_argsStandardScheme extends StandardScheme<platformApplyQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, platformApplyQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map368 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map368.size);
                  String _key369;
                  String _val370;
                  for (int _i371 = 0; _i371 < _map368.size; ++_i371)
                  {
                    _key369 = iprot.readString();
                    _val370 = iprot.readString();
                    struct.datamap.put(_key369, _val370);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, platformApplyQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter372 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter372.getKey());
              oprot.writeString(_iter372.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class platformApplyQuery_argsTupleSchemeFactory implements SchemeFactory {
      public platformApplyQuery_argsTupleScheme getScheme() {
        return new platformApplyQuery_argsTupleScheme();
      }
    }

    private static class platformApplyQuery_argsTupleScheme extends TupleScheme<platformApplyQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, platformApplyQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter373 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter373.getKey());
              oprot.writeString(_iter373.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, platformApplyQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map374 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map374.size);
            String _key375;
            String _val376;
            for (int _i377 = 0; _i377 < _map374.size; ++_i377)
            {
              _key375 = iprot.readString();
              _val376 = iprot.readString();
              struct.datamap.put(_key375, _val376);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class platformApplyQuery_result implements org.apache.thrift.TBase<platformApplyQuery_result, platformApplyQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<platformApplyQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("platformApplyQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new platformApplyQuery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new platformApplyQuery_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(platformApplyQuery_result.class, metaDataMap);
    }

    public platformApplyQuery_result() {
    }

    public platformApplyQuery_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public platformApplyQuery_result(platformApplyQuery_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public platformApplyQuery_result deepCopy() {
      return new platformApplyQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public platformApplyQuery_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof platformApplyQuery_result)
        return this.equals((platformApplyQuery_result)that);
      return false;
    }

    public boolean equals(platformApplyQuery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(platformApplyQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("platformApplyQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class platformApplyQuery_resultStandardSchemeFactory implements SchemeFactory {
      public platformApplyQuery_resultStandardScheme getScheme() {
        return new platformApplyQuery_resultStandardScheme();
      }
    }

    private static class platformApplyQuery_resultStandardScheme extends StandardScheme<platformApplyQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, platformApplyQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, platformApplyQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class platformApplyQuery_resultTupleSchemeFactory implements SchemeFactory {
      public platformApplyQuery_resultTupleScheme getScheme() {
        return new platformApplyQuery_resultTupleScheme();
      }
    }

    private static class platformApplyQuery_resultTupleScheme extends TupleScheme<platformApplyQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, platformApplyQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, platformApplyQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAllUser_args implements org.apache.thrift.TBase<getAllUser_args, getAllUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllUser_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllUser_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllUser_args.class, metaDataMap);
    }

    public getAllUser_args() {
    }

    public getAllUser_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllUser_args(getAllUser_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public getAllUser_args deepCopy() {
      return new getAllUser_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public getAllUser_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllUser_args)
        return this.equals((getAllUser_args)that);
      return false;
    }

    public boolean equals(getAllUser_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllUser_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllUser_argsStandardSchemeFactory implements SchemeFactory {
      public getAllUser_argsStandardScheme getScheme() {
        return new getAllUser_argsStandardScheme();
      }
    }

    private static class getAllUser_argsStandardScheme extends StandardScheme<getAllUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map378 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map378.size);
                  String _key379;
                  String _val380;
                  for (int _i381 = 0; _i381 < _map378.size; ++_i381)
                  {
                    _key379 = iprot.readString();
                    _val380 = iprot.readString();
                    struct.datamap.put(_key379, _val380);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter382 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter382.getKey());
              oprot.writeString(_iter382.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllUser_argsTupleSchemeFactory implements SchemeFactory {
      public getAllUser_argsTupleScheme getScheme() {
        return new getAllUser_argsTupleScheme();
      }
    }

    private static class getAllUser_argsTupleScheme extends TupleScheme<getAllUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter383 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter383.getKey());
              oprot.writeString(_iter383.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map384 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map384.size);
            String _key385;
            String _val386;
            for (int _i387 = 0; _i387 < _map384.size; ++_i387)
            {
              _key385 = iprot.readString();
              _val386 = iprot.readString();
              struct.datamap.put(_key385, _val386);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class getAllUser_result implements org.apache.thrift.TBase<getAllUser_result, getAllUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllUser_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllUser_result.class, metaDataMap);
    }

    public getAllUser_result() {
    }

    public getAllUser_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllUser_result(getAllUser_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public getAllUser_result deepCopy() {
      return new getAllUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public getAllUser_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllUser_result)
        return this.equals((getAllUser_result)that);
      return false;
    }

    public boolean equals(getAllUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllUser_resultStandardSchemeFactory implements SchemeFactory {
      public getAllUser_resultStandardScheme getScheme() {
        return new getAllUser_resultStandardScheme();
      }
    }

    private static class getAllUser_resultStandardScheme extends StandardScheme<getAllUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllUser_resultTupleSchemeFactory implements SchemeFactory {
      public getAllUser_resultTupleScheme getScheme() {
        return new getAllUser_resultTupleScheme();
      }
    }

    private static class getAllUser_resultTupleScheme extends TupleScheme<getAllUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class bangdingAccountList_args implements org.apache.thrift.TBase<bangdingAccountList_args, bangdingAccountList_args._Fields>, java.io.Serializable, Cloneable, Comparable<bangdingAccountList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bangdingAccountList_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bangdingAccountList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bangdingAccountList_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bangdingAccountList_args.class, metaDataMap);
    }

    public bangdingAccountList_args() {
    }

    public bangdingAccountList_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bangdingAccountList_args(bangdingAccountList_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public bangdingAccountList_args deepCopy() {
      return new bangdingAccountList_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public bangdingAccountList_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bangdingAccountList_args)
        return this.equals((bangdingAccountList_args)that);
      return false;
    }

    public boolean equals(bangdingAccountList_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(bangdingAccountList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bangdingAccountList_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bangdingAccountList_argsStandardSchemeFactory implements SchemeFactory {
      public bangdingAccountList_argsStandardScheme getScheme() {
        return new bangdingAccountList_argsStandardScheme();
      }
    }

    private static class bangdingAccountList_argsStandardScheme extends StandardScheme<bangdingAccountList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bangdingAccountList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map388 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map388.size);
                  String _key389;
                  String _val390;
                  for (int _i391 = 0; _i391 < _map388.size; ++_i391)
                  {
                    _key389 = iprot.readString();
                    _val390 = iprot.readString();
                    struct.datamap.put(_key389, _val390);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bangdingAccountList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter392 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter392.getKey());
              oprot.writeString(_iter392.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bangdingAccountList_argsTupleSchemeFactory implements SchemeFactory {
      public bangdingAccountList_argsTupleScheme getScheme() {
        return new bangdingAccountList_argsTupleScheme();
      }
    }

    private static class bangdingAccountList_argsTupleScheme extends TupleScheme<bangdingAccountList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bangdingAccountList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter393 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter393.getKey());
              oprot.writeString(_iter393.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bangdingAccountList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map394 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map394.size);
            String _key395;
            String _val396;
            for (int _i397 = 0; _i397 < _map394.size; ++_i397)
            {
              _key395 = iprot.readString();
              _val396 = iprot.readString();
              struct.datamap.put(_key395, _val396);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class bangdingAccountList_result implements org.apache.thrift.TBase<bangdingAccountList_result, bangdingAccountList_result._Fields>, java.io.Serializable, Cloneable, Comparable<bangdingAccountList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bangdingAccountList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bangdingAccountList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bangdingAccountList_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bangdingAccountList_result.class, metaDataMap);
    }

    public bangdingAccountList_result() {
    }

    public bangdingAccountList_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bangdingAccountList_result(bangdingAccountList_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public bangdingAccountList_result deepCopy() {
      return new bangdingAccountList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public bangdingAccountList_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bangdingAccountList_result)
        return this.equals((bangdingAccountList_result)that);
      return false;
    }

    public boolean equals(bangdingAccountList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(bangdingAccountList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bangdingAccountList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bangdingAccountList_resultStandardSchemeFactory implements SchemeFactory {
      public bangdingAccountList_resultStandardScheme getScheme() {
        return new bangdingAccountList_resultStandardScheme();
      }
    }

    private static class bangdingAccountList_resultStandardScheme extends StandardScheme<bangdingAccountList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bangdingAccountList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bangdingAccountList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bangdingAccountList_resultTupleSchemeFactory implements SchemeFactory {
      public bangdingAccountList_resultTupleScheme getScheme() {
        return new bangdingAccountList_resultTupleScheme();
      }
    }

    private static class bangdingAccountList_resultTupleScheme extends TupleScheme<bangdingAccountList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bangdingAccountList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bangdingAccountList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class platformCallbackQuery_args implements org.apache.thrift.TBase<platformCallbackQuery_args, platformCallbackQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<platformCallbackQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("platformCallbackQuery_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new platformCallbackQuery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new platformCallbackQuery_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(platformCallbackQuery_args.class, metaDataMap);
    }

    public platformCallbackQuery_args() {
    }

    public platformCallbackQuery_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public platformCallbackQuery_args(platformCallbackQuery_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public platformCallbackQuery_args deepCopy() {
      return new platformCallbackQuery_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public platformCallbackQuery_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof platformCallbackQuery_args)
        return this.equals((platformCallbackQuery_args)that);
      return false;
    }

    public boolean equals(platformCallbackQuery_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(platformCallbackQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("platformCallbackQuery_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class platformCallbackQuery_argsStandardSchemeFactory implements SchemeFactory {
      public platformCallbackQuery_argsStandardScheme getScheme() {
        return new platformCallbackQuery_argsStandardScheme();
      }
    }

    private static class platformCallbackQuery_argsStandardScheme extends StandardScheme<platformCallbackQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, platformCallbackQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map398 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map398.size);
                  String _key399;
                  String _val400;
                  for (int _i401 = 0; _i401 < _map398.size; ++_i401)
                  {
                    _key399 = iprot.readString();
                    _val400 = iprot.readString();
                    struct.datamap.put(_key399, _val400);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, platformCallbackQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter402 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter402.getKey());
              oprot.writeString(_iter402.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class platformCallbackQuery_argsTupleSchemeFactory implements SchemeFactory {
      public platformCallbackQuery_argsTupleScheme getScheme() {
        return new platformCallbackQuery_argsTupleScheme();
      }
    }

    private static class platformCallbackQuery_argsTupleScheme extends TupleScheme<platformCallbackQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, platformCallbackQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter403 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter403.getKey());
              oprot.writeString(_iter403.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, platformCallbackQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map404 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map404.size);
            String _key405;
            String _val406;
            for (int _i407 = 0; _i407 < _map404.size; ++_i407)
            {
              _key405 = iprot.readString();
              _val406 = iprot.readString();
              struct.datamap.put(_key405, _val406);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class platformCallbackQuery_result implements org.apache.thrift.TBase<platformCallbackQuery_result, platformCallbackQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<platformCallbackQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("platformCallbackQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new platformCallbackQuery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new platformCallbackQuery_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(platformCallbackQuery_result.class, metaDataMap);
    }

    public platformCallbackQuery_result() {
    }

    public platformCallbackQuery_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public platformCallbackQuery_result(platformCallbackQuery_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public platformCallbackQuery_result deepCopy() {
      return new platformCallbackQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public platformCallbackQuery_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof platformCallbackQuery_result)
        return this.equals((platformCallbackQuery_result)that);
      return false;
    }

    public boolean equals(platformCallbackQuery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(platformCallbackQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("platformCallbackQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class platformCallbackQuery_resultStandardSchemeFactory implements SchemeFactory {
      public platformCallbackQuery_resultStandardScheme getScheme() {
        return new platformCallbackQuery_resultStandardScheme();
      }
    }

    private static class platformCallbackQuery_resultStandardScheme extends StandardScheme<platformCallbackQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, platformCallbackQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, platformCallbackQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class platformCallbackQuery_resultTupleSchemeFactory implements SchemeFactory {
      public platformCallbackQuery_resultTupleScheme getScheme() {
        return new platformCallbackQuery_resultTupleScheme();
      }
    }

    private static class platformCallbackQuery_resultTupleScheme extends TupleScheme<platformCallbackQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, platformCallbackQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, platformCallbackQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class bangindWx_args implements org.apache.thrift.TBase<bangindWx_args, bangindWx_args._Fields>, java.io.Serializable, Cloneable, Comparable<bangindWx_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bangindWx_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bangindWx_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bangindWx_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bangindWx_args.class, metaDataMap);
    }

    public bangindWx_args() {
    }

    public bangindWx_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bangindWx_args(bangindWx_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public bangindWx_args deepCopy() {
      return new bangindWx_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public bangindWx_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bangindWx_args)
        return this.equals((bangindWx_args)that);
      return false;
    }

    public boolean equals(bangindWx_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(bangindWx_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bangindWx_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bangindWx_argsStandardSchemeFactory implements SchemeFactory {
      public bangindWx_argsStandardScheme getScheme() {
        return new bangindWx_argsStandardScheme();
      }
    }

    private static class bangindWx_argsStandardScheme extends StandardScheme<bangindWx_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bangindWx_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map408 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map408.size);
                  String _key409;
                  String _val410;
                  for (int _i411 = 0; _i411 < _map408.size; ++_i411)
                  {
                    _key409 = iprot.readString();
                    _val410 = iprot.readString();
                    struct.datamap.put(_key409, _val410);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bangindWx_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter412 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter412.getKey());
              oprot.writeString(_iter412.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bangindWx_argsTupleSchemeFactory implements SchemeFactory {
      public bangindWx_argsTupleScheme getScheme() {
        return new bangindWx_argsTupleScheme();
      }
    }

    private static class bangindWx_argsTupleScheme extends TupleScheme<bangindWx_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bangindWx_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter413 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter413.getKey());
              oprot.writeString(_iter413.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bangindWx_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map414 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map414.size);
            String _key415;
            String _val416;
            for (int _i417 = 0; _i417 < _map414.size; ++_i417)
            {
              _key415 = iprot.readString();
              _val416 = iprot.readString();
              struct.datamap.put(_key415, _val416);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class bangindWx_result implements org.apache.thrift.TBase<bangindWx_result, bangindWx_result._Fields>, java.io.Serializable, Cloneable, Comparable<bangindWx_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bangindWx_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bangindWx_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bangindWx_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bangindWx_result.class, metaDataMap);
    }

    public bangindWx_result() {
    }

    public bangindWx_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bangindWx_result(bangindWx_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public bangindWx_result deepCopy() {
      return new bangindWx_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public bangindWx_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bangindWx_result)
        return this.equals((bangindWx_result)that);
      return false;
    }

    public boolean equals(bangindWx_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(bangindWx_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bangindWx_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bangindWx_resultStandardSchemeFactory implements SchemeFactory {
      public bangindWx_resultStandardScheme getScheme() {
        return new bangindWx_resultStandardScheme();
      }
    }

    private static class bangindWx_resultStandardScheme extends StandardScheme<bangindWx_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bangindWx_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bangindWx_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bangindWx_resultTupleSchemeFactory implements SchemeFactory {
      public bangindWx_resultTupleScheme getScheme() {
        return new bangindWx_resultTupleScheme();
      }
    }

    private static class bangindWx_resultTupleScheme extends TupleScheme<bangindWx_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bangindWx_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bangindWx_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class unbundWx_args implements org.apache.thrift.TBase<unbundWx_args, unbundWx_args._Fields>, java.io.Serializable, Cloneable, Comparable<unbundWx_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unbundWx_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unbundWx_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unbundWx_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unbundWx_args.class, metaDataMap);
    }

    public unbundWx_args() {
    }

    public unbundWx_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unbundWx_args(unbundWx_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public unbundWx_args deepCopy() {
      return new unbundWx_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public unbundWx_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unbundWx_args)
        return this.equals((unbundWx_args)that);
      return false;
    }

    public boolean equals(unbundWx_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(unbundWx_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unbundWx_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unbundWx_argsStandardSchemeFactory implements SchemeFactory {
      public unbundWx_argsStandardScheme getScheme() {
        return new unbundWx_argsStandardScheme();
      }
    }

    private static class unbundWx_argsStandardScheme extends StandardScheme<unbundWx_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unbundWx_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map418 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map418.size);
                  String _key419;
                  String _val420;
                  for (int _i421 = 0; _i421 < _map418.size; ++_i421)
                  {
                    _key419 = iprot.readString();
                    _val420 = iprot.readString();
                    struct.datamap.put(_key419, _val420);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unbundWx_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter422 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter422.getKey());
              oprot.writeString(_iter422.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unbundWx_argsTupleSchemeFactory implements SchemeFactory {
      public unbundWx_argsTupleScheme getScheme() {
        return new unbundWx_argsTupleScheme();
      }
    }

    private static class unbundWx_argsTupleScheme extends TupleScheme<unbundWx_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unbundWx_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter423 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter423.getKey());
              oprot.writeString(_iter423.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unbundWx_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map424 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map424.size);
            String _key425;
            String _val426;
            for (int _i427 = 0; _i427 < _map424.size; ++_i427)
            {
              _key425 = iprot.readString();
              _val426 = iprot.readString();
              struct.datamap.put(_key425, _val426);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class unbundWx_result implements org.apache.thrift.TBase<unbundWx_result, unbundWx_result._Fields>, java.io.Serializable, Cloneable, Comparable<unbundWx_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unbundWx_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unbundWx_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unbundWx_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unbundWx_result.class, metaDataMap);
    }

    public unbundWx_result() {
    }

    public unbundWx_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unbundWx_result(unbundWx_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public unbundWx_result deepCopy() {
      return new unbundWx_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public unbundWx_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unbundWx_result)
        return this.equals((unbundWx_result)that);
      return false;
    }

    public boolean equals(unbundWx_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(unbundWx_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unbundWx_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unbundWx_resultStandardSchemeFactory implements SchemeFactory {
      public unbundWx_resultStandardScheme getScheme() {
        return new unbundWx_resultStandardScheme();
      }
    }

    private static class unbundWx_resultStandardScheme extends StandardScheme<unbundWx_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unbundWx_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unbundWx_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unbundWx_resultTupleSchemeFactory implements SchemeFactory {
      public unbundWx_resultTupleScheme getScheme() {
        return new unbundWx_resultTupleScheme();
      }
    }

    private static class unbundWx_resultTupleScheme extends TupleScheme<unbundWx_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unbundWx_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unbundWx_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCompanyAccountByMobile_args implements org.apache.thrift.TBase<getCompanyAccountByMobile_args, getCompanyAccountByMobile_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCompanyAccountByMobile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompanyAccountByMobile_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCompanyAccountByMobile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCompanyAccountByMobile_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompanyAccountByMobile_args.class, metaDataMap);
    }

    public getCompanyAccountByMobile_args() {
    }

    public getCompanyAccountByMobile_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompanyAccountByMobile_args(getCompanyAccountByMobile_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public getCompanyAccountByMobile_args deepCopy() {
      return new getCompanyAccountByMobile_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public getCompanyAccountByMobile_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCompanyAccountByMobile_args)
        return this.equals((getCompanyAccountByMobile_args)that);
      return false;
    }

    public boolean equals(getCompanyAccountByMobile_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCompanyAccountByMobile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCompanyAccountByMobile_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCompanyAccountByMobile_argsStandardSchemeFactory implements SchemeFactory {
      public getCompanyAccountByMobile_argsStandardScheme getScheme() {
        return new getCompanyAccountByMobile_argsStandardScheme();
      }
    }

    private static class getCompanyAccountByMobile_argsStandardScheme extends StandardScheme<getCompanyAccountByMobile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCompanyAccountByMobile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map428 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map428.size);
                  String _key429;
                  String _val430;
                  for (int _i431 = 0; _i431 < _map428.size; ++_i431)
                  {
                    _key429 = iprot.readString();
                    _val430 = iprot.readString();
                    struct.datamap.put(_key429, _val430);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCompanyAccountByMobile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter432 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter432.getKey());
              oprot.writeString(_iter432.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCompanyAccountByMobile_argsTupleSchemeFactory implements SchemeFactory {
      public getCompanyAccountByMobile_argsTupleScheme getScheme() {
        return new getCompanyAccountByMobile_argsTupleScheme();
      }
    }

    private static class getCompanyAccountByMobile_argsTupleScheme extends TupleScheme<getCompanyAccountByMobile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCompanyAccountByMobile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter433 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter433.getKey());
              oprot.writeString(_iter433.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCompanyAccountByMobile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map434 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map434.size);
            String _key435;
            String _val436;
            for (int _i437 = 0; _i437 < _map434.size; ++_i437)
            {
              _key435 = iprot.readString();
              _val436 = iprot.readString();
              struct.datamap.put(_key435, _val436);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class getCompanyAccountByMobile_result implements org.apache.thrift.TBase<getCompanyAccountByMobile_result, getCompanyAccountByMobile_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCompanyAccountByMobile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompanyAccountByMobile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCompanyAccountByMobile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCompanyAccountByMobile_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompanyAccountByMobile_result.class, metaDataMap);
    }

    public getCompanyAccountByMobile_result() {
    }

    public getCompanyAccountByMobile_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompanyAccountByMobile_result(getCompanyAccountByMobile_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public getCompanyAccountByMobile_result deepCopy() {
      return new getCompanyAccountByMobile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public getCompanyAccountByMobile_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCompanyAccountByMobile_result)
        return this.equals((getCompanyAccountByMobile_result)that);
      return false;
    }

    public boolean equals(getCompanyAccountByMobile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCompanyAccountByMobile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCompanyAccountByMobile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCompanyAccountByMobile_resultStandardSchemeFactory implements SchemeFactory {
      public getCompanyAccountByMobile_resultStandardScheme getScheme() {
        return new getCompanyAccountByMobile_resultStandardScheme();
      }
    }

    private static class getCompanyAccountByMobile_resultStandardScheme extends StandardScheme<getCompanyAccountByMobile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCompanyAccountByMobile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCompanyAccountByMobile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCompanyAccountByMobile_resultTupleSchemeFactory implements SchemeFactory {
      public getCompanyAccountByMobile_resultTupleScheme getScheme() {
        return new getCompanyAccountByMobile_resultTupleScheme();
      }
    }

    private static class getCompanyAccountByMobile_resultTupleScheme extends TupleScheme<getCompanyAccountByMobile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCompanyAccountByMobile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCompanyAccountByMobile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCustomAccountByEmail_args implements org.apache.thrift.TBase<getCustomAccountByEmail_args, getCustomAccountByEmail_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCustomAccountByEmail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCustomAccountByEmail_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCustomAccountByEmail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCustomAccountByEmail_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCustomAccountByEmail_args.class, metaDataMap);
    }

    public getCustomAccountByEmail_args() {
    }

    public getCustomAccountByEmail_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCustomAccountByEmail_args(getCustomAccountByEmail_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public getCustomAccountByEmail_args deepCopy() {
      return new getCustomAccountByEmail_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public getCustomAccountByEmail_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCustomAccountByEmail_args)
        return this.equals((getCustomAccountByEmail_args)that);
      return false;
    }

    public boolean equals(getCustomAccountByEmail_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCustomAccountByEmail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCustomAccountByEmail_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCustomAccountByEmail_argsStandardSchemeFactory implements SchemeFactory {
      public getCustomAccountByEmail_argsStandardScheme getScheme() {
        return new getCustomAccountByEmail_argsStandardScheme();
      }
    }

    private static class getCustomAccountByEmail_argsStandardScheme extends StandardScheme<getCustomAccountByEmail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCustomAccountByEmail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map438 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map438.size);
                  String _key439;
                  String _val440;
                  for (int _i441 = 0; _i441 < _map438.size; ++_i441)
                  {
                    _key439 = iprot.readString();
                    _val440 = iprot.readString();
                    struct.datamap.put(_key439, _val440);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCustomAccountByEmail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter442 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter442.getKey());
              oprot.writeString(_iter442.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCustomAccountByEmail_argsTupleSchemeFactory implements SchemeFactory {
      public getCustomAccountByEmail_argsTupleScheme getScheme() {
        return new getCustomAccountByEmail_argsTupleScheme();
      }
    }

    private static class getCustomAccountByEmail_argsTupleScheme extends TupleScheme<getCustomAccountByEmail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCustomAccountByEmail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter443 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter443.getKey());
              oprot.writeString(_iter443.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCustomAccountByEmail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map444 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map444.size);
            String _key445;
            String _val446;
            for (int _i447 = 0; _i447 < _map444.size; ++_i447)
            {
              _key445 = iprot.readString();
              _val446 = iprot.readString();
              struct.datamap.put(_key445, _val446);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class getCustomAccountByEmail_result implements org.apache.thrift.TBase<getCustomAccountByEmail_result, getCustomAccountByEmail_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCustomAccountByEmail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCustomAccountByEmail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCustomAccountByEmail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCustomAccountByEmail_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCustomAccountByEmail_result.class, metaDataMap);
    }

    public getCustomAccountByEmail_result() {
    }

    public getCustomAccountByEmail_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCustomAccountByEmail_result(getCustomAccountByEmail_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public getCustomAccountByEmail_result deepCopy() {
      return new getCustomAccountByEmail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public getCustomAccountByEmail_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCustomAccountByEmail_result)
        return this.equals((getCustomAccountByEmail_result)that);
      return false;
    }

    public boolean equals(getCustomAccountByEmail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCustomAccountByEmail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCustomAccountByEmail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCustomAccountByEmail_resultStandardSchemeFactory implements SchemeFactory {
      public getCustomAccountByEmail_resultStandardScheme getScheme() {
        return new getCustomAccountByEmail_resultStandardScheme();
      }
    }

    private static class getCustomAccountByEmail_resultStandardScheme extends StandardScheme<getCustomAccountByEmail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCustomAccountByEmail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCustomAccountByEmail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCustomAccountByEmail_resultTupleSchemeFactory implements SchemeFactory {
      public getCustomAccountByEmail_resultTupleScheme getScheme() {
        return new getCustomAccountByEmail_resultTupleScheme();
      }
    }

    private static class getCustomAccountByEmail_resultTupleScheme extends TupleScheme<getCustomAccountByEmail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCustomAccountByEmail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCustomAccountByEmail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addMyAttn_args implements org.apache.thrift.TBase<addMyAttn_args, addMyAttn_args._Fields>, java.io.Serializable, Cloneable, Comparable<addMyAttn_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMyAttn_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addMyAttn_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addMyAttn_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMyAttn_args.class, metaDataMap);
    }

    public addMyAttn_args() {
    }

    public addMyAttn_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMyAttn_args(addMyAttn_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public addMyAttn_args deepCopy() {
      return new addMyAttn_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public addMyAttn_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMyAttn_args)
        return this.equals((addMyAttn_args)that);
      return false;
    }

    public boolean equals(addMyAttn_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(addMyAttn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMyAttn_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMyAttn_argsStandardSchemeFactory implements SchemeFactory {
      public addMyAttn_argsStandardScheme getScheme() {
        return new addMyAttn_argsStandardScheme();
      }
    }

    private static class addMyAttn_argsStandardScheme extends StandardScheme<addMyAttn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMyAttn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map448 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map448.size);
                  String _key449;
                  String _val450;
                  for (int _i451 = 0; _i451 < _map448.size; ++_i451)
                  {
                    _key449 = iprot.readString();
                    _val450 = iprot.readString();
                    struct.datamap.put(_key449, _val450);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMyAttn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter452 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter452.getKey());
              oprot.writeString(_iter452.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMyAttn_argsTupleSchemeFactory implements SchemeFactory {
      public addMyAttn_argsTupleScheme getScheme() {
        return new addMyAttn_argsTupleScheme();
      }
    }

    private static class addMyAttn_argsTupleScheme extends TupleScheme<addMyAttn_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMyAttn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter453 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter453.getKey());
              oprot.writeString(_iter453.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMyAttn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map454 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map454.size);
            String _key455;
            String _val456;
            for (int _i457 = 0; _i457 < _map454.size; ++_i457)
            {
              _key455 = iprot.readString();
              _val456 = iprot.readString();
              struct.datamap.put(_key455, _val456);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class addMyAttn_result implements org.apache.thrift.TBase<addMyAttn_result, addMyAttn_result._Fields>, java.io.Serializable, Cloneable, Comparable<addMyAttn_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMyAttn_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addMyAttn_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addMyAttn_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMyAttn_result.class, metaDataMap);
    }

    public addMyAttn_result() {
    }

    public addMyAttn_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMyAttn_result(addMyAttn_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public addMyAttn_result deepCopy() {
      return new addMyAttn_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public addMyAttn_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMyAttn_result)
        return this.equals((addMyAttn_result)that);
      return false;
    }

    public boolean equals(addMyAttn_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addMyAttn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMyAttn_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMyAttn_resultStandardSchemeFactory implements SchemeFactory {
      public addMyAttn_resultStandardScheme getScheme() {
        return new addMyAttn_resultStandardScheme();
      }
    }

    private static class addMyAttn_resultStandardScheme extends StandardScheme<addMyAttn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMyAttn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMyAttn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMyAttn_resultTupleSchemeFactory implements SchemeFactory {
      public addMyAttn_resultTupleScheme getScheme() {
        return new addMyAttn_resultTupleScheme();
      }
    }

    private static class addMyAttn_resultTupleScheme extends TupleScheme<addMyAttn_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMyAttn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMyAttn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delMyAttn_args implements org.apache.thrift.TBase<delMyAttn_args, delMyAttn_args._Fields>, java.io.Serializable, Cloneable, Comparable<delMyAttn_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delMyAttn_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delMyAttn_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delMyAttn_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delMyAttn_args.class, metaDataMap);
    }

    public delMyAttn_args() {
    }

    public delMyAttn_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delMyAttn_args(delMyAttn_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public delMyAttn_args deepCopy() {
      return new delMyAttn_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public delMyAttn_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delMyAttn_args)
        return this.equals((delMyAttn_args)that);
      return false;
    }

    public boolean equals(delMyAttn_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(delMyAttn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delMyAttn_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delMyAttn_argsStandardSchemeFactory implements SchemeFactory {
      public delMyAttn_argsStandardScheme getScheme() {
        return new delMyAttn_argsStandardScheme();
      }
    }

    private static class delMyAttn_argsStandardScheme extends StandardScheme<delMyAttn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delMyAttn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map458 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map458.size);
                  String _key459;
                  String _val460;
                  for (int _i461 = 0; _i461 < _map458.size; ++_i461)
                  {
                    _key459 = iprot.readString();
                    _val460 = iprot.readString();
                    struct.datamap.put(_key459, _val460);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delMyAttn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter462 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter462.getKey());
              oprot.writeString(_iter462.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delMyAttn_argsTupleSchemeFactory implements SchemeFactory {
      public delMyAttn_argsTupleScheme getScheme() {
        return new delMyAttn_argsTupleScheme();
      }
    }

    private static class delMyAttn_argsTupleScheme extends TupleScheme<delMyAttn_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delMyAttn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter463 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter463.getKey());
              oprot.writeString(_iter463.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delMyAttn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map464 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map464.size);
            String _key465;
            String _val466;
            for (int _i467 = 0; _i467 < _map464.size; ++_i467)
            {
              _key465 = iprot.readString();
              _val466 = iprot.readString();
              struct.datamap.put(_key465, _val466);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class delMyAttn_result implements org.apache.thrift.TBase<delMyAttn_result, delMyAttn_result._Fields>, java.io.Serializable, Cloneable, Comparable<delMyAttn_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delMyAttn_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delMyAttn_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delMyAttn_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delMyAttn_result.class, metaDataMap);
    }

    public delMyAttn_result() {
    }

    public delMyAttn_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delMyAttn_result(delMyAttn_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public delMyAttn_result deepCopy() {
      return new delMyAttn_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public delMyAttn_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delMyAttn_result)
        return this.equals((delMyAttn_result)that);
      return false;
    }

    public boolean equals(delMyAttn_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delMyAttn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delMyAttn_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delMyAttn_resultStandardSchemeFactory implements SchemeFactory {
      public delMyAttn_resultStandardScheme getScheme() {
        return new delMyAttn_resultStandardScheme();
      }
    }

    private static class delMyAttn_resultStandardScheme extends StandardScheme<delMyAttn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delMyAttn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delMyAttn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delMyAttn_resultTupleSchemeFactory implements SchemeFactory {
      public delMyAttn_resultTupleScheme getScheme() {
        return new delMyAttn_resultTupleScheme();
      }
    }

    private static class delMyAttn_resultTupleScheme extends TupleScheme<delMyAttn_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delMyAttn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delMyAttn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listMyAttn_args implements org.apache.thrift.TBase<listMyAttn_args, listMyAttn_args._Fields>, java.io.Serializable, Cloneable, Comparable<listMyAttn_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listMyAttn_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listMyAttn_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listMyAttn_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listMyAttn_args.class, metaDataMap);
    }

    public listMyAttn_args() {
    }

    public listMyAttn_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listMyAttn_args(listMyAttn_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public listMyAttn_args deepCopy() {
      return new listMyAttn_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public listMyAttn_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listMyAttn_args)
        return this.equals((listMyAttn_args)that);
      return false;
    }

    public boolean equals(listMyAttn_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(listMyAttn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listMyAttn_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listMyAttn_argsStandardSchemeFactory implements SchemeFactory {
      public listMyAttn_argsStandardScheme getScheme() {
        return new listMyAttn_argsStandardScheme();
      }
    }

    private static class listMyAttn_argsStandardScheme extends StandardScheme<listMyAttn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listMyAttn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map468 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map468.size);
                  String _key469;
                  String _val470;
                  for (int _i471 = 0; _i471 < _map468.size; ++_i471)
                  {
                    _key469 = iprot.readString();
                    _val470 = iprot.readString();
                    struct.datamap.put(_key469, _val470);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listMyAttn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter472 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter472.getKey());
              oprot.writeString(_iter472.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listMyAttn_argsTupleSchemeFactory implements SchemeFactory {
      public listMyAttn_argsTupleScheme getScheme() {
        return new listMyAttn_argsTupleScheme();
      }
    }

    private static class listMyAttn_argsTupleScheme extends TupleScheme<listMyAttn_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listMyAttn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter473 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter473.getKey());
              oprot.writeString(_iter473.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listMyAttn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map474 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map474.size);
            String _key475;
            String _val476;
            for (int _i477 = 0; _i477 < _map474.size; ++_i477)
            {
              _key475 = iprot.readString();
              _val476 = iprot.readString();
              struct.datamap.put(_key475, _val476);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class listMyAttn_result implements org.apache.thrift.TBase<listMyAttn_result, listMyAttn_result._Fields>, java.io.Serializable, Cloneable, Comparable<listMyAttn_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listMyAttn_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listMyAttn_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listMyAttn_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listMyAttn_result.class, metaDataMap);
    }

    public listMyAttn_result() {
    }

    public listMyAttn_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listMyAttn_result(listMyAttn_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public listMyAttn_result deepCopy() {
      return new listMyAttn_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public listMyAttn_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listMyAttn_result)
        return this.equals((listMyAttn_result)that);
      return false;
    }

    public boolean equals(listMyAttn_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(listMyAttn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listMyAttn_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listMyAttn_resultStandardSchemeFactory implements SchemeFactory {
      public listMyAttn_resultStandardScheme getScheme() {
        return new listMyAttn_resultStandardScheme();
      }
    }

    private static class listMyAttn_resultStandardScheme extends StandardScheme<listMyAttn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listMyAttn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listMyAttn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listMyAttn_resultTupleSchemeFactory implements SchemeFactory {
      public listMyAttn_resultTupleScheme getScheme() {
        return new listMyAttn_resultTupleScheme();
      }
    }

    private static class listMyAttn_resultTupleScheme extends TupleScheme<listMyAttn_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listMyAttn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listMyAttn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listCompanyMember_args implements org.apache.thrift.TBase<listCompanyMember_args, listCompanyMember_args._Fields>, java.io.Serializable, Cloneable, Comparable<listCompanyMember_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCompanyMember_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listCompanyMember_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listCompanyMember_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCompanyMember_args.class, metaDataMap);
    }

    public listCompanyMember_args() {
    }

    public listCompanyMember_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCompanyMember_args(listCompanyMember_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public listCompanyMember_args deepCopy() {
      return new listCompanyMember_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public listCompanyMember_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listCompanyMember_args)
        return this.equals((listCompanyMember_args)that);
      return false;
    }

    public boolean equals(listCompanyMember_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(listCompanyMember_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listCompanyMember_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCompanyMember_argsStandardSchemeFactory implements SchemeFactory {
      public listCompanyMember_argsStandardScheme getScheme() {
        return new listCompanyMember_argsStandardScheme();
      }
    }

    private static class listCompanyMember_argsStandardScheme extends StandardScheme<listCompanyMember_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCompanyMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map478 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map478.size);
                  String _key479;
                  String _val480;
                  for (int _i481 = 0; _i481 < _map478.size; ++_i481)
                  {
                    _key479 = iprot.readString();
                    _val480 = iprot.readString();
                    struct.datamap.put(_key479, _val480);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCompanyMember_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter482 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter482.getKey());
              oprot.writeString(_iter482.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCompanyMember_argsTupleSchemeFactory implements SchemeFactory {
      public listCompanyMember_argsTupleScheme getScheme() {
        return new listCompanyMember_argsTupleScheme();
      }
    }

    private static class listCompanyMember_argsTupleScheme extends TupleScheme<listCompanyMember_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCompanyMember_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter483 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter483.getKey());
              oprot.writeString(_iter483.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCompanyMember_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map484 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map484.size);
            String _key485;
            String _val486;
            for (int _i487 = 0; _i487 < _map484.size; ++_i487)
            {
              _key485 = iprot.readString();
              _val486 = iprot.readString();
              struct.datamap.put(_key485, _val486);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class listCompanyMember_result implements org.apache.thrift.TBase<listCompanyMember_result, listCompanyMember_result._Fields>, java.io.Serializable, Cloneable, Comparable<listCompanyMember_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCompanyMember_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listCompanyMember_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listCompanyMember_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCompanyMember_result.class, metaDataMap);
    }

    public listCompanyMember_result() {
    }

    public listCompanyMember_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCompanyMember_result(listCompanyMember_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public listCompanyMember_result deepCopy() {
      return new listCompanyMember_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public listCompanyMember_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listCompanyMember_result)
        return this.equals((listCompanyMember_result)that);
      return false;
    }

    public boolean equals(listCompanyMember_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(listCompanyMember_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listCompanyMember_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCompanyMember_resultStandardSchemeFactory implements SchemeFactory {
      public listCompanyMember_resultStandardScheme getScheme() {
        return new listCompanyMember_resultStandardScheme();
      }
    }

    private static class listCompanyMember_resultStandardScheme extends StandardScheme<listCompanyMember_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCompanyMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCompanyMember_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCompanyMember_resultTupleSchemeFactory implements SchemeFactory {
      public listCompanyMember_resultTupleScheme getScheme() {
        return new listCompanyMember_resultTupleScheme();
      }
    }

    private static class listCompanyMember_resultTupleScheme extends TupleScheme<listCompanyMember_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCompanyMember_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCompanyMember_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class changeAppAdmin_args implements org.apache.thrift.TBase<changeAppAdmin_args, changeAppAdmin_args._Fields>, java.io.Serializable, Cloneable, Comparable<changeAppAdmin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeAppAdmin_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeAppAdmin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeAppAdmin_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeAppAdmin_args.class, metaDataMap);
    }

    public changeAppAdmin_args() {
    }

    public changeAppAdmin_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeAppAdmin_args(changeAppAdmin_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public changeAppAdmin_args deepCopy() {
      return new changeAppAdmin_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public changeAppAdmin_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeAppAdmin_args)
        return this.equals((changeAppAdmin_args)that);
      return false;
    }

    public boolean equals(changeAppAdmin_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(changeAppAdmin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeAppAdmin_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeAppAdmin_argsStandardSchemeFactory implements SchemeFactory {
      public changeAppAdmin_argsStandardScheme getScheme() {
        return new changeAppAdmin_argsStandardScheme();
      }
    }

    private static class changeAppAdmin_argsStandardScheme extends StandardScheme<changeAppAdmin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeAppAdmin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map488 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map488.size);
                  String _key489;
                  String _val490;
                  for (int _i491 = 0; _i491 < _map488.size; ++_i491)
                  {
                    _key489 = iprot.readString();
                    _val490 = iprot.readString();
                    struct.datamap.put(_key489, _val490);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeAppAdmin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter492 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter492.getKey());
              oprot.writeString(_iter492.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeAppAdmin_argsTupleSchemeFactory implements SchemeFactory {
      public changeAppAdmin_argsTupleScheme getScheme() {
        return new changeAppAdmin_argsTupleScheme();
      }
    }

    private static class changeAppAdmin_argsTupleScheme extends TupleScheme<changeAppAdmin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeAppAdmin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter493 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter493.getKey());
              oprot.writeString(_iter493.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeAppAdmin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map494 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map494.size);
            String _key495;
            String _val496;
            for (int _i497 = 0; _i497 < _map494.size; ++_i497)
            {
              _key495 = iprot.readString();
              _val496 = iprot.readString();
              struct.datamap.put(_key495, _val496);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class changeAppAdmin_result implements org.apache.thrift.TBase<changeAppAdmin_result, changeAppAdmin_result._Fields>, java.io.Serializable, Cloneable, Comparable<changeAppAdmin_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeAppAdmin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeAppAdmin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeAppAdmin_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeAppAdmin_result.class, metaDataMap);
    }

    public changeAppAdmin_result() {
    }

    public changeAppAdmin_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeAppAdmin_result(changeAppAdmin_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public changeAppAdmin_result deepCopy() {
      return new changeAppAdmin_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public changeAppAdmin_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeAppAdmin_result)
        return this.equals((changeAppAdmin_result)that);
      return false;
    }

    public boolean equals(changeAppAdmin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(changeAppAdmin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeAppAdmin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeAppAdmin_resultStandardSchemeFactory implements SchemeFactory {
      public changeAppAdmin_resultStandardScheme getScheme() {
        return new changeAppAdmin_resultStandardScheme();
      }
    }

    private static class changeAppAdmin_resultStandardScheme extends StandardScheme<changeAppAdmin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeAppAdmin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeAppAdmin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeAppAdmin_resultTupleSchemeFactory implements SchemeFactory {
      public changeAppAdmin_resultTupleScheme getScheme() {
        return new changeAppAdmin_resultTupleScheme();
      }
    }

    private static class changeAppAdmin_resultTupleScheme extends TupleScheme<changeAppAdmin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeAppAdmin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeAppAdmin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class userQueryByMobile_args implements org.apache.thrift.TBase<userQueryByMobile_args, userQueryByMobile_args._Fields>, java.io.Serializable, Cloneable, Comparable<userQueryByMobile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userQueryByMobile_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userQueryByMobile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userQueryByMobile_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userQueryByMobile_args.class, metaDataMap);
    }

    public userQueryByMobile_args() {
    }

    public userQueryByMobile_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userQueryByMobile_args(userQueryByMobile_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public userQueryByMobile_args deepCopy() {
      return new userQueryByMobile_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public userQueryByMobile_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userQueryByMobile_args)
        return this.equals((userQueryByMobile_args)that);
      return false;
    }

    public boolean equals(userQueryByMobile_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(userQueryByMobile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userQueryByMobile_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userQueryByMobile_argsStandardSchemeFactory implements SchemeFactory {
      public userQueryByMobile_argsStandardScheme getScheme() {
        return new userQueryByMobile_argsStandardScheme();
      }
    }

    private static class userQueryByMobile_argsStandardScheme extends StandardScheme<userQueryByMobile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userQueryByMobile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map498 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map498.size);
                  String _key499;
                  String _val500;
                  for (int _i501 = 0; _i501 < _map498.size; ++_i501)
                  {
                    _key499 = iprot.readString();
                    _val500 = iprot.readString();
                    struct.datamap.put(_key499, _val500);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userQueryByMobile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter502 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter502.getKey());
              oprot.writeString(_iter502.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userQueryByMobile_argsTupleSchemeFactory implements SchemeFactory {
      public userQueryByMobile_argsTupleScheme getScheme() {
        return new userQueryByMobile_argsTupleScheme();
      }
    }

    private static class userQueryByMobile_argsTupleScheme extends TupleScheme<userQueryByMobile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userQueryByMobile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter503 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter503.getKey());
              oprot.writeString(_iter503.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userQueryByMobile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map504 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map504.size);
            String _key505;
            String _val506;
            for (int _i507 = 0; _i507 < _map504.size; ++_i507)
            {
              _key505 = iprot.readString();
              _val506 = iprot.readString();
              struct.datamap.put(_key505, _val506);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class userQueryByMobile_result implements org.apache.thrift.TBase<userQueryByMobile_result, userQueryByMobile_result._Fields>, java.io.Serializable, Cloneable, Comparable<userQueryByMobile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userQueryByMobile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userQueryByMobile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userQueryByMobile_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userQueryByMobile_result.class, metaDataMap);
    }

    public userQueryByMobile_result() {
    }

    public userQueryByMobile_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userQueryByMobile_result(userQueryByMobile_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public userQueryByMobile_result deepCopy() {
      return new userQueryByMobile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public userQueryByMobile_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userQueryByMobile_result)
        return this.equals((userQueryByMobile_result)that);
      return false;
    }

    public boolean equals(userQueryByMobile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(userQueryByMobile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userQueryByMobile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userQueryByMobile_resultStandardSchemeFactory implements SchemeFactory {
      public userQueryByMobile_resultStandardScheme getScheme() {
        return new userQueryByMobile_resultStandardScheme();
      }
    }

    private static class userQueryByMobile_resultStandardScheme extends StandardScheme<userQueryByMobile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userQueryByMobile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userQueryByMobile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userQueryByMobile_resultTupleSchemeFactory implements SchemeFactory {
      public userQueryByMobile_resultTupleScheme getScheme() {
        return new userQueryByMobile_resultTupleScheme();
      }
    }

    private static class userQueryByMobile_resultTupleScheme extends TupleScheme<userQueryByMobile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userQueryByMobile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userQueryByMobile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class checkCert_args implements org.apache.thrift.TBase<checkCert_args, checkCert_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkCert_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkCert_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkCert_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkCert_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkCert_args.class, metaDataMap);
    }

    public checkCert_args() {
    }

    public checkCert_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkCert_args(checkCert_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public checkCert_args deepCopy() {
      return new checkCert_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public checkCert_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkCert_args)
        return this.equals((checkCert_args)that);
      return false;
    }

    public boolean equals(checkCert_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkCert_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkCert_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkCert_argsStandardSchemeFactory implements SchemeFactory {
      public checkCert_argsStandardScheme getScheme() {
        return new checkCert_argsStandardScheme();
      }
    }

    private static class checkCert_argsStandardScheme extends StandardScheme<checkCert_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkCert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map508 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map508.size);
                  String _key509;
                  String _val510;
                  for (int _i511 = 0; _i511 < _map508.size; ++_i511)
                  {
                    _key509 = iprot.readString();
                    _val510 = iprot.readString();
                    struct.datamap.put(_key509, _val510);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkCert_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter512 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter512.getKey());
              oprot.writeString(_iter512.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkCert_argsTupleSchemeFactory implements SchemeFactory {
      public checkCert_argsTupleScheme getScheme() {
        return new checkCert_argsTupleScheme();
      }
    }

    private static class checkCert_argsTupleScheme extends TupleScheme<checkCert_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkCert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter513 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter513.getKey());
              oprot.writeString(_iter513.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkCert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map514 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map514.size);
            String _key515;
            String _val516;
            for (int _i517 = 0; _i517 < _map514.size; ++_i517)
            {
              _key515 = iprot.readString();
              _val516 = iprot.readString();
              struct.datamap.put(_key515, _val516);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class checkCert_result implements org.apache.thrift.TBase<checkCert_result, checkCert_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkCert_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkCert_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkCert_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkCert_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkCert_result.class, metaDataMap);
    }

    public checkCert_result() {
    }

    public checkCert_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkCert_result(checkCert_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public checkCert_result deepCopy() {
      return new checkCert_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public checkCert_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkCert_result)
        return this.equals((checkCert_result)that);
      return false;
    }

    public boolean equals(checkCert_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkCert_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkCert_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkCert_resultStandardSchemeFactory implements SchemeFactory {
      public checkCert_resultStandardScheme getScheme() {
        return new checkCert_resultStandardScheme();
      }
    }

    private static class checkCert_resultStandardScheme extends StandardScheme<checkCert_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkCert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkCert_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkCert_resultTupleSchemeFactory implements SchemeFactory {
      public checkCert_resultTupleScheme getScheme() {
        return new checkCert_resultTupleScheme();
      }
    }

    private static class checkCert_resultTupleScheme extends TupleScheme<checkCert_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkCert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkCert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryUserExamineStatus_args implements org.apache.thrift.TBase<queryUserExamineStatus_args, queryUserExamineStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryUserExamineStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryUserExamineStatus_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryUserExamineStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryUserExamineStatus_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryUserExamineStatus_args.class, metaDataMap);
    }

    public queryUserExamineStatus_args() {
    }

    public queryUserExamineStatus_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryUserExamineStatus_args(queryUserExamineStatus_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public queryUserExamineStatus_args deepCopy() {
      return new queryUserExamineStatus_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public queryUserExamineStatus_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryUserExamineStatus_args)
        return this.equals((queryUserExamineStatus_args)that);
      return false;
    }

    public boolean equals(queryUserExamineStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryUserExamineStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryUserExamineStatus_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryUserExamineStatus_argsStandardSchemeFactory implements SchemeFactory {
      public queryUserExamineStatus_argsStandardScheme getScheme() {
        return new queryUserExamineStatus_argsStandardScheme();
      }
    }

    private static class queryUserExamineStatus_argsStandardScheme extends StandardScheme<queryUserExamineStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryUserExamineStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map518 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map518.size);
                  String _key519;
                  String _val520;
                  for (int _i521 = 0; _i521 < _map518.size; ++_i521)
                  {
                    _key519 = iprot.readString();
                    _val520 = iprot.readString();
                    struct.datamap.put(_key519, _val520);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryUserExamineStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter522 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter522.getKey());
              oprot.writeString(_iter522.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryUserExamineStatus_argsTupleSchemeFactory implements SchemeFactory {
      public queryUserExamineStatus_argsTupleScheme getScheme() {
        return new queryUserExamineStatus_argsTupleScheme();
      }
    }

    private static class queryUserExamineStatus_argsTupleScheme extends TupleScheme<queryUserExamineStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryUserExamineStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter523 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter523.getKey());
              oprot.writeString(_iter523.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryUserExamineStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map524 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map524.size);
            String _key525;
            String _val526;
            for (int _i527 = 0; _i527 < _map524.size; ++_i527)
            {
              _key525 = iprot.readString();
              _val526 = iprot.readString();
              struct.datamap.put(_key525, _val526);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class queryUserExamineStatus_result implements org.apache.thrift.TBase<queryUserExamineStatus_result, queryUserExamineStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryUserExamineStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryUserExamineStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryUserExamineStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryUserExamineStatus_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryUserExamineStatus_result.class, metaDataMap);
    }

    public queryUserExamineStatus_result() {
    }

    public queryUserExamineStatus_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryUserExamineStatus_result(queryUserExamineStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public queryUserExamineStatus_result deepCopy() {
      return new queryUserExamineStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public queryUserExamineStatus_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryUserExamineStatus_result)
        return this.equals((queryUserExamineStatus_result)that);
      return false;
    }

    public boolean equals(queryUserExamineStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryUserExamineStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryUserExamineStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryUserExamineStatus_resultStandardSchemeFactory implements SchemeFactory {
      public queryUserExamineStatus_resultStandardScheme getScheme() {
        return new queryUserExamineStatus_resultStandardScheme();
      }
    }

    private static class queryUserExamineStatus_resultStandardScheme extends StandardScheme<queryUserExamineStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryUserExamineStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryUserExamineStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryUserExamineStatus_resultTupleSchemeFactory implements SchemeFactory {
      public queryUserExamineStatus_resultTupleScheme getScheme() {
        return new queryUserExamineStatus_resultTupleScheme();
      }
    }

    private static class queryUserExamineStatus_resultTupleScheme extends TupleScheme<queryUserExamineStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryUserExamineStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryUserExamineStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class synchronizationUserInfo_args implements org.apache.thrift.TBase<synchronizationUserInfo_args, synchronizationUserInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<synchronizationUserInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("synchronizationUserInfo_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new synchronizationUserInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new synchronizationUserInfo_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(synchronizationUserInfo_args.class, metaDataMap);
    }

    public synchronizationUserInfo_args() {
    }

    public synchronizationUserInfo_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public synchronizationUserInfo_args(synchronizationUserInfo_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public synchronizationUserInfo_args deepCopy() {
      return new synchronizationUserInfo_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public synchronizationUserInfo_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof synchronizationUserInfo_args)
        return this.equals((synchronizationUserInfo_args)that);
      return false;
    }

    public boolean equals(synchronizationUserInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(synchronizationUserInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("synchronizationUserInfo_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class synchronizationUserInfo_argsStandardSchemeFactory implements SchemeFactory {
      public synchronizationUserInfo_argsStandardScheme getScheme() {
        return new synchronizationUserInfo_argsStandardScheme();
      }
    }

    private static class synchronizationUserInfo_argsStandardScheme extends StandardScheme<synchronizationUserInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, synchronizationUserInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map528 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map528.size);
                  String _key529;
                  String _val530;
                  for (int _i531 = 0; _i531 < _map528.size; ++_i531)
                  {
                    _key529 = iprot.readString();
                    _val530 = iprot.readString();
                    struct.datamap.put(_key529, _val530);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, synchronizationUserInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter532 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter532.getKey());
              oprot.writeString(_iter532.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class synchronizationUserInfo_argsTupleSchemeFactory implements SchemeFactory {
      public synchronizationUserInfo_argsTupleScheme getScheme() {
        return new synchronizationUserInfo_argsTupleScheme();
      }
    }

    private static class synchronizationUserInfo_argsTupleScheme extends TupleScheme<synchronizationUserInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, synchronizationUserInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter533 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter533.getKey());
              oprot.writeString(_iter533.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, synchronizationUserInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map534 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map534.size);
            String _key535;
            String _val536;
            for (int _i537 = 0; _i537 < _map534.size; ++_i537)
            {
              _key535 = iprot.readString();
              _val536 = iprot.readString();
              struct.datamap.put(_key535, _val536);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class synchronizationUserInfo_result implements org.apache.thrift.TBase<synchronizationUserInfo_result, synchronizationUserInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<synchronizationUserInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("synchronizationUserInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new synchronizationUserInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new synchronizationUserInfo_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(synchronizationUserInfo_result.class, metaDataMap);
    }

    public synchronizationUserInfo_result() {
    }

    public synchronizationUserInfo_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public synchronizationUserInfo_result(synchronizationUserInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public synchronizationUserInfo_result deepCopy() {
      return new synchronizationUserInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public synchronizationUserInfo_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof synchronizationUserInfo_result)
        return this.equals((synchronizationUserInfo_result)that);
      return false;
    }

    public boolean equals(synchronizationUserInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(synchronizationUserInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("synchronizationUserInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class synchronizationUserInfo_resultStandardSchemeFactory implements SchemeFactory {
      public synchronizationUserInfo_resultStandardScheme getScheme() {
        return new synchronizationUserInfo_resultStandardScheme();
      }
    }

    private static class synchronizationUserInfo_resultStandardScheme extends StandardScheme<synchronizationUserInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, synchronizationUserInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, synchronizationUserInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class synchronizationUserInfo_resultTupleSchemeFactory implements SchemeFactory {
      public synchronizationUserInfo_resultTupleScheme getScheme() {
        return new synchronizationUserInfo_resultTupleScheme();
      }
    }

    private static class synchronizationUserInfo_resultTupleScheme extends TupleScheme<synchronizationUserInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, synchronizationUserInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, synchronizationUserInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class userRegisterTUNIU_args implements org.apache.thrift.TBase<userRegisterTUNIU_args, userRegisterTUNIU_args._Fields>, java.io.Serializable, Cloneable, Comparable<userRegisterTUNIU_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userRegisterTUNIU_args");

    private static final org.apache.thrift.protocol.TField DATAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datamap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userRegisterTUNIU_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userRegisterTUNIU_argsTupleSchemeFactory());
    }

    public Map<String,String> datamap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATAMAP((short)1, "datamap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATAMAP
            return DATAMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATAMAP, new org.apache.thrift.meta_data.FieldMetaData("datamap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userRegisterTUNIU_args.class, metaDataMap);
    }

    public userRegisterTUNIU_args() {
    }

    public userRegisterTUNIU_args(
      Map<String,String> datamap)
    {
      this();
      this.datamap = datamap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userRegisterTUNIU_args(userRegisterTUNIU_args other) {
      if (other.isSetDatamap()) {
        Map<String,String> __this__datamap = new HashMap<String,String>(other.datamap);
        this.datamap = __this__datamap;
      }
    }

    public userRegisterTUNIU_args deepCopy() {
      return new userRegisterTUNIU_args(this);
    }

    @Override
    public void clear() {
      this.datamap = null;
    }

    public int getDatamapSize() {
      return (this.datamap == null) ? 0 : this.datamap.size();
    }

    public void putToDatamap(String key, String val) {
      if (this.datamap == null) {
        this.datamap = new HashMap<String,String>();
      }
      this.datamap.put(key, val);
    }

    public Map<String,String> getDatamap() {
      return this.datamap;
    }

    public userRegisterTUNIU_args setDatamap(Map<String,String> datamap) {
      this.datamap = datamap;
      return this;
    }

    public void unsetDatamap() {
      this.datamap = null;
    }

    /** Returns true if field datamap is set (has been assigned a value) and false otherwise */
    public boolean isSetDatamap() {
      return this.datamap != null;
    }

    public void setDatamapIsSet(boolean value) {
      if (!value) {
        this.datamap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATAMAP:
        if (value == null) {
          unsetDatamap();
        } else {
          setDatamap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATAMAP:
        return getDatamap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATAMAP:
        return isSetDatamap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userRegisterTUNIU_args)
        return this.equals((userRegisterTUNIU_args)that);
      return false;
    }

    public boolean equals(userRegisterTUNIU_args that) {
      if (that == null)
        return false;

      boolean this_present_datamap = true && this.isSetDatamap();
      boolean that_present_datamap = true && that.isSetDatamap();
      if (this_present_datamap || that_present_datamap) {
        if (!(this_present_datamap && that_present_datamap))
          return false;
        if (!this.datamap.equals(that.datamap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_datamap = true && (isSetDatamap());
      list.add(present_datamap);
      if (present_datamap)
        list.add(datamap);

      return list.hashCode();
    }

    @Override
    public int compareTo(userRegisterTUNIU_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatamap()).compareTo(other.isSetDatamap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatamap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datamap, other.datamap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userRegisterTUNIU_args(");
      boolean first = true;

      sb.append("datamap:");
      if (this.datamap == null) {
        sb.append("null");
      } else {
        sb.append(this.datamap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userRegisterTUNIU_argsStandardSchemeFactory implements SchemeFactory {
      public userRegisterTUNIU_argsStandardScheme getScheme() {
        return new userRegisterTUNIU_argsStandardScheme();
      }
    }

    private static class userRegisterTUNIU_argsStandardScheme extends StandardScheme<userRegisterTUNIU_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userRegisterTUNIU_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATAMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map538 = iprot.readMapBegin();
                  struct.datamap = new HashMap<String,String>(2*_map538.size);
                  String _key539;
                  String _val540;
                  for (int _i541 = 0; _i541 < _map538.size; ++_i541)
                  {
                    _key539 = iprot.readString();
                    _val540 = iprot.readString();
                    struct.datamap.put(_key539, _val540);
                  }
                  iprot.readMapEnd();
                }
                struct.setDatamapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userRegisterTUNIU_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datamap != null) {
          oprot.writeFieldBegin(DATAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.datamap.size()));
            for (Map.Entry<String, String> _iter542 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter542.getKey());
              oprot.writeString(_iter542.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userRegisterTUNIU_argsTupleSchemeFactory implements SchemeFactory {
      public userRegisterTUNIU_argsTupleScheme getScheme() {
        return new userRegisterTUNIU_argsTupleScheme();
      }
    }

    private static class userRegisterTUNIU_argsTupleScheme extends TupleScheme<userRegisterTUNIU_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userRegisterTUNIU_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatamap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatamap()) {
          {
            oprot.writeI32(struct.datamap.size());
            for (Map.Entry<String, String> _iter543 : struct.datamap.entrySet())
            {
              oprot.writeString(_iter543.getKey());
              oprot.writeString(_iter543.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userRegisterTUNIU_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map544 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.datamap = new HashMap<String,String>(2*_map544.size);
            String _key545;
            String _val546;
            for (int _i547 = 0; _i547 < _map544.size; ++_i547)
            {
              _key545 = iprot.readString();
              _val546 = iprot.readString();
              struct.datamap.put(_key545, _val546);
            }
          }
          struct.setDatamapIsSet(true);
        }
      }
    }

  }

  public static class userRegisterTUNIU_result implements org.apache.thrift.TBase<userRegisterTUNIU_result, userRegisterTUNIU_result._Fields>, java.io.Serializable, Cloneable, Comparable<userRegisterTUNIU_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userRegisterTUNIU_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userRegisterTUNIU_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userRegisterTUNIU_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userRegisterTUNIU_result.class, metaDataMap);
    }

    public userRegisterTUNIU_result() {
    }

    public userRegisterTUNIU_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userRegisterTUNIU_result(userRegisterTUNIU_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public userRegisterTUNIU_result deepCopy() {
      return new userRegisterTUNIU_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public userRegisterTUNIU_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userRegisterTUNIU_result)
        return this.equals((userRegisterTUNIU_result)that);
      return false;
    }

    public boolean equals(userRegisterTUNIU_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(userRegisterTUNIU_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userRegisterTUNIU_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userRegisterTUNIU_resultStandardSchemeFactory implements SchemeFactory {
      public userRegisterTUNIU_resultStandardScheme getScheme() {
        return new userRegisterTUNIU_resultStandardScheme();
      }
    }

    private static class userRegisterTUNIU_resultStandardScheme extends StandardScheme<userRegisterTUNIU_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userRegisterTUNIU_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userRegisterTUNIU_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userRegisterTUNIU_resultTupleSchemeFactory implements SchemeFactory {
      public userRegisterTUNIU_resultTupleScheme getScheme() {
        return new userRegisterTUNIU_resultTupleScheme();
      }
    }

    private static class userRegisterTUNIU_resultTupleScheme extends TupleScheme<userRegisterTUNIU_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userRegisterTUNIU_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userRegisterTUNIU_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
